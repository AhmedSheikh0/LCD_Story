
Little_Story.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000238  00800060  00004b38  00004bcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800298  00800298  00004e04  2**0
                  ALLOC
  3 .stab         00003ca8  00000000  00000000  00004e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011b8  00000000  00000000  00008aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c401  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d787  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e960  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000eb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ee16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_1>
       8:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_2>
       c:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 48 24 	call	0x4890	; 0x4890 <main>
      8a:	0c 94 9a 25 	jmp	0x4b34	; 0x4b34 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6b 25 	jmp	0x4ad6	; 0x4ad6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 87 25 	jmp	0x4b0e	; 0x4b0e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 73 25 	jmp	0x4ae6	; 0x4ae6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8f 25 	jmp	0x4b1e	; 0x4b1e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 6b 25 	jmp	0x4ad6	; 0x4ad6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 87 25 	jmp	0x4b0e	; 0x4b0e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 58       	subi	r30, 0x8C	; 140
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <PORT_voidInit>:
#include "Port_Interface.h"
#include "Port_Register.h"


void PORT_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR ;
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	80 83       	st	Z, r24
    DDRB = PORTB_DIR ;
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	87 e9       	ldi	r24, 0x97	; 151
     e44:	80 83       	st	Z, r24
    DDRC = PORTC_DIR ;
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	10 82       	st	Z, r1
    DDRD = PORTD_DIR ;
     e4c:	e1 e3       	ldi	r30, 0x31	; 49
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	8a e0       	ldi	r24, 0x0A	; 10
     e52:	80 83       	st	Z, r24

    PORTA = PORTA_INIT_VALUE;
     e54:	eb e3       	ldi	r30, 0x3B	; 59
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1
    PORTB = PORTB_INIT_VALUE;
     e5a:	e8 e3       	ldi	r30, 0x38	; 56
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	10 82       	st	Z, r1
    PORTC = PORTC_INIT_VALUE;
     e60:	e5 e3       	ldi	r30, 0x35	; 53
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	8c e3       	ldi	r24, 0x3C	; 60
     e66:	80 83       	st	Z, r24
    PORTD = PORTD_INIT_VALUE;
     e68:	e2 e3       	ldi	r30, 0x32	; 50
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	84 e0       	ldi	r24, 0x04	; 4
     e6e:	80 83       	st	Z, r24


}
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <GIE_voidEnable>:

#include "GIE_Register.h"
#include "GIE_Interface.h"

void GIE_voidEnable(void)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt  */
	Set_Bit(SREG, SREG_I);
     e7e:	af e5       	ldi	r26, 0x5F	; 95
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	ef e5       	ldi	r30, 0x5F	; 95
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 68       	ori	r24, 0x80	; 128
     e8a:	8c 93       	st	X, r24
}
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	/* Disable Global Interrupt  */
	Clear_Bit(SREG, SREG_I);
     e9a:	af e5       	ldi	r26, 0x5F	; 95
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	ef e5       	ldi	r30, 0x5F	; 95
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 77       	andi	r24, 0x7F	; 127
     ea6:	8c 93       	st	X, r24
}
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <EXTI0_voidInit>:
void (*EXTI_pvINT1Func)(void) = NULL;
void (*EXTI_pvINT2Func)(void) = NULL;


void EXTI0_voidInit(void)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
#if		SELECT_INT0_SENSE_CONTROL == FALLING_EADGE
	/* ISC01 -> 1, ISC00 -> 0  */
	Set_Bit(MCUCR, MCUCR_ISC01);
     eb6:	a5 e5       	ldi	r26, 0x55	; 85
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e5 e5       	ldi	r30, 0x55	; 85
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	8c 93       	st	X, r24
	Clear_Bit(MCUCR, MCUCR_ISC00);
     ec4:	a5 e5       	ldi	r26, 0x55	; 85
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e5 e5       	ldi	r30, 0x55	; 85
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8e 7f       	andi	r24, 0xFE	; 254
     ed0:	8c 93       	st	X, r24
	Set_Bit(MCUCR, MCUCR_ISC00);
	Clear_Bit(MCUCR, MCUCR_ISC01);
#else
#error "WRONG SENCE CONTROL"
#endif
}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <EXTI0_voidEnable>:

void EXTI0_voidEnable(void)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT0);
     ee0:	ab e5       	ldi	r26, 0x5B	; 91
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	eb e5       	ldi	r30, 0x5B	; 91
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 64       	ori	r24, 0x40	; 64
     eec:	8c 93       	st	X, r24
}
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <EXTI0_voidDisable>:

void EXTI0_voidDisable(void)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT0);
     efc:	ab e5       	ldi	r26, 0x5B	; 91
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	eb e5       	ldi	r30, 0x5B	; 91
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8f 7b       	andi	r24, 0xBF	; 191
     f08:	8c 93       	st	X, r24
}
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <EXT0_voidSetSignalch>:

void EXT0_voidSetSignalch(u8 SenseCpy)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	00 d0       	rcall	.+0      	; 0xf16 <EXT0_voidSetSignalch+0x6>
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
	switch( SenseCpy )
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3b 83       	std	Y+3, r19	; 0x03
     f26:	2a 83       	std	Y+2, r18	; 0x02
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	9b 81       	ldd	r25, Y+3	; 0x03
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	91 05       	cpc	r25, r1
     f30:	99 f1       	breq	.+102    	; 0xf98 <EXT0_voidSetSignalch+0x88>
     f32:	2a 81       	ldd	r18, Y+2	; 0x02
     f34:	3b 81       	ldd	r19, Y+3	; 0x03
     f36:	23 30       	cpi	r18, 0x03	; 3
     f38:	31 05       	cpc	r19, r1
     f3a:	34 f4       	brge	.+12     	; 0xf48 <EXT0_voidSetSignalch+0x38>
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	9b 81       	ldd	r25, Y+3	; 0x03
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	c1 f1       	breq	.+112    	; 0xfb6 <EXT0_voidSetSignalch+0xa6>
     f46:	45 c0       	rjmp	.+138    	; 0xfd2 <EXT0_voidSetSignalch+0xc2>
     f48:	2a 81       	ldd	r18, Y+2	; 0x02
     f4a:	3b 81       	ldd	r19, Y+3	; 0x03
     f4c:	23 30       	cpi	r18, 0x03	; 3
     f4e:	31 05       	cpc	r19, r1
     f50:	a1 f0       	breq	.+40     	; 0xf7a <EXT0_voidSetSignalch+0x6a>
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	9b 81       	ldd	r25, Y+3	; 0x03
     f56:	84 30       	cpi	r24, 0x04	; 4
     f58:	91 05       	cpc	r25, r1
     f5a:	d9 f5       	brne	.+118    	; 0xfd2 <EXT0_voidSetSignalch+0xc2>
	{
	case FALLING_EADGE:
		/* ISC01 -> 1, ISC00 -> 0  */
		Set_Bit(MCUCR, MCUCR_ISC01);
     f5c:	a5 e5       	ldi	r26, 0x55	; 85
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e5 e5       	ldi	r30, 0x55	; 85
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	82 60       	ori	r24, 0x02	; 2
     f68:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC00);
     f6a:	a5 e5       	ldi	r26, 0x55	; 85
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e5       	ldi	r30, 0x55	; 85
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8e 7f       	andi	r24, 0xFE	; 254
     f76:	8c 93       	st	X, r24
     f78:	2c c0       	rjmp	.+88     	; 0xfd2 <EXT0_voidSetSignalch+0xc2>
		break;
	case RISING_EADGE:
		/* ISC01 -> 1, ISC00 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC01);
     f7a:	a5 e5       	ldi	r26, 0x55	; 85
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e5 e5       	ldi	r30, 0x55	; 85
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	82 60       	ori	r24, 0x02	; 2
     f86:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC00);
     f88:	a5 e5       	ldi	r26, 0x55	; 85
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e5 e5       	ldi	r30, 0x55	; 85
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	81 60       	ori	r24, 0x01	; 1
     f94:	8c 93       	st	X, r24
     f96:	1d c0       	rjmp	.+58     	; 0xfd2 <EXT0_voidSetSignalch+0xc2>
		break;
	case LOW_LEVEL:
		/* ISC01 -> 0, ISC00 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC01);
     f98:	a5 e5       	ldi	r26, 0x55	; 85
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e5       	ldi	r30, 0x55	; 85
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8d 7f       	andi	r24, 0xFD	; 253
     fa4:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC00);
     fa6:	a5 e5       	ldi	r26, 0x55	; 85
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e5 e5       	ldi	r30, 0x55	; 85
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8e 7f       	andi	r24, 0xFE	; 254
     fb2:	8c 93       	st	X, r24
     fb4:	0e c0       	rjmp	.+28     	; 0xfd2 <EXT0_voidSetSignalch+0xc2>

		break;
	case ON_CHANGE:
		/* ISC01 -> 0, ISC00 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC00);
     fb6:	a5 e5       	ldi	r26, 0x55	; 85
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e5 e5       	ldi	r30, 0x55	; 85
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	81 60       	ori	r24, 0x01	; 1
     fc2:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC01);
     fc4:	a5 e5       	ldi	r26, 0x55	; 85
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e5       	ldi	r30, 0x55	; 85
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8d 7f       	andi	r24, 0xFD	; 253
     fd0:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <EXTI1_voidInit>:

void EXTI1_voidInit(void)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
#if		SELECT_INT1_SENSE_CONTROL == FALLING_EADGE
	/* ISC11 -> 1, ISC10 -> 0  */
	Clear_Bit(MCUCR, MCUCR_ISC10);
     fe6:	a5 e5       	ldi	r26, 0x55	; 85
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e5 e5       	ldi	r30, 0x55	; 85
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8b 7f       	andi	r24, 0xFB	; 251
     ff2:	8c 93       	st	X, r24
	Set_Bit(MCUCR, MCUCR_ISC11);
     ff4:	a5 e5       	ldi	r26, 0x55	; 85
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e5 e5       	ldi	r30, 0x55	; 85
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	88 60       	ori	r24, 0x08	; 8
    1000:	8c 93       	st	X, r24
	Clear_Bit(MCUCR, MCUCR_ISC11);
	Set_Bit(MCUCR, MCUCR_ISC10);

#error "WRONG SENCE CONTROL"
#endif
}
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <EXTI1_voidEnable>:

void EXTI1_voidEnable(void)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT1);
    1010:	ab e5       	ldi	r26, 0x5B	; 91
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	eb e5       	ldi	r30, 0x5B	; 91
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	80 68       	ori	r24, 0x80	; 128
    101c:	8c 93       	st	X, r24
}
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <EXTI1_voidDisable>:

void EXTI1_voidDisable(void)
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT1);
    102c:	ab e5       	ldi	r26, 0x5B	; 91
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	eb e5       	ldi	r30, 0x5B	; 91
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	8f 77       	andi	r24, 0x7F	; 127
    1038:	8c 93       	st	X, r24
}
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <EXT1_voidSetSignalch>:

void EXT1_voidSetSignalch(u8 SenseCpy)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <EXT1_voidSetSignalch+0x6>
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	89 83       	std	Y+1, r24	; 0x01

	switch (SenseCpy)
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	3b 83       	std	Y+3, r19	; 0x03
    1056:	2a 83       	std	Y+2, r18	; 0x02
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	91 05       	cpc	r25, r1
    1060:	99 f1       	breq	.+102    	; 0x10c8 <EXT1_voidSetSignalch+0x88>
    1062:	2a 81       	ldd	r18, Y+2	; 0x02
    1064:	3b 81       	ldd	r19, Y+3	; 0x03
    1066:	23 30       	cpi	r18, 0x03	; 3
    1068:	31 05       	cpc	r19, r1
    106a:	34 f4       	brge	.+12     	; 0x1078 <EXT1_voidSetSignalch+0x38>
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	9b 81       	ldd	r25, Y+3	; 0x03
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	91 05       	cpc	r25, r1
    1074:	c1 f1       	breq	.+112    	; 0x10e6 <EXT1_voidSetSignalch+0xa6>
    1076:	45 c0       	rjmp	.+138    	; 0x1102 <EXT1_voidSetSignalch+0xc2>
    1078:	2a 81       	ldd	r18, Y+2	; 0x02
    107a:	3b 81       	ldd	r19, Y+3	; 0x03
    107c:	23 30       	cpi	r18, 0x03	; 3
    107e:	31 05       	cpc	r19, r1
    1080:	a1 f0       	breq	.+40     	; 0x10aa <EXT1_voidSetSignalch+0x6a>
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	84 30       	cpi	r24, 0x04	; 4
    1088:	91 05       	cpc	r25, r1
    108a:	d9 f5       	brne	.+118    	; 0x1102 <EXT1_voidSetSignalch+0xc2>
	{
	case FALLING_EADGE:
		/* ISC11 -> 1, ISC10 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC10);
    108c:	a5 e5       	ldi	r26, 0x55	; 85
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e5 e5       	ldi	r30, 0x55	; 85
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8b 7f       	andi	r24, 0xFB	; 251
    1098:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC11);
    109a:	a5 e5       	ldi	r26, 0x55	; 85
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e5 e5       	ldi	r30, 0x55	; 85
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	88 60       	ori	r24, 0x08	; 8
    10a6:	8c 93       	st	X, r24
    10a8:	2c c0       	rjmp	.+88     	; 0x1102 <EXT1_voidSetSignalch+0xc2>
		break;
	case RISING_EADGE:
		/* ISC11 -> 1, ISC10 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC10);
    10aa:	a5 e5       	ldi	r26, 0x55	; 85
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e5 e5       	ldi	r30, 0x55	; 85
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	84 60       	ori	r24, 0x04	; 4
    10b6:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC11);
    10b8:	a5 e5       	ldi	r26, 0x55	; 85
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e5       	ldi	r30, 0x55	; 85
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	88 60       	ori	r24, 0x08	; 8
    10c4:	8c 93       	st	X, r24
    10c6:	1d c0       	rjmp	.+58     	; 0x1102 <EXT1_voidSetSignalch+0xc2>
		break;
	case LOW_LEVEL:
		/* ISC11 -> 0, ISC10 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC10);
    10c8:	a5 e5       	ldi	r26, 0x55	; 85
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e5 e5       	ldi	r30, 0x55	; 85
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8b 7f       	andi	r24, 0xFB	; 251
    10d4:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC11);
    10d6:	a5 e5       	ldi	r26, 0x55	; 85
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e5       	ldi	r30, 0x55	; 85
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	87 7f       	andi	r24, 0xF7	; 247
    10e2:	8c 93       	st	X, r24
    10e4:	0e c0       	rjmp	.+28     	; 0x1102 <EXT1_voidSetSignalch+0xc2>
		break;
	case ON_CHANGE:
		/* ISC11 -> 1, ISC10 -> 1  */
		Clear_Bit(MCUCR, MCUCR_ISC11);
    10e6:	a5 e5       	ldi	r26, 0x55	; 85
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e5 e5       	ldi	r30, 0x55	; 85
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	87 7f       	andi	r24, 0xF7	; 247
    10f2:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC10);
    10f4:	a5 e5       	ldi	r26, 0x55	; 85
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e5       	ldi	r30, 0x55	; 85
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	84 60       	ori	r24, 0x04	; 4
    1100:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <EXT0_VID_SET_CALL_BACK>:


//callback function
void EXT0_VID_SET_CALL_BACK(void (*PTR)(void))
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	00 d0       	rcall	.+0      	; 0x1114 <EXT0_VID_SET_CALL_BACK+0x6>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	9a 81       	ldd	r25, Y+2	; 0x02
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	31 f0       	breq	.+12     	; 0x1130 <EXT0_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT0Func = PTR;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	90 93 99 02 	sts	0x0299, r25
    112c:	80 93 98 02 	sts	0x0298, r24
	}
	else
	{

	}
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <EXT1_VID_SET_CALL_BACK>:
void EXT1_VID_SET_CALL_BACK(void (*PTR)(void))
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <EXT1_VID_SET_CALL_BACK+0x6>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	31 f0       	breq	.+12     	; 0x115c <EXT1_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT1Func = PTR;
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	90 93 9b 02 	sts	0x029B, r25
    1158:	80 93 9a 02 	sts	0x029A, r24
	}
	else
	{

	}
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <EXT2_VID_SET_CALL_BACK>:
void EXT2_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <EXT2_VID_SET_CALL_BACK+0x6>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	31 f0       	breq	.+12     	; 0x1188 <EXT2_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT2Func = PTR;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	9a 81       	ldd	r25, Y+2	; 0x02
    1180:	90 93 9d 02 	sts	0x029D, r25
    1184:	80 93 9c 02 	sts	0x029C, r24
	}
	else
	{

	}
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <__vector_1>:



void __vector_1(void)__attribute__((signal,used, externally_visible));
void __vector_1(void)
{
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	2f 93       	push	r18
    119e:	3f 93       	push	r19
    11a0:	4f 93       	push	r20
    11a2:	5f 93       	push	r21
    11a4:	6f 93       	push	r22
    11a6:	7f 93       	push	r23
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	af 93       	push	r26
    11ae:	bf 93       	push	r27
    11b0:	ef 93       	push	r30
    11b2:	ff 93       	push	r31
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT0Func != NULL)
    11bc:	80 91 98 02 	lds	r24, 0x0298
    11c0:	90 91 99 02 	lds	r25, 0x0299
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	29 f0       	breq	.+10     	; 0x11d2 <__vector_1+0x40>
	{
		EXTI_pvINT0Func();
    11c8:	e0 91 98 02 	lds	r30, 0x0298
    11cc:	f0 91 99 02 	lds	r31, 0x0299
    11d0:	09 95       	icall
	}
}
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	bf 91       	pop	r27
    11dc:	af 91       	pop	r26
    11de:	9f 91       	pop	r25
    11e0:	8f 91       	pop	r24
    11e2:	7f 91       	pop	r23
    11e4:	6f 91       	pop	r22
    11e6:	5f 91       	pop	r21
    11e8:	4f 91       	pop	r20
    11ea:	3f 91       	pop	r19
    11ec:	2f 91       	pop	r18
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	1f 90       	pop	r1
    11f6:	18 95       	reti

000011f8 <__vector_2>:

void __vector_2(void)__attribute__((signal,used, externally_visible));
void __vector_2(void)
{
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT1Func != NULL)
    1222:	80 91 9a 02 	lds	r24, 0x029A
    1226:	90 91 9b 02 	lds	r25, 0x029B
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	29 f0       	breq	.+10     	; 0x1238 <__vector_2+0x40>
	{
		EXTI_pvINT1Func();
    122e:	e0 91 9a 02 	lds	r30, 0x029A
    1232:	f0 91 9b 02 	lds	r31, 0x029B
    1236:	09 95       	icall
	}
}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_3>:

void __vector_3(void)__attribute__((signal,used, externally_visible));
void __vector_3(void)
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT2Func != NULL)
    1288:	80 91 9c 02 	lds	r24, 0x029C
    128c:	90 91 9d 02 	lds	r25, 0x029D
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	29 f0       	breq	.+10     	; 0x129e <__vector_3+0x40>
	{
		EXTI_pvINT2Func();
    1294:	e0 91 9c 02 	lds	r30, 0x029C
    1298:	f0 91 9d 02 	lds	r31, 0x029D
    129c:	09 95       	icall
	}
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	ff 91       	pop	r31
    12a4:	ef 91       	pop	r30
    12a6:	bf 91       	pop	r27
    12a8:	af 91       	pop	r26
    12aa:	9f 91       	pop	r25
    12ac:	8f 91       	pop	r24
    12ae:	7f 91       	pop	r23
    12b0:	6f 91       	pop	r22
    12b2:	5f 91       	pop	r21
    12b4:	4f 91       	pop	r20
    12b6:	3f 91       	pop	r19
    12b8:	2f 91       	pop	r18
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	0f 90       	pop	r0
    12c0:	1f 90       	pop	r1
    12c2:	18 95       	reti

000012c4 <DIO_u8SetPinValue>:
}
*/

// Set "Pin" Value
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <DIO_u8SetPinValue+0x6>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <DIO_u8SetPinValue+0x8>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <DIO_u8SetPinValue+0xa>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	8a 83       	std	Y+2, r24	; 0x02
    12d4:	6b 83       	std	Y+3, r22	; 0x03
    12d6:	4c 83       	std	Y+4, r20	; 0x04
    u8 ERROR_FLAG = 0;
    12d8:	19 82       	std	Y+1, r1	; 0x01

    switch (Copy_u8Port)
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	3e 83       	std	Y+6, r19	; 0x06
    12e2:	2d 83       	std	Y+5, r18	; 0x05
    12e4:	8d 81       	ldd	r24, Y+5	; 0x05
    12e6:	9e 81       	ldd	r25, Y+6	; 0x06
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <DIO_u8SetPinValue+0x2c>
    12ee:	49 c0       	rjmp	.+146    	; 0x1382 <DIO_u8SetPinValue+0xbe>
    12f0:	2d 81       	ldd	r18, Y+5	; 0x05
    12f2:	3e 81       	ldd	r19, Y+6	; 0x06
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <DIO_u8SetPinValue+0x40>
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	71 f0       	breq	.+28     	; 0x131e <DIO_u8SetPinValue+0x5a>
    1302:	d4 c0       	rjmp	.+424    	; 0x14ac <DIO_u8SetPinValue+0x1e8>
    1304:	2d 81       	ldd	r18, Y+5	; 0x05
    1306:	3e 81       	ldd	r19, Y+6	; 0x06
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <DIO_u8SetPinValue+0x4c>
    130e:	6b c0       	rjmp	.+214    	; 0x13e6 <DIO_u8SetPinValue+0x122>
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	9e 81       	ldd	r25, Y+6	; 0x06
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	91 05       	cpc	r25, r1
    1318:	09 f4       	brne	.+2      	; 0x131c <DIO_u8SetPinValue+0x58>
    131a:	97 c0       	rjmp	.+302    	; 0x144a <DIO_u8SetPinValue+0x186>
    131c:	c7 c0       	rjmp	.+398    	; 0x14ac <DIO_u8SetPinValue+0x1e8>
    {
    case DIO_u8PORTA:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	a1 f4       	brne	.+40     	; 0x134c <DIO_u8SetPinValue+0x88>
            Set_Bit(PORTA, Copy_u8Pin);
    1324:	ab e3       	ldi	r26, 0x3B	; 59
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	eb e3       	ldi	r30, 0x3B	; 59
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_u8SetPinValue+0x7e>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_u8SetPinValue+0x7a>
    1346:	84 2b       	or	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	b0 c0       	rjmp	.+352    	; 0x14ac <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	88 23       	and	r24, r24
    1350:	a9 f4       	brne	.+42     	; 0x137c <DIO_u8SetPinValue+0xb8>
            Clear_Bit(PORTA, Copy_u8Pin);
    1352:	ab e3       	ldi	r26, 0x3B	; 59
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	eb e3       	ldi	r30, 0x3B	; 59
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_u8SetPinValue+0xac>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_u8SetPinValue+0xa8>
    1374:	80 95       	com	r24
    1376:	84 23       	and	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	98 c0       	rjmp	.+304    	; 0x14ac <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	95 c0       	rjmp	.+298    	; 0x14ac <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTB:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	a1 f4       	brne	.+40     	; 0x13b0 <DIO_u8SetPinValue+0xec>
            Set_Bit(PORTB, Copy_u8Pin);
    1388:	a8 e3       	ldi	r26, 0x38	; 56
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e8 e3       	ldi	r30, 0x38	; 56
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_u8SetPinValue+0xe2>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_u8SetPinValue+0xde>
    13aa:	84 2b       	or	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	7e c0       	rjmp	.+252    	; 0x14ac <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	88 23       	and	r24, r24
    13b4:	a9 f4       	brne	.+42     	; 0x13e0 <DIO_u8SetPinValue+0x11c>
            Clear_Bit(PORTB, Copy_u8Pin);
    13b6:	a8 e3       	ldi	r26, 0x38	; 56
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e8 e3       	ldi	r30, 0x38	; 56
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_u8SetPinValue+0x110>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_u8SetPinValue+0x10c>
    13d8:	80 95       	com	r24
    13da:	84 23       	and	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	66 c0       	rjmp	.+204    	; 0x14ac <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	63 c0       	rjmp	.+198    	; 0x14ac <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTC:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	a1 f4       	brne	.+40     	; 0x1414 <DIO_u8SetPinValue+0x150>
            Set_Bit(PORTC, Copy_u8Pin);
    13ec:	a5 e3       	ldi	r26, 0x35	; 53
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e3       	ldi	r30, 0x35	; 53
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_u8SetPinValue+0x146>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_u8SetPinValue+0x142>
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	4c c0       	rjmp	.+152    	; 0x14ac <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	88 23       	and	r24, r24
    1418:	a9 f4       	brne	.+42     	; 0x1444 <DIO_u8SetPinValue+0x180>
            Clear_Bit(PORTC, Copy_u8Pin);
    141a:	a5 e3       	ldi	r26, 0x35	; 53
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e5 e3       	ldi	r30, 0x35	; 53
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_u8SetPinValue+0x174>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_u8SetPinValue+0x170>
    143c:	80 95       	com	r24
    143e:	84 23       	and	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	34 c0       	rjmp	.+104    	; 0x14ac <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	31 c0       	rjmp	.+98     	; 0x14ac <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTD:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	a1 f4       	brne	.+40     	; 0x1478 <DIO_u8SetPinValue+0x1b4>
            Set_Bit(PORTD, Copy_u8Pin);
    1450:	a2 e3       	ldi	r26, 0x32	; 50
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e2 e3       	ldi	r30, 0x32	; 50
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_u8SetPinValue+0x1aa>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_u8SetPinValue+0x1a6>
    1472:	84 2b       	or	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	1a c0       	rjmp	.+52     	; 0x14ac <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	88 23       	and	r24, r24
    147c:	a9 f4       	brne	.+42     	; 0x14a8 <DIO_u8SetPinValue+0x1e4>
            Clear_Bit(PORTD, Copy_u8Pin);
    147e:	a2 e3       	ldi	r26, 0x32	; 50
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e2 e3       	ldi	r30, 0x32	; 50
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_u8SetPinValue+0x1d8>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_u8SetPinValue+0x1d4>
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	89 83       	std	Y+1, r24	; 0x01

    default:
        break;
    }

    return ERROR_FLAG;
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ae:	26 96       	adiw	r28, 0x06	; 6
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <DIO_u8SetPortValue>:
    return Local_u8Error;
}*/

// Set "Port" Value
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <DIO_u8SetPortValue+0x6>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <DIO_u8SetPortValue+0x8>
    14c8:	0f 92       	push	r0
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	8a 83       	std	Y+2, r24	; 0x02
    14d0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Error = 0;
    14d2:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8Port < 4)
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	84 30       	cpi	r24, 0x04	; 4
    14d8:	98 f5       	brcc	.+102    	; 0x1540 <DIO_u8SetPortValue+0x80>
    {
        switch (Copy_u8Port)
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	3d 83       	std	Y+5, r19	; 0x05
    14e2:	2c 83       	std	Y+4, r18	; 0x04
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	91 05       	cpc	r25, r1
    14ec:	d1 f0       	breq	.+52     	; 0x1522 <DIO_u8SetPortValue+0x62>
    14ee:	2c 81       	ldd	r18, Y+4	; 0x04
    14f0:	3d 81       	ldd	r19, Y+5	; 0x05
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	2c f4       	brge	.+10     	; 0x1502 <DIO_u8SetPortValue+0x42>
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	9d 81       	ldd	r25, Y+5	; 0x05
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	61 f0       	breq	.+24     	; 0x1518 <DIO_u8SetPortValue+0x58>
    1500:	21 c0       	rjmp	.+66     	; 0x1544 <DIO_u8SetPortValue+0x84>
    1502:	2c 81       	ldd	r18, Y+4	; 0x04
    1504:	3d 81       	ldd	r19, Y+5	; 0x05
    1506:	22 30       	cpi	r18, 0x02	; 2
    1508:	31 05       	cpc	r19, r1
    150a:	81 f0       	breq	.+32     	; 0x152c <DIO_u8SetPortValue+0x6c>
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	9d 81       	ldd	r25, Y+5	; 0x05
    1510:	83 30       	cpi	r24, 0x03	; 3
    1512:	91 05       	cpc	r25, r1
    1514:	81 f0       	breq	.+32     	; 0x1536 <DIO_u8SetPortValue+0x76>
    1516:	16 c0       	rjmp	.+44     	; 0x1544 <DIO_u8SetPortValue+0x84>
        {
        case DIO_u8PORTA:
            PORTA = Copy_u8Value;
    1518:	eb e3       	ldi	r30, 0x3B	; 59
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	80 83       	st	Z, r24
    1520:	11 c0       	rjmp	.+34     	; 0x1544 <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTB:
            PORTB = Copy_u8Value;
    1522:	e8 e3       	ldi	r30, 0x38	; 56
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	80 83       	st	Z, r24
    152a:	0c c0       	rjmp	.+24     	; 0x1544 <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTC:
            PORTC = Copy_u8Value;
    152c:	e5 e3       	ldi	r30, 0x35	; 53
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	80 83       	st	Z, r24
    1534:	07 c0       	rjmp	.+14     	; 0x1544 <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTD:
            PORTD = Copy_u8Value;
    1536:	e2 e3       	ldi	r30, 0x32	; 50
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	80 83       	st	Z, r24
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_u8SetPortValue+0x84>
            break;
        }
    }
    else
    {
        Local_u8Error = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8Error;
    1544:	89 81       	ldd	r24, Y+1	; 0x01
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <DIO_GetPinValue>:

// Get/Read "Pin" value
u8 DIO_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8Value)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	27 97       	sbiw	r28, 0x07	; 7
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	6a 83       	std	Y+2, r22	; 0x02
    156e:	5c 83       	std	Y+4, r21	; 0x04
    1570:	4b 83       	std	Y+3, r20	; 0x03

    switch (Copy_u8Port)
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	3f 83       	std	Y+7, r19	; 0x07
    157a:	2e 83       	std	Y+6, r18	; 0x06
    157c:	4e 81       	ldd	r20, Y+6	; 0x06
    157e:	5f 81       	ldd	r21, Y+7	; 0x07
    1580:	41 30       	cpi	r20, 0x01	; 1
    1582:	51 05       	cpc	r21, r1
    1584:	59 f1       	breq	.+86     	; 0x15dc <DIO_GetPinValue+0x86>
    1586:	8e 81       	ldd	r24, Y+6	; 0x06
    1588:	9f 81       	ldd	r25, Y+7	; 0x07
    158a:	82 30       	cpi	r24, 0x02	; 2
    158c:	91 05       	cpc	r25, r1
    158e:	34 f4       	brge	.+12     	; 0x159c <DIO_GetPinValue+0x46>
    1590:	2e 81       	ldd	r18, Y+6	; 0x06
    1592:	3f 81       	ldd	r19, Y+7	; 0x07
    1594:	21 15       	cp	r18, r1
    1596:	31 05       	cpc	r19, r1
    1598:	69 f0       	breq	.+26     	; 0x15b4 <DIO_GetPinValue+0x5e>
    159a:	5c c0       	rjmp	.+184    	; 0x1654 <DIO_GetPinValue+0xfe>
    159c:	4e 81       	ldd	r20, Y+6	; 0x06
    159e:	5f 81       	ldd	r21, Y+7	; 0x07
    15a0:	42 30       	cpi	r20, 0x02	; 2
    15a2:	51 05       	cpc	r21, r1
    15a4:	79 f1       	breq	.+94     	; 0x1604 <DIO_GetPinValue+0xae>
    15a6:	8e 81       	ldd	r24, Y+6	; 0x06
    15a8:	9f 81       	ldd	r25, Y+7	; 0x07
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	91 05       	cpc	r25, r1
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <DIO_GetPinValue+0x5c>
    15b0:	3d c0       	rjmp	.+122    	; 0x162c <DIO_GetPinValue+0xd6>
    15b2:	50 c0       	rjmp	.+160    	; 0x1654 <DIO_GetPinValue+0xfe>
    {
    case DIO_u8PORTA:
        *Copy_u8Value = Get_Bit(PINA, Copy_u8Pin);
    15b4:	e9 e3       	ldi	r30, 0x39	; 57
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a9 01       	movw	r20, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_GetPinValue+0x76>
    15c8:	55 95       	asr	r21
    15ca:	47 95       	ror	r20
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_GetPinValue+0x72>
    15d0:	ca 01       	movw	r24, r20
    15d2:	81 70       	andi	r24, 0x01	; 1
    15d4:	eb 81       	ldd	r30, Y+3	; 0x03
    15d6:	fc 81       	ldd	r31, Y+4	; 0x04
    15d8:	80 83       	st	Z, r24
    15da:	3f c0       	rjmp	.+126    	; 0x165a <DIO_GetPinValue+0x104>
        break;
    case DIO_u8PORTB:
        *Copy_u8Value = Get_Bit(PINB, Copy_u8Pin);
    15dc:	e6 e3       	ldi	r30, 0x36	; 54
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	88 2f       	mov	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	a9 01       	movw	r20, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_GetPinValue+0x9e>
    15f0:	55 95       	asr	r21
    15f2:	47 95       	ror	r20
    15f4:	8a 95       	dec	r24
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_GetPinValue+0x9a>
    15f8:	ca 01       	movw	r24, r20
    15fa:	81 70       	andi	r24, 0x01	; 1
    15fc:	eb 81       	ldd	r30, Y+3	; 0x03
    15fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1600:	80 83       	st	Z, r24
    1602:	2b c0       	rjmp	.+86     	; 0x165a <DIO_GetPinValue+0x104>
        break;
    case DIO_u8PORTC:
        *Copy_u8Value = Get_Bit(PINC, Copy_u8Pin);
    1604:	e3 e3       	ldi	r30, 0x33	; 51
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a9 01       	movw	r20, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_GetPinValue+0xc6>
    1618:	55 95       	asr	r21
    161a:	47 95       	ror	r20
    161c:	8a 95       	dec	r24
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_GetPinValue+0xc2>
    1620:	ca 01       	movw	r24, r20
    1622:	81 70       	andi	r24, 0x01	; 1
    1624:	eb 81       	ldd	r30, Y+3	; 0x03
    1626:	fc 81       	ldd	r31, Y+4	; 0x04
    1628:	80 83       	st	Z, r24
    162a:	17 c0       	rjmp	.+46     	; 0x165a <DIO_GetPinValue+0x104>
        break;
    case DIO_u8PORTD:
        *Copy_u8Value = Get_Bit(PIND, Copy_u8Pin);
    162c:	e0 e3       	ldi	r30, 0x30	; 48
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a9 01       	movw	r20, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_GetPinValue+0xee>
    1640:	55 95       	asr	r21
    1642:	47 95       	ror	r20
    1644:	8a 95       	dec	r24
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_GetPinValue+0xea>
    1648:	ca 01       	movw	r24, r20
    164a:	81 70       	andi	r24, 0x01	; 1
    164c:	eb 81       	ldd	r30, Y+3	; 0x03
    164e:	fc 81       	ldd	r31, Y+4	; 0x04
    1650:	80 83       	st	Z, r24
    1652:	03 c0       	rjmp	.+6      	; 0x165a <DIO_GetPinValue+0x104>
        break;

    default:
    	return NOK;
    1654:	52 e0       	ldi	r21, 0x02	; 2
    1656:	5d 83       	std	Y+5, r21	; 0x05
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_GetPinValue+0x108>
        break;
    }

    return OK;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1660:	27 96       	adiw	r28, 0x07	; 7
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue( u8 PORT_OUTPUT_VAL )
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	89 83       	std	Y+1, r24	; 0x01

#if SELECTED_PORT == PORT_u8_A
    PORTA = PORT_OUTPUT_VAL;
    167e:	eb e3       	ldi	r30, 0x3B	; 59
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	80 83       	st	Z, r24
    PORTD = PORT_OUTPUT_VAL;
#else

#endif

}
    1686:	0f 90       	pop	r0
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <ADC_voidInit>:

void (*ADC_pvFunc)(void);


void ADC_voidInit()
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62

#if 	VOLTAGE_REFERENCE == AVCC
	/* REFS1 -> 0, REFS0 -> 1 */
	Set_Bit(ADMUX, ADMUX_REFS0);
    1696:	a7 e2       	ldi	r26, 0x27	; 39
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e7 e2       	ldi	r30, 0x27	; 39
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	80 64       	ori	r24, 0x40	; 64
    16a2:	8c 93       	st	X, r24
	Clear_Bit(ADMUX, ADMUX_REFS1);
    16a4:	a7 e2       	ldi	r26, 0x27	; 39
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e7 e2       	ldi	r30, 0x27	; 39
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	8f 77       	andi	r24, 0x7F	; 127
    16b0:	8c 93       	st	X, r24
	Vref = 5;
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a0 ea       	ldi	r26, 0xA0	; 160
    16b8:	b0 e4       	ldi	r27, 0x40	; 64
    16ba:	80 93 74 02 	sts	0x0274, r24
    16be:	90 93 75 02 	sts	0x0275, r25
    16c2:	a0 93 76 02 	sts	0x0276, r26
    16c6:	b0 93 77 02 	sts	0x0277, r27
	Clear_Bit(ADCSRA, ADCSRA_ADPS0);
	Set_Bit(ADCSRA, ADCSRA_ADPS1);
	Set_Bit(ADCSRA, ADCSRA_ADPS2);
#elif ADC_PRESCALER_SELECTION == DIVIDE_BY_128
	/* ADPS2 -> 1,  ADPS1 -> 1, ADPS0 -> 1 */
	Set_Bit(ADCSRA, ADCSRA_ADPS0);
    16ca:	a6 e2       	ldi	r26, 0x26	; 38
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e6 e2       	ldi	r30, 0x26	; 38
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	81 60       	ori	r24, 0x01	; 1
    16d6:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, ADCSRA_ADPS1);
    16d8:	a6 e2       	ldi	r26, 0x26	; 38
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e6 e2       	ldi	r30, 0x26	; 38
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	82 60       	ori	r24, 0x02	; 2
    16e4:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, ADCSRA_ADPS2);
    16e6:	a6 e2       	ldi	r26, 0x26	; 38
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e6 e2       	ldi	r30, 0x26	; 38
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	84 60       	ori	r24, 0x04	; 4
    16f2:	8c 93       	st	X, r24
#endif

#if		ADJUSTMENT == LEFT_ADJUSTMENT
	Set_Bit(ADMUX, ADMUX_ADLAR);
#elif   ADJUSTMENT == RIGHT_ADJUSTMENT
	Clear_Bit(ADMUX, ADMUX_ADLAR);
    16f4:	a7 e2       	ldi	r26, 0x27	; 39
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e7 e2       	ldi	r30, 0x27	; 39
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	8f 7d       	andi	r24, 0xDF	; 223
    1700:	8c 93       	st	X, r24
#endif


#if		ADC_AUTO_TRIGGER_MODE == FREE_RUNNING_MODE
	// ADC Control Status Register
	Set_Bit(ADCSRA ,ADCSRA_ADATE);
    1702:	a6 e2       	ldi	r26, 0x26	; 38
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e6 e2       	ldi	r30, 0x26	; 38
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	80 62       	ori	r24, 0x20	; 32
    170e:	8c 93       	st	X, r24
	// Selecting free frunning mode
	Clear_Bit(SFIOR, SFIOR_ADTS0);
    1710:	a0 e5       	ldi	r26, 0x50	; 80
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e0 e5       	ldi	r30, 0x50	; 80
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	8f 7d       	andi	r24, 0xDF	; 223
    171c:	8c 93       	st	X, r24
	Clear_Bit(SFIOR, SFIOR_ADTS1);
    171e:	a0 e5       	ldi	r26, 0x50	; 80
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e0 e5       	ldi	r30, 0x50	; 80
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8f 7b       	andi	r24, 0xBF	; 191
    172a:	8c 93       	st	X, r24
	Clear_Bit(SFIOR, SFIOR_ADTS2);
    172c:	a0 e5       	ldi	r26, 0x50	; 80
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e0 e5       	ldi	r30, 0x50	; 80
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8f 77       	andi	r24, 0x7F	; 127
    1738:	8c 93       	st	X, r24
#else
#error
#endif

}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <ADC_voidEnable>:


void ADC_voidEnable()
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA, ADCSRA_ADEN);
    1748:	a6 e2       	ldi	r26, 0x26	; 38
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e6 e2       	ldi	r30, 0x26	; 38
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	80 68       	ori	r24, 0x80	; 128
    1754:	8c 93       	st	X, r24
}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable()
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA, ADCSRA_ADIE);
    1764:	a6 e2       	ldi	r26, 0x26	; 38
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e6 e2       	ldi	r30, 0x26	; 38
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	88 60       	ori	r24, 0x08	; 8
    1770:	8c 93       	st	X, r24
}
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <ADC_voidDisable>:

void ADC_voidDisable()
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA, ADCSRA_ADEN);
    1780:	a6 e2       	ldi	r26, 0x26	; 38
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e6 e2       	ldi	r30, 0x26	; 38
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8f 77       	andi	r24, 0x7F	; 127
    178c:	8c 93       	st	X, r24
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <ADC_u16ReadADC>:

u16 ADC_u16ReadADC()
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <ADC_u16ReadADC+0x6>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_Result=0;
    179e:	1a 82       	std	Y+2, r1	; 0x02
    17a0:	19 82       	std	Y+1, r1	; 0x01

	ADC_Result = ( ADC_10Bit * Vref) / 1024;
    17a2:	e4 e2       	ldi	r30, 0x24	; 36
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
    17aa:	cc 01       	movw	r24, r24
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	20 91 74 02 	lds	r18, 0x0274
    17c0:	30 91 75 02 	lds	r19, 0x0275
    17c4:	40 91 76 02 	lds	r20, 0x0276
    17c8:	50 91 77 02 	lds	r21, 0x0277
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	54 e4       	ldi	r21, 0x44	; 68
    17e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	bc 01       	movw	r22, r24
    17ee:	cd 01       	movw	r24, r26
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01

	return ADC_Result;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 Copy_u8Channel)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
    1816:	a7 e2       	ldi	r26, 0x27	; 39
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e7 e2       	ldi	r30, 0x27	; 39
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 7e       	andi	r24, 0xE0	; 224
    1822:	8c 93       	st	X, r24

	ADMUX |= Copy_u8Channel;
    1824:	a7 e2       	ldi	r26, 0x27	; 39
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e7 e2       	ldi	r30, 0x27	; 39
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	90 81       	ld	r25, Z
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	89 2b       	or	r24, r25
    1832:	8c 93       	st	X, r24

	// Start Conversion
	Set_Bit(ADCSRA, ADCSRA_ADSC);
    1834:	a6 e2       	ldi	r26, 0x26	; 38
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e6 e2       	ldi	r30, 0x26	; 38
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	80 64       	ori	r24, 0x40	; 64
    1840:	8c 93       	st	X, r24

	// Polling { Busy Waiting } until conversion complete
	while( Get_Bit(ADCSRA, ADCSRA_ADIF) == 0 );
    1842:	e6 e2       	ldi	r30, 0x26	; 38
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	82 95       	swap	r24
    184a:	8f 70       	andi	r24, 0x0F	; 15
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	81 70       	andi	r24, 0x01	; 1
    1852:	90 70       	andi	r25, 0x00	; 0
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	a9 f3       	breq	.-22     	; 0x1842 <ADC_voidStartConversion+0x38>

	// Clear Conversion Flag
	Set_Bit(ADCSRA, ADCSRA_ADIF);
    1858:	a6 e2       	ldi	r26, 0x26	; 38
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e6 e2       	ldi	r30, 0x26	; 38
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 61       	ori	r24, 0x10	; 16
    1864:	8c 93       	st	X, r24

}
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 Copy_u8Channel)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
    187a:	a7 e2       	ldi	r26, 0x27	; 39
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e7 e2       	ldi	r30, 0x27	; 39
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	80 7e       	andi	r24, 0xE0	; 224
    1886:	8c 93       	st	X, r24

	ADMUX |= Copy_u8Channel;
    1888:	a7 e2       	ldi	r26, 0x27	; 39
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e7 e2       	ldi	r30, 0x27	; 39
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	90 81       	ld	r25, Z
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	89 2b       	or	r24, r25
    1896:	8c 93       	st	X, r24

	// Start Conversion
	Set_Bit(ADCSRA, ADCSRA_ADSC);
    1898:	a6 e2       	ldi	r26, 0x26	; 38
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e6 e2       	ldi	r30, 0x26	; 38
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	80 64       	ori	r24, 0x40	; 64
    18a4:	8c 93       	st	X, r24

}
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <ADC_u16ReadADCInMV>:


u16 ADC_u16ReadADCInMV()
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <ADC_u16ReadADCInMV+0x6>
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_Result= 0;
    18b8:	1a 82       	std	Y+2, r1	; 0x02
    18ba:	19 82       	std	Y+1, r1	; 0x01

	ADC_Result = (ADC_10Bit * 1000UL *Vref) / 1024;
    18bc:	e4 e2       	ldi	r30, 0x24	; 36
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	cc 01       	movw	r24, r24
    18c6:	a0 e0       	ldi	r26, 0x00	; 0
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	28 ee       	ldi	r18, 0xE8	; 232
    18cc:	33 e0       	ldi	r19, 0x03	; 3
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <__mulsi3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	20 91 74 02 	lds	r18, 0x0274
    18ee:	30 91 75 02 	lds	r19, 0x0275
    18f2:	40 91 76 02 	lds	r20, 0x0276
    18f6:	50 91 77 02 	lds	r21, 0x0277
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e8       	ldi	r20, 0x80	; 128
    1910:	54 e4       	ldi	r21, 0x44	; 68
    1912:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9a 83       	std	Y+2, r25	; 0x02
    1928:	89 83       	std	Y+1, r24	; 0x01

	return ADC_Result;
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02

}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <ADC_voidDisableInt>:

void ADC_voidDisableInt()
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA, ADCSRA_ADIE);
    1940:	a6 e2       	ldi	r26, 0x26	; 38
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e6 e2       	ldi	r30, 0x26	; 38
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	87 7f       	andi	r24, 0xF7	; 247
    194c:	8c 93       	st	X, r24
}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <ADC_SetCallback>:

void ADC_SetCallback( void (*ptr) (void) )
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <ADC_SetCallback+0x6>
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	89 83       	std	Y+1, r24	; 0x01
	if( ptr != NULL )
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	31 f0       	breq	.+12     	; 0x1976 <ADC_SetCallback+0x22>
	{
		ADC_pvFunc = ptr;
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	90 93 a3 02 	sts	0x02A3, r25
    1972:	80 93 a2 02 	sts	0x02A2, r24
	}
}
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <__vector_16>:


void __vector_16(void)__attribute__((signal,used, externally_visible));
void __vector_16(void)
{
    1980:	1f 92       	push	r1
    1982:	0f 92       	push	r0
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	0f 92       	push	r0
    1988:	11 24       	eor	r1, r1
    198a:	2f 93       	push	r18
    198c:	3f 93       	push	r19
    198e:	4f 93       	push	r20
    1990:	5f 93       	push	r21
    1992:	6f 93       	push	r22
    1994:	7f 93       	push	r23
    1996:	8f 93       	push	r24
    1998:	9f 93       	push	r25
    199a:	af 93       	push	r26
    199c:	bf 93       	push	r27
    199e:	ef 93       	push	r30
    19a0:	ff 93       	push	r31
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
	if( ADC_pvFunc != NULL )
    19aa:	80 91 a2 02 	lds	r24, 0x02A2
    19ae:	90 91 a3 02 	lds	r25, 0x02A3
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	29 f0       	breq	.+10     	; 0x19c0 <__vector_16+0x40>
	{
		ADC_pvFunc();
    19b6:	e0 91 a2 02 	lds	r30, 0x02A2
    19ba:	f0 91 a3 02 	lds	r31, 0x02A3
    19be:	09 95       	icall
	}
}
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	ff 91       	pop	r31
    19c6:	ef 91       	pop	r30
    19c8:	bf 91       	pop	r27
    19ca:	af 91       	pop	r26
    19cc:	9f 91       	pop	r25
    19ce:	8f 91       	pop	r24
    19d0:	7f 91       	pop	r23
    19d2:	6f 91       	pop	r22
    19d4:	5f 91       	pop	r21
    19d6:	4f 91       	pop	r20
    19d8:	3f 91       	pop	r19
    19da:	2f 91       	pop	r18
    19dc:	0f 90       	pop	r0
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	0f 90       	pop	r0
    19e2:	1f 90       	pop	r1
    19e4:	18 95       	reti

000019e6 <LCD_voidInit>:
#include "LCD_Private.h"

#include "avr/delay.h"


void LCD_voidInit(){
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	cc 58       	subi	r28, 0x8C	; 140
    19f4:	d0 40       	sbci	r29, 0x00	; 0
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	fe 01       	movw	r30, r28
    1a02:	e7 57       	subi	r30, 0x77	; 119
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	ac e0       	ldi	r26, 0x0C	; 12
    1a0c:	b2 e4       	ldi	r27, 0x42	; 66
    1a0e:	80 83       	st	Z, r24
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	a2 83       	std	Z+2, r26	; 0x02
    1a14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a16:	8e 01       	movw	r16, r28
    1a18:	0b 57       	subi	r16, 0x7B	; 123
    1a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e7 57       	subi	r30, 0x77	; 119
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	4a e7       	ldi	r20, 0x7A	; 122
    1a30:	55 e4       	ldi	r21, 0x45	; 69
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	80 83       	st	Z, r24
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	a2 83       	std	Z+2, r26	; 0x02
    1a42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a44:	fe 01       	movw	r30, r28
    1a46:	eb 57       	subi	r30, 0x7B	; 123
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	44 f4       	brge	.+16     	; 0x1a72 <LCD_voidInit+0x8c>
		__ticks = 1;
    1a62:	fe 01       	movw	r30, r28
    1a64:	ed 57       	subi	r30, 0x7D	; 125
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	80 83       	st	Z, r24
    1a70:	64 c0       	rjmp	.+200    	; 0x1b3a <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1a72:	fe 01       	movw	r30, r28
    1a74:	eb 57       	subi	r30, 0x7B	; 123
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	3f ef       	ldi	r19, 0xFF	; 255
    1a84:	4f e7       	ldi	r20, 0x7F	; 127
    1a86:	57 e4       	ldi	r21, 0x47	; 71
    1a88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a8c:	18 16       	cp	r1, r24
    1a8e:	0c f0       	brlt	.+2      	; 0x1a92 <LCD_voidInit+0xac>
    1a90:	43 c0       	rjmp	.+134    	; 0x1b18 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	fe 01       	movw	r30, r28
    1a94:	e7 57       	subi	r30, 0x77	; 119
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	60 81       	ld	r22, Z
    1a9a:	71 81       	ldd	r23, Z+1	; 0x01
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	93 81       	ldd	r25, Z+3	; 0x03
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	8e 01       	movw	r16, r28
    1ab2:	0d 57       	subi	r16, 0x7D	; 125
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	80 83       	st	Z, r24
    1ac8:	1f c0       	rjmp	.+62     	; 0x1b08 <LCD_voidInit+0x122>
    1aca:	fe 01       	movw	r30, r28
    1acc:	ef 57       	subi	r30, 0x7F	; 127
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	80 e9       	ldi	r24, 0x90	; 144
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ad8:	fe 01       	movw	r30, r28
    1ada:	ef 57       	subi	r30, 0x7F	; 127
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <LCD_voidInit+0xfc>
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	ef 57       	subi	r30, 0x7F	; 127
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	de 01       	movw	r26, r28
    1af2:	ad 57       	subi	r26, 0x7D	; 125
    1af4:	bf 4f       	sbci	r27, 0xFF	; 255
    1af6:	fe 01       	movw	r30, r28
    1af8:	ed 57       	subi	r30, 0x7D	; 125
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	80 81       	ld	r24, Z
    1afe:	91 81       	ldd	r25, Z+1	; 0x01
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	11 96       	adiw	r26, 0x01	; 1
    1b04:	9c 93       	st	X, r25
    1b06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ed 57       	subi	r30, 0x7D	; 125
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	d1 f6       	brne	.-76     	; 0x1aca <LCD_voidInit+0xe4>
    1b16:	27 c0       	rjmp	.+78     	; 0x1b66 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b18:	8e 01       	movw	r16, r28
    1b1a:	0d 57       	subi	r16, 0x7D	; 125
    1b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1e:	fe 01       	movw	r30, r28
    1b20:	eb 57       	subi	r30, 0x7B	; 123
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	f8 01       	movw	r30, r16
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	80 83       	st	Z, r24
    1b3a:	de 01       	movw	r26, r28
    1b3c:	a1 58       	subi	r26, 0x81	; 129
    1b3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b40:	fe 01       	movw	r30, r28
    1b42:	ed 57       	subi	r30, 0x7D	; 125
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	8d 93       	st	X+, r24
    1b4c:	9c 93       	st	X, r25
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e1 58       	subi	r30, 0x81	; 129
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 81       	ld	r24, Z
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <LCD_voidInit+0x172>
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e1 58       	subi	r30, 0x81	; 129
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    1b66:	80 e3       	ldi	r24, 0x30	; 48
    1b68:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_voidSendInitCommand>
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e5 58       	subi	r30, 0x85	; 133
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	a0 ea       	ldi	r26, 0xA0	; 160
    1b78:	b0 e4       	ldi	r27, 0x40	; 64
    1b7a:	80 83       	st	Z, r24
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	a2 83       	std	Z+2, r26	; 0x02
    1b80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b82:	8e 01       	movw	r16, r28
    1b84:	09 58       	subi	r16, 0x89	; 137
    1b86:	1f 4f       	sbci	r17, 0xFF	; 255
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e5 58       	subi	r30, 0x85	; 133
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	60 81       	ld	r22, Z
    1b90:	71 81       	ldd	r23, Z+1	; 0x01
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a e7       	ldi	r20, 0x7A	; 122
    1b9c:	55 e4       	ldi	r21, 0x45	; 69
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	80 83       	st	Z, r24
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	a2 83       	std	Z+2, r26	; 0x02
    1bae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e9 58       	subi	r30, 0x89	; 137
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	60 81       	ld	r22, Z
    1bb8:	71 81       	ldd	r23, Z+1	; 0x01
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	44 f4       	brge	.+16     	; 0x1bde <LCD_voidInit+0x1f8>
		__ticks = 1;
    1bce:	fe 01       	movw	r30, r28
    1bd0:	eb 58       	subi	r30, 0x8B	; 139
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
    1bdc:	64 c0       	rjmp	.+200    	; 0x1ca6 <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    1bde:	fe 01       	movw	r30, r28
    1be0:	e9 58       	subi	r30, 0x89	; 137
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	3f ef       	ldi	r19, 0xFF	; 255
    1bf0:	4f e7       	ldi	r20, 0x7F	; 127
    1bf2:	57 e4       	ldi	r21, 0x47	; 71
    1bf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf8:	18 16       	cp	r1, r24
    1bfa:	0c f0       	brlt	.+2      	; 0x1bfe <LCD_voidInit+0x218>
    1bfc:	43 c0       	rjmp	.+134    	; 0x1c84 <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e5 58       	subi	r30, 0x85	; 133
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e2       	ldi	r20, 0x20	; 32
    1c12:	51 e4       	ldi	r21, 0x41	; 65
    1c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	8e 01       	movw	r16, r28
    1c1e:	0b 58       	subi	r16, 0x8B	; 139
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	f8 01       	movw	r30, r16
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    1c34:	1f c0       	rjmp	.+62     	; 0x1c74 <LCD_voidInit+0x28e>
    1c36:	fe 01       	movw	r30, r28
    1c38:	ed 58       	subi	r30, 0x8D	; 141
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 e9       	ldi	r24, 0x90	; 144
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	80 83       	st	Z, r24
    1c44:	fe 01       	movw	r30, r28
    1c46:	ed 58       	subi	r30, 0x8D	; 141
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <LCD_voidInit+0x268>
    1c52:	fe 01       	movw	r30, r28
    1c54:	ed 58       	subi	r30, 0x8D	; 141
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	de 01       	movw	r26, r28
    1c5e:	ab 58       	subi	r26, 0x8B	; 139
    1c60:	bf 4f       	sbci	r27, 0xFF	; 255
    1c62:	fe 01       	movw	r30, r28
    1c64:	eb 58       	subi	r30, 0x8B	; 139
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	80 81       	ld	r24, Z
    1c6a:	91 81       	ldd	r25, Z+1	; 0x01
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	11 96       	adiw	r26, 0x01	; 1
    1c70:	9c 93       	st	X, r25
    1c72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c74:	fe 01       	movw	r30, r28
    1c76:	eb 58       	subi	r30, 0x8B	; 139
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	d1 f6       	brne	.-76     	; 0x1c36 <LCD_voidInit+0x250>
    1c82:	27 c0       	rjmp	.+78     	; 0x1cd2 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c84:	8e 01       	movw	r16, r28
    1c86:	0b 58       	subi	r16, 0x8B	; 139
    1c88:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e9 58       	subi	r30, 0x89	; 137
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	60 81       	ld	r22, Z
    1c92:	71 81       	ldd	r23, Z+1	; 0x01
    1c94:	82 81       	ldd	r24, Z+2	; 0x02
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	f8 01       	movw	r30, r16
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	80 83       	st	Z, r24
    1ca6:	de 01       	movw	r26, r28
    1ca8:	af 58       	subi	r26, 0x8F	; 143
    1caa:	bf 4f       	sbci	r27, 0xFF	; 255
    1cac:	fe 01       	movw	r30, r28
    1cae:	eb 58       	subi	r30, 0x8B	; 139
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 81       	ld	r24, Z
    1cb4:	91 81       	ldd	r25, Z+1	; 0x01
    1cb6:	8d 93       	st	X+, r24
    1cb8:	9c 93       	st	X, r25
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ef 58       	subi	r30, 0x8F	; 143
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	91 81       	ldd	r25, Z+1	; 0x01
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <LCD_voidInit+0x2de>
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ef 58       	subi	r30, 0x8F	; 143
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	91 83       	std	Z+1, r25	; 0x01
    1cd0:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    1cd2:	80 e3       	ldi	r24, 0x30	; 48
    1cd4:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_voidSendInitCommand>
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e3 59       	subi	r30, 0x93	; 147
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 e8       	ldi	r26, 0x80	; 128
    1ce4:	bf e3       	ldi	r27, 0x3F	; 63
    1ce6:	80 83       	st	Z, r24
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	a2 83       	std	Z+2, r26	; 0x02
    1cec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	8e 01       	movw	r16, r28
    1cf0:	07 59       	subi	r16, 0x97	; 151
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e3 59       	subi	r30, 0x93	; 147
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	4a e7       	ldi	r20, 0x7A	; 122
    1d08:	55 e4       	ldi	r21, 0x45	; 69
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	f8 01       	movw	r30, r16
    1d14:	80 83       	st	Z, r24
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	a2 83       	std	Z+2, r26	; 0x02
    1d1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e7 59       	subi	r30, 0x97	; 151
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	60 81       	ld	r22, Z
    1d24:	71 81       	ldd	r23, Z+1	; 0x01
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	93 81       	ldd	r25, Z+3	; 0x03
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	44 f4       	brge	.+16     	; 0x1d4a <LCD_voidInit+0x364>
		__ticks = 1;
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e9 59       	subi	r30, 0x99	; 153
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	80 83       	st	Z, r24
    1d48:	64 c0       	rjmp	.+200    	; 0x1e12 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e7 59       	subi	r30, 0x97	; 151
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	0c f0       	brlt	.+2      	; 0x1d6a <LCD_voidInit+0x384>
    1d68:	43 c0       	rjmp	.+134    	; 0x1df0 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	e3 59       	subi	r30, 0x93	; 147
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	51 e4       	ldi	r21, 0x41	; 65
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	8e 01       	movw	r16, r28
    1d8a:	09 59       	subi	r16, 0x99	; 153
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    1da0:	1f c0       	rjmp	.+62     	; 0x1de0 <LCD_voidInit+0x3fa>
    1da2:	fe 01       	movw	r30, r28
    1da4:	eb 59       	subi	r30, 0x9B	; 155
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 e9       	ldi	r24, 0x90	; 144
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	fe 01       	movw	r30, r28
    1db2:	eb 59       	subi	r30, 0x9B	; 155
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	80 81       	ld	r24, Z
    1db8:	91 81       	ldd	r25, Z+1	; 0x01
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <LCD_voidInit+0x3d4>
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	eb 59       	subi	r30, 0x9B	; 155
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	de 01       	movw	r26, r28
    1dca:	a9 59       	subi	r26, 0x99	; 153
    1dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e9 59       	subi	r30, 0x99	; 153
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	11 96       	adiw	r26, 0x01	; 1
    1ddc:	9c 93       	st	X, r25
    1dde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	fe 01       	movw	r30, r28
    1de2:	e9 59       	subi	r30, 0x99	; 153
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	91 81       	ldd	r25, Z+1	; 0x01
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	d1 f6       	brne	.-76     	; 0x1da2 <LCD_voidInit+0x3bc>
    1dee:	27 c0       	rjmp	.+78     	; 0x1e3e <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	8e 01       	movw	r16, r28
    1df2:	09 59       	subi	r16, 0x99	; 153
    1df4:	1f 4f       	sbci	r17, 0xFF	; 255
    1df6:	fe 01       	movw	r30, r28
    1df8:	e7 59       	subi	r30, 0x97	; 151
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
    1e12:	de 01       	movw	r26, r28
    1e14:	ad 59       	subi	r26, 0x9D	; 157
    1e16:	bf 4f       	sbci	r27, 0xFF	; 255
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e9 59       	subi	r30, 0x99	; 153
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	8d 93       	st	X+, r24
    1e24:	9c 93       	st	X, r25
    1e26:	fe 01       	movw	r30, r28
    1e28:	ed 59       	subi	r30, 0x9D	; 157
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_voidInit+0x44a>
    1e34:	fe 01       	movw	r30, r28
    1e36:	ed 59       	subi	r30, 0x9D	; 157
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    1e3e:	80 e3       	ldi	r24, 0x30	; 48
    1e40:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_voidSendInitCommand>
    1e44:	fe 01       	movw	r30, r28
    1e46:	e1 5a       	subi	r30, 0xA1	; 161
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 e8       	ldi	r26, 0x80	; 128
    1e50:	bf e3       	ldi	r27, 0x3F	; 63
    1e52:	80 83       	st	Z, r24
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	a2 83       	std	Z+2, r26	; 0x02
    1e58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5a:	8e 01       	movw	r16, r28
    1e5c:	05 5a       	subi	r16, 0xA5	; 165
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	e1 5a       	subi	r30, 0xA1	; 161
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a e7       	ldi	r20, 0x7A	; 122
    1e74:	55 e4       	ldi	r21, 0x45	; 69
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	f8 01       	movw	r30, r16
    1e80:	80 83       	st	Z, r24
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	a2 83       	std	Z+2, r26	; 0x02
    1e86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e5 5a       	subi	r30, 0xA5	; 165
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	93 81       	ldd	r25, Z+3	; 0x03
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e8       	ldi	r20, 0x80	; 128
    1e9c:	5f e3       	ldi	r21, 0x3F	; 63
    1e9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea2:	88 23       	and	r24, r24
    1ea4:	44 f4       	brge	.+16     	; 0x1eb6 <LCD_voidInit+0x4d0>
		__ticks = 1;
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e7 5a       	subi	r30, 0xA7	; 167
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	80 83       	st	Z, r24
    1eb4:	64 c0       	rjmp	.+200    	; 0x1f7e <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e5 5a       	subi	r30, 0xA5	; 165
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	3f ef       	ldi	r19, 0xFF	; 255
    1ec8:	4f e7       	ldi	r20, 0x7F	; 127
    1eca:	57 e4       	ldi	r21, 0x47	; 71
    1ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed0:	18 16       	cp	r1, r24
    1ed2:	0c f0       	brlt	.+2      	; 0x1ed6 <LCD_voidInit+0x4f0>
    1ed4:	43 c0       	rjmp	.+134    	; 0x1f5c <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e1 5a       	subi	r30, 0xA1	; 161
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8e 01       	movw	r16, r28
    1ef6:	07 5a       	subi	r16, 0xA7	; 167
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	f8 01       	movw	r30, r16
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	80 83       	st	Z, r24
    1f0c:	1f c0       	rjmp	.+62     	; 0x1f4c <LCD_voidInit+0x566>
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e9 5a       	subi	r30, 0xA9	; 169
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	80 e9       	ldi	r24, 0x90	; 144
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	80 83       	st	Z, r24
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e9 5a       	subi	r30, 0xA9	; 169
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	80 81       	ld	r24, Z
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <LCD_voidInit+0x540>
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e9 5a       	subi	r30, 0xA9	; 169
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f34:	de 01       	movw	r26, r28
    1f36:	a7 5a       	subi	r26, 0xA7	; 167
    1f38:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e7 5a       	subi	r30, 0xA7	; 167
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	11 96       	adiw	r26, 0x01	; 1
    1f48:	9c 93       	st	X, r25
    1f4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e7 5a       	subi	r30, 0xA7	; 167
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	80 81       	ld	r24, Z
    1f54:	91 81       	ldd	r25, Z+1	; 0x01
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	d1 f6       	brne	.-76     	; 0x1f0e <LCD_voidInit+0x528>
    1f5a:	27 c0       	rjmp	.+78     	; 0x1faa <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	8e 01       	movw	r16, r28
    1f5e:	07 5a       	subi	r16, 0xA7	; 167
    1f60:	1f 4f       	sbci	r17, 0xFF	; 255
    1f62:	fe 01       	movw	r30, r28
    1f64:	e5 5a       	subi	r30, 0xA5	; 165
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	60 81       	ld	r22, Z
    1f6a:	71 81       	ldd	r23, Z+1	; 0x01
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	f8 01       	movw	r30, r16
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	de 01       	movw	r26, r28
    1f80:	ab 5a       	subi	r26, 0xAB	; 171
    1f82:	bf 4f       	sbci	r27, 0xFF	; 255
    1f84:	fe 01       	movw	r30, r28
    1f86:	e7 5a       	subi	r30, 0xA7	; 167
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	80 81       	ld	r24, Z
    1f8c:	91 81       	ldd	r25, Z+1	; 0x01
    1f8e:	8d 93       	st	X+, r24
    1f90:	9c 93       	st	X, r25
    1f92:	fe 01       	movw	r30, r28
    1f94:	eb 5a       	subi	r30, 0xAB	; 171
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <LCD_voidInit+0x5b6>
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	eb 5a       	subi	r30, 0xAB	; 171
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    1faa:	80 e2       	ldi	r24, 0x20	; 32
    1fac:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_voidSendInitCommand>
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ef 5a       	subi	r30, 0xAF	; 175
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a0 e8       	ldi	r26, 0x80	; 128
    1fbc:	bf e3       	ldi	r27, 0x3F	; 63
    1fbe:	80 83       	st	Z, r24
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	a2 83       	std	Z+2, r26	; 0x02
    1fc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	8e 01       	movw	r16, r28
    1fc8:	03 5b       	subi	r16, 0xB3	; 179
    1fca:	1f 4f       	sbci	r17, 0xFF	; 255
    1fcc:	fe 01       	movw	r30, r28
    1fce:	ef 5a       	subi	r30, 0xAF	; 175
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	60 81       	ld	r22, Z
    1fd4:	71 81       	ldd	r23, Z+1	; 0x01
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	93 81       	ldd	r25, Z+3	; 0x03
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	55 e4       	ldi	r21, 0x45	; 69
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	f8 01       	movw	r30, r16
    1fec:	80 83       	st	Z, r24
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	a2 83       	std	Z+2, r26	; 0x02
    1ff2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e3 5b       	subi	r30, 0xB3	; 179
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	44 f4       	brge	.+16     	; 0x2022 <LCD_voidInit+0x63c>
		__ticks = 1;
    2012:	fe 01       	movw	r30, r28
    2014:	e5 5b       	subi	r30, 0xB5	; 181
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	80 83       	st	Z, r24
    2020:	64 c0       	rjmp	.+200    	; 0x20ea <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    2022:	fe 01       	movw	r30, r28
    2024:	e3 5b       	subi	r30, 0xB3	; 179
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	93 81       	ldd	r25, Z+3	; 0x03
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	3f ef       	ldi	r19, 0xFF	; 255
    2034:	4f e7       	ldi	r20, 0x7F	; 127
    2036:	57 e4       	ldi	r21, 0x47	; 71
    2038:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    203c:	18 16       	cp	r1, r24
    203e:	0c f0       	brlt	.+2      	; 0x2042 <LCD_voidInit+0x65c>
    2040:	43 c0       	rjmp	.+134    	; 0x20c8 <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2042:	fe 01       	movw	r30, r28
    2044:	ef 5a       	subi	r30, 0xAF	; 175
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	60 81       	ld	r22, Z
    204a:	71 81       	ldd	r23, Z+1	; 0x01
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	93 81       	ldd	r25, Z+3	; 0x03
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	51 e4       	ldi	r21, 0x41	; 65
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	8e 01       	movw	r16, r28
    2062:	05 5b       	subi	r16, 0xB5	; 181
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	f8 01       	movw	r30, r16
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	80 83       	st	Z, r24
    2078:	1f c0       	rjmp	.+62     	; 0x20b8 <LCD_voidInit+0x6d2>
    207a:	fe 01       	movw	r30, r28
    207c:	e7 5b       	subi	r30, 0xB7	; 183
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 e9       	ldi	r24, 0x90	; 144
    2082:	91 e0       	ldi	r25, 0x01	; 1
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	80 83       	st	Z, r24
    2088:	fe 01       	movw	r30, r28
    208a:	e7 5b       	subi	r30, 0xB7	; 183
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_voidInit+0x6ac>
    2096:	fe 01       	movw	r30, r28
    2098:	e7 5b       	subi	r30, 0xB7	; 183
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a0:	de 01       	movw	r26, r28
    20a2:	a5 5b       	subi	r26, 0xB5	; 181
    20a4:	bf 4f       	sbci	r27, 0xFF	; 255
    20a6:	fe 01       	movw	r30, r28
    20a8:	e5 5b       	subi	r30, 0xB5	; 181
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	91 81       	ldd	r25, Z+1	; 0x01
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	11 96       	adiw	r26, 0x01	; 1
    20b4:	9c 93       	st	X, r25
    20b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b8:	fe 01       	movw	r30, r28
    20ba:	e5 5b       	subi	r30, 0xB5	; 181
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	91 81       	ldd	r25, Z+1	; 0x01
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	d1 f6       	brne	.-76     	; 0x207a <LCD_voidInit+0x694>
    20c6:	27 c0       	rjmp	.+78     	; 0x2116 <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c8:	8e 01       	movw	r16, r28
    20ca:	05 5b       	subi	r16, 0xB5	; 181
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	fe 01       	movw	r30, r28
    20d0:	e3 5b       	subi	r30, 0xB3	; 179
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	f8 01       	movw	r30, r16
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	80 83       	st	Z, r24
    20ea:	de 01       	movw	r26, r28
    20ec:	a9 5b       	subi	r26, 0xB9	; 185
    20ee:	bf 4f       	sbci	r27, 0xFF	; 255
    20f0:	fe 01       	movw	r30, r28
    20f2:	e5 5b       	subi	r30, 0xB5	; 181
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	8d 93       	st	X+, r24
    20fc:	9c 93       	st	X, r25
    20fe:	fe 01       	movw	r30, r28
    2100:	e9 5b       	subi	r30, 0xB9	; 185
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	80 81       	ld	r24, Z
    2106:	91 81       	ldd	r25, Z+1	; 0x01
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <LCD_voidInit+0x722>
    210c:	fe 01       	movw	r30, r28
    210e:	e9 5b       	subi	r30, 0xB9	; 185
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    2116:	88 e2       	ldi	r24, 0x28	; 40
    2118:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_voidSendCommand>
    211c:	fe 01       	movw	r30, r28
    211e:	ed 5b       	subi	r30, 0xBD	; 189
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a0 e8       	ldi	r26, 0x80	; 128
    2128:	bf e3       	ldi	r27, 0x3F	; 63
    212a:	80 83       	st	Z, r24
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	a2 83       	std	Z+2, r26	; 0x02
    2130:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	8e 01       	movw	r16, r28
    2134:	01 5c       	subi	r16, 0xC1	; 193
    2136:	1f 4f       	sbci	r17, 0xFF	; 255
    2138:	fe 01       	movw	r30, r28
    213a:	ed 5b       	subi	r30, 0xBD	; 189
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	60 81       	ld	r22, Z
    2140:	71 81       	ldd	r23, Z+1	; 0x01
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	93 81       	ldd	r25, Z+3	; 0x03
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a e7       	ldi	r20, 0x7A	; 122
    214c:	55 e4       	ldi	r21, 0x45	; 69
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	f8 01       	movw	r30, r16
    2158:	80 83       	st	Z, r24
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	a2 83       	std	Z+2, r26	; 0x02
    215e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2160:	fe 01       	movw	r30, r28
    2162:	ff 96       	adiw	r30, 0x3f	; 63
    2164:	60 81       	ld	r22, Z
    2166:	71 81       	ldd	r23, Z+1	; 0x01
    2168:	82 81       	ldd	r24, Z+2	; 0x02
    216a:	93 81       	ldd	r25, Z+3	; 0x03
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e8       	ldi	r20, 0x80	; 128
    2172:	5f e3       	ldi	r21, 0x3F	; 63
    2174:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2178:	88 23       	and	r24, r24
    217a:	2c f4       	brge	.+10     	; 0x2186 <LCD_voidInit+0x7a0>
		__ticks = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9e af       	std	Y+62, r25	; 0x3e
    2182:	8d af       	std	Y+61, r24	; 0x3d
    2184:	46 c0       	rjmp	.+140    	; 0x2212 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    2186:	fe 01       	movw	r30, r28
    2188:	ff 96       	adiw	r30, 0x3f	; 63
    218a:	60 81       	ld	r22, Z
    218c:	71 81       	ldd	r23, Z+1	; 0x01
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	64 f5       	brge	.+88     	; 0x21fa <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	fe 01       	movw	r30, r28
    21a4:	ed 5b       	subi	r30, 0xBD	; 189
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e2       	ldi	r20, 0x20	; 32
    21b6:	51 e4       	ldi	r21, 0x41	; 65
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	9e af       	std	Y+62, r25	; 0x3e
    21ce:	8d af       	std	Y+61, r24	; 0x3d
    21d0:	0f c0       	rjmp	.+30     	; 0x21f0 <LCD_voidInit+0x80a>
    21d2:	80 e9       	ldi	r24, 0x90	; 144
    21d4:	91 e0       	ldi	r25, 0x01	; 1
    21d6:	9c af       	std	Y+60, r25	; 0x3c
    21d8:	8b af       	std	Y+59, r24	; 0x3b
    21da:	8b ad       	ldd	r24, Y+59	; 0x3b
    21dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_voidInit+0x7f8>
    21e2:	9c af       	std	Y+60, r25	; 0x3c
    21e4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    21e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	9e af       	std	Y+62, r25	; 0x3e
    21ee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    21f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	69 f7       	brne	.-38     	; 0x21d2 <LCD_voidInit+0x7ec>
    21f8:	16 c0       	rjmp	.+44     	; 0x2226 <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fa:	fe 01       	movw	r30, r28
    21fc:	ff 96       	adiw	r30, 0x3f	; 63
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	9e af       	std	Y+62, r25	; 0x3e
    2210:	8d af       	std	Y+61, r24	; 0x3d
    2212:	8d ad       	ldd	r24, Y+61	; 0x3d
    2214:	9e ad       	ldd	r25, Y+62	; 0x3e
    2216:	9a af       	std	Y+58, r25	; 0x3a
    2218:	89 af       	std	Y+57, r24	; 0x39
    221a:	89 ad       	ldd	r24, Y+57	; 0x39
    221c:	9a ad       	ldd	r25, Y+58	; 0x3a
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <LCD_voidInit+0x838>
    2222:	9a af       	std	Y+58, r25	; 0x3a
    2224:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    2226:	88 e0       	ldi	r24, 0x08	; 8
    2228:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_voidSendCommand>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 e8       	ldi	r26, 0x80	; 128
    2232:	bf e3       	ldi	r27, 0x3F	; 63
    2234:	8d ab       	std	Y+53, r24	; 0x35
    2236:	9e ab       	std	Y+54, r25	; 0x36
    2238:	af ab       	std	Y+55, r26	; 0x37
    223a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223c:	6d a9       	ldd	r22, Y+53	; 0x35
    223e:	7e a9       	ldd	r23, Y+54	; 0x36
    2240:	8f a9       	ldd	r24, Y+55	; 0x37
    2242:	98 ad       	ldd	r25, Y+56	; 0x38
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4a e7       	ldi	r20, 0x7A	; 122
    224a:	55 e4       	ldi	r21, 0x45	; 69
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	89 ab       	std	Y+49, r24	; 0x31
    2256:	9a ab       	std	Y+50, r25	; 0x32
    2258:	ab ab       	std	Y+51, r26	; 0x33
    225a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    225c:	69 a9       	ldd	r22, Y+49	; 0x31
    225e:	7a a9       	ldd	r23, Y+50	; 0x32
    2260:	8b a9       	ldd	r24, Y+51	; 0x33
    2262:	9c a9       	ldd	r25, Y+52	; 0x34
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e8       	ldi	r20, 0x80	; 128
    226a:	5f e3       	ldi	r21, 0x3F	; 63
    226c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2270:	88 23       	and	r24, r24
    2272:	2c f4       	brge	.+10     	; 0x227e <LCD_voidInit+0x898>
		__ticks = 1;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	98 ab       	std	Y+48, r25	; 0x30
    227a:	8f a7       	std	Y+47, r24	; 0x2f
    227c:	3f c0       	rjmp	.+126    	; 0x22fc <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    227e:	69 a9       	ldd	r22, Y+49	; 0x31
    2280:	7a a9       	ldd	r23, Y+50	; 0x32
    2282:	8b a9       	ldd	r24, Y+51	; 0x33
    2284:	9c a9       	ldd	r25, Y+52	; 0x34
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	3f ef       	ldi	r19, 0xFF	; 255
    228a:	4f e7       	ldi	r20, 0x7F	; 127
    228c:	57 e4       	ldi	r21, 0x47	; 71
    228e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2292:	18 16       	cp	r1, r24
    2294:	4c f5       	brge	.+82     	; 0x22e8 <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2296:	6d a9       	ldd	r22, Y+53	; 0x35
    2298:	7e a9       	ldd	r23, Y+54	; 0x36
    229a:	8f a9       	ldd	r24, Y+55	; 0x37
    229c:	98 ad       	ldd	r25, Y+56	; 0x38
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e2       	ldi	r20, 0x20	; 32
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	98 ab       	std	Y+48, r25	; 0x30
    22bc:	8f a7       	std	Y+47, r24	; 0x2f
    22be:	0f c0       	rjmp	.+30     	; 0x22de <LCD_voidInit+0x8f8>
    22c0:	80 e9       	ldi	r24, 0x90	; 144
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	9e a7       	std	Y+46, r25	; 0x2e
    22c6:	8d a7       	std	Y+45, r24	; 0x2d
    22c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_voidInit+0x8e6>
    22d0:	9e a7       	std	Y+46, r25	; 0x2e
    22d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d6:	98 a9       	ldd	r25, Y+48	; 0x30
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	98 ab       	std	Y+48, r25	; 0x30
    22dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22de:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e0:	98 a9       	ldd	r25, Y+48	; 0x30
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	69 f7       	brne	.-38     	; 0x22c0 <LCD_voidInit+0x8da>
    22e6:	14 c0       	rjmp	.+40     	; 0x2310 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e8:	69 a9       	ldd	r22, Y+49	; 0x31
    22ea:	7a a9       	ldd	r23, Y+50	; 0x32
    22ec:	8b a9       	ldd	r24, Y+51	; 0x33
    22ee:	9c a9       	ldd	r25, Y+52	; 0x34
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	98 ab       	std	Y+48, r25	; 0x30
    22fa:	8f a7       	std	Y+47, r24	; 0x2f
    22fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2300:	9c a7       	std	Y+44, r25	; 0x2c
    2302:	8b a7       	std	Y+43, r24	; 0x2b
    2304:	8b a5       	ldd	r24, Y+43	; 0x2b
    2306:	9c a5       	ldd	r25, Y+44	; 0x2c
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <LCD_voidInit+0x922>
    230c:	9c a7       	std	Y+44, r25	; 0x2c
    230e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_voidSendCommand>
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	a0 ea       	ldi	r26, 0xA0	; 160
    231c:	b0 e4       	ldi	r27, 0x40	; 64
    231e:	8f a3       	std	Y+39, r24	; 0x27
    2320:	98 a7       	std	Y+40, r25	; 0x28
    2322:	a9 a7       	std	Y+41, r26	; 0x29
    2324:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2326:	6f a1       	ldd	r22, Y+39	; 0x27
    2328:	78 a5       	ldd	r23, Y+40	; 0x28
    232a:	89 a5       	ldd	r24, Y+41	; 0x29
    232c:	9a a5       	ldd	r25, Y+42	; 0x2a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	4a e7       	ldi	r20, 0x7A	; 122
    2334:	55 e4       	ldi	r21, 0x45	; 69
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	8b a3       	std	Y+35, r24	; 0x23
    2340:	9c a3       	std	Y+36, r25	; 0x24
    2342:	ad a3       	std	Y+37, r26	; 0x25
    2344:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2346:	6b a1       	ldd	r22, Y+35	; 0x23
    2348:	7c a1       	ldd	r23, Y+36	; 0x24
    234a:	8d a1       	ldd	r24, Y+37	; 0x25
    234c:	9e a1       	ldd	r25, Y+38	; 0x26
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	2c f4       	brge	.+10     	; 0x2368 <LCD_voidInit+0x982>
		__ticks = 1;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9a a3       	std	Y+34, r25	; 0x22
    2364:	89 a3       	std	Y+33, r24	; 0x21
    2366:	3f c0       	rjmp	.+126    	; 0x23e6 <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    2368:	6b a1       	ldd	r22, Y+35	; 0x23
    236a:	7c a1       	ldd	r23, Y+36	; 0x24
    236c:	8d a1       	ldd	r24, Y+37	; 0x25
    236e:	9e a1       	ldd	r25, Y+38	; 0x26
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237c:	18 16       	cp	r1, r24
    237e:	4c f5       	brge	.+82     	; 0x23d2 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	6f a1       	ldd	r22, Y+39	; 0x27
    2382:	78 a5       	ldd	r23, Y+40	; 0x28
    2384:	89 a5       	ldd	r24, Y+41	; 0x29
    2386:	9a a5       	ldd	r25, Y+42	; 0x2a
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e2       	ldi	r20, 0x20	; 32
    238e:	51 e4       	ldi	r21, 0x41	; 65
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9a a3       	std	Y+34, r25	; 0x22
    23a6:	89 a3       	std	Y+33, r24	; 0x21
    23a8:	0f c0       	rjmp	.+30     	; 0x23c8 <LCD_voidInit+0x9e2>
    23aa:	80 e9       	ldi	r24, 0x90	; 144
    23ac:	91 e0       	ldi	r25, 0x01	; 1
    23ae:	98 a3       	std	Y+32, r25	; 0x20
    23b0:	8f 8f       	std	Y+31, r24	; 0x1f
    23b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23b4:	98 a1       	ldd	r25, Y+32	; 0x20
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <LCD_voidInit+0x9d0>
    23ba:	98 a3       	std	Y+32, r25	; 0x20
    23bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23be:	89 a1       	ldd	r24, Y+33	; 0x21
    23c0:	9a a1       	ldd	r25, Y+34	; 0x22
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	9a a3       	std	Y+34, r25	; 0x22
    23c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ca:	9a a1       	ldd	r25, Y+34	; 0x22
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	69 f7       	brne	.-38     	; 0x23aa <LCD_voidInit+0x9c4>
    23d0:	14 c0       	rjmp	.+40     	; 0x23fa <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d2:	6b a1       	ldd	r22, Y+35	; 0x23
    23d4:	7c a1       	ldd	r23, Y+36	; 0x24
    23d6:	8d a1       	ldd	r24, Y+37	; 0x25
    23d8:	9e a1       	ldd	r25, Y+38	; 0x26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9a a3       	std	Y+34, r25	; 0x22
    23e4:	89 a3       	std	Y+33, r24	; 0x21
    23e6:	89 a1       	ldd	r24, Y+33	; 0x21
    23e8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ea:	9e 8f       	std	Y+30, r25	; 0x1e
    23ec:	8d 8f       	std	Y+29, r24	; 0x1d
    23ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_voidInit+0xa0c>
    23f6:	9e 8f       	std	Y+30, r25	; 0x1e
    23f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    23fa:	8c e0       	ldi	r24, 0x0C	; 12
    23fc:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_voidSendCommand>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a0 e8       	ldi	r26, 0x80	; 128
    2406:	bf e3       	ldi	r27, 0x3F	; 63
    2408:	89 8f       	std	Y+25, r24	; 0x19
    240a:	9a 8f       	std	Y+26, r25	; 0x1a
    240c:	ab 8f       	std	Y+27, r26	; 0x1b
    240e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2410:	69 8d       	ldd	r22, Y+25	; 0x19
    2412:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2414:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2416:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a e7       	ldi	r20, 0x7A	; 122
    241e:	55 e4       	ldi	r21, 0x45	; 69
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	8d 8b       	std	Y+21, r24	; 0x15
    242a:	9e 8b       	std	Y+22, r25	; 0x16
    242c:	af 8b       	std	Y+23, r26	; 0x17
    242e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2430:	6d 89       	ldd	r22, Y+21	; 0x15
    2432:	7e 89       	ldd	r23, Y+22	; 0x16
    2434:	8f 89       	ldd	r24, Y+23	; 0x17
    2436:	98 8d       	ldd	r25, Y+24	; 0x18
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	2c f4       	brge	.+10     	; 0x2452 <LCD_voidInit+0xa6c>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9c 8b       	std	Y+20, r25	; 0x14
    244e:	8b 8b       	std	Y+19, r24	; 0x13
    2450:	3f c0       	rjmp	.+126    	; 0x24d0 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    2452:	6d 89       	ldd	r22, Y+21	; 0x15
    2454:	7e 89       	ldd	r23, Y+22	; 0x16
    2456:	8f 89       	ldd	r24, Y+23	; 0x17
    2458:	98 8d       	ldd	r25, Y+24	; 0x18
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	4c f5       	brge	.+82     	; 0x24bc <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246a:	69 8d       	ldd	r22, Y+25	; 0x19
    246c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    246e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2470:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e2       	ldi	r20, 0x20	; 32
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9c 8b       	std	Y+20, r25	; 0x14
    2490:	8b 8b       	std	Y+19, r24	; 0x13
    2492:	0f c0       	rjmp	.+30     	; 0x24b2 <LCD_voidInit+0xacc>
    2494:	80 e9       	ldi	r24, 0x90	; 144
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	9a 8b       	std	Y+18, r25	; 0x12
    249a:	89 8b       	std	Y+17, r24	; 0x11
    249c:	89 89       	ldd	r24, Y+17	; 0x11
    249e:	9a 89       	ldd	r25, Y+18	; 0x12
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <LCD_voidInit+0xaba>
    24a4:	9a 8b       	std	Y+18, r25	; 0x12
    24a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a8:	8b 89       	ldd	r24, Y+19	; 0x13
    24aa:	9c 89       	ldd	r25, Y+20	; 0x14
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	9c 8b       	std	Y+20, r25	; 0x14
    24b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	8b 89       	ldd	r24, Y+19	; 0x13
    24b4:	9c 89       	ldd	r25, Y+20	; 0x14
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	69 f7       	brne	.-38     	; 0x2494 <LCD_voidInit+0xaae>
    24ba:	14 c0       	rjmp	.+40     	; 0x24e4 <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	6d 89       	ldd	r22, Y+21	; 0x15
    24be:	7e 89       	ldd	r23, Y+22	; 0x16
    24c0:	8f 89       	ldd	r24, Y+23	; 0x17
    24c2:	98 8d       	ldd	r25, Y+24	; 0x18
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9c 8b       	std	Y+20, r25	; 0x14
    24ce:	8b 8b       	std	Y+19, r24	; 0x13
    24d0:	8b 89       	ldd	r24, Y+19	; 0x13
    24d2:	9c 89       	ldd	r25, Y+20	; 0x14
    24d4:	98 8b       	std	Y+16, r25	; 0x10
    24d6:	8f 87       	std	Y+15, r24	; 0x0f
    24d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24da:	98 89       	ldd	r25, Y+16	; 0x10
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <LCD_voidInit+0xaf6>
    24e0:	98 8b       	std	Y+16, r25	; 0x10
    24e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    24e4:	86 e0       	ldi	r24, 0x06	; 6
    24e6:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_voidSendCommand>
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	a0 e8       	ldi	r26, 0x80	; 128
    24f0:	bf e3       	ldi	r27, 0x3F	; 63
    24f2:	8b 87       	std	Y+11, r24	; 0x0b
    24f4:	9c 87       	std	Y+12, r25	; 0x0c
    24f6:	ad 87       	std	Y+13, r26	; 0x0d
    24f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2500:	9e 85       	ldd	r25, Y+14	; 0x0e
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4a e7       	ldi	r20, 0x7A	; 122
    2508:	55 e4       	ldi	r21, 0x45	; 69
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	8f 83       	std	Y+7, r24	; 0x07
    2514:	98 87       	std	Y+8, r25	; 0x08
    2516:	a9 87       	std	Y+9, r26	; 0x09
    2518:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e8       	ldi	r20, 0x80	; 128
    2528:	5f e3       	ldi	r21, 0x3F	; 63
    252a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    252e:	88 23       	and	r24, r24
    2530:	2c f4       	brge	.+10     	; 0x253c <LCD_voidInit+0xb56>
		__ticks = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	3f c0       	rjmp	.+126    	; 0x25ba <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2550:	18 16       	cp	r1, r24
    2552:	4c f5       	brge	.+82     	; 0x25a6 <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	6b 85       	ldd	r22, Y+11	; 0x0b
    2556:	7c 85       	ldd	r23, Y+12	; 0x0c
    2558:	8d 85       	ldd	r24, Y+13	; 0x0d
    255a:	9e 85       	ldd	r25, Y+14	; 0x0e
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e2       	ldi	r20, 0x20	; 32
    2562:	51 e4       	ldi	r21, 0x41	; 65
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	0f c0       	rjmp	.+30     	; 0x259c <LCD_voidInit+0xbb6>
    257e:	80 e9       	ldi	r24, 0x90	; 144
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	9c 83       	std	Y+4, r25	; 0x04
    2584:	8b 83       	std	Y+3, r24	; 0x03
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <LCD_voidInit+0xba4>
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2592:	8d 81       	ldd	r24, Y+5	; 0x05
    2594:	9e 81       	ldd	r25, Y+6	; 0x06
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	69 f7       	brne	.-38     	; 0x257e <LCD_voidInit+0xb98>
    25a4:	14 c0       	rjmp	.+40     	; 0x25ce <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a6:	6f 81       	ldd	r22, Y+7	; 0x07
    25a8:	78 85       	ldd	r23, Y+8	; 0x08
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <LCD_voidInit+0xbe0>
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    25ce:	c4 57       	subi	r28, 0x74	; 116
    25d0:	df 4f       	sbci	r29, 0xFF	; 255
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	08 95       	ret

000025e6 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	2f 97       	sbiw	r28, 0x0f	; 15
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	63 e0       	ldi	r22, 0x03	; 3
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	62 e0       	ldi	r22, 0x02	; 2
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(command, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(command, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(command, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(command, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    2610:	8f 85       	ldd	r24, Y+15	; 0x0f
    2612:	82 95       	swap	r24
    2614:	8f 70       	andi	r24, 0x0F	; 15
    2616:	98 2f       	mov	r25, r24
    2618:	91 70       	andi	r25, 0x01	; 1
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	60 e0       	ldi	r22, 0x00	; 0
    261e:	49 2f       	mov	r20, r25
    2620:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    2624:	8f 85       	ldd	r24, Y+15	; 0x0f
    2626:	82 95       	swap	r24
    2628:	86 95       	lsr	r24
    262a:	87 70       	andi	r24, 0x07	; 7
    262c:	98 2f       	mov	r25, r24
    262e:	91 70       	andi	r25, 0x01	; 1
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	61 e0       	ldi	r22, 0x01	; 1
    2634:	49 2f       	mov	r20, r25
    2636:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    263a:	8f 85       	ldd	r24, Y+15	; 0x0f
    263c:	82 95       	swap	r24
    263e:	86 95       	lsr	r24
    2640:	86 95       	lsr	r24
    2642:	83 70       	andi	r24, 0x03	; 3
    2644:	98 2f       	mov	r25, r24
    2646:	91 70       	andi	r25, 0x01	; 1
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	62 e0       	ldi	r22, 0x02	; 2
    264c:	49 2f       	mov	r20, r25
    264e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    2652:	8f 85       	ldd	r24, Y+15	; 0x0f
    2654:	98 2f       	mov	r25, r24
    2656:	99 1f       	adc	r25, r25
    2658:	99 27       	eor	r25, r25
    265a:	99 1f       	adc	r25, r25
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	64 e0       	ldi	r22, 0x04	; 4
    2660:	49 2f       	mov	r20, r25
    2662:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	62 e0       	ldi	r22, 0x02	; 2
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	62 e0       	ldi	r22, 0x02	; 2
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 0));
    267a:	8f 85       	ldd	r24, Y+15	; 0x0f
    267c:	98 2f       	mov	r25, r24
    267e:	91 70       	andi	r25, 0x01	; 1
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	49 2f       	mov	r20, r25
    2686:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 1));
    268a:	8f 85       	ldd	r24, Y+15	; 0x0f
    268c:	86 95       	lsr	r24
    268e:	98 2f       	mov	r25, r24
    2690:	91 70       	andi	r25, 0x01	; 1
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	61 e0       	ldi	r22, 0x01	; 1
    2696:	49 2f       	mov	r20, r25
    2698:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 2));
    269c:	8f 85       	ldd	r24, Y+15	; 0x0f
    269e:	86 95       	lsr	r24
    26a0:	86 95       	lsr	r24
    26a2:	98 2f       	mov	r25, r24
    26a4:	91 70       	andi	r25, 0x01	; 1
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	62 e0       	ldi	r22, 0x02	; 2
    26aa:	49 2f       	mov	r20, r25
    26ac:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 3));
    26b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b2:	86 95       	lsr	r24
    26b4:	86 95       	lsr	r24
    26b6:	86 95       	lsr	r24
    26b8:	98 2f       	mov	r25, r24
    26ba:	91 70       	andi	r25, 0x01	; 1
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	64 e0       	ldi	r22, 0x04	; 4
    26c0:	49 2f       	mov	r20, r25
    26c2:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	62 e0       	ldi	r22, 0x02	; 2
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a0 ea       	ldi	r26, 0xA0	; 160
    26d6:	b0 e4       	ldi	r27, 0x40	; 64
    26d8:	8b 87       	std	Y+11, r24	; 0x0b
    26da:	9c 87       	std	Y+12, r25	; 0x0c
    26dc:	ad 87       	std	Y+13, r26	; 0x0d
    26de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	4a e7       	ldi	r20, 0x7A	; 122
    26ee:	55 e4       	ldi	r21, 0x45	; 69
    26f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	8f 83       	std	Y+7, r24	; 0x07
    26fa:	98 87       	std	Y+8, r25	; 0x08
    26fc:	a9 87       	std	Y+9, r26	; 0x09
    26fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2700:	6f 81       	ldd	r22, Y+7	; 0x07
    2702:	78 85       	ldd	r23, Y+8	; 0x08
    2704:	89 85       	ldd	r24, Y+9	; 0x09
    2706:	9a 85       	ldd	r25, Y+10	; 0x0a
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e8       	ldi	r20, 0x80	; 128
    270e:	5f e3       	ldi	r21, 0x3F	; 63
    2710:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2714:	88 23       	and	r24, r24
    2716:	2c f4       	brge	.+10     	; 0x2722 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
    2720:	3f c0       	rjmp	.+126    	; 0x27a0 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    2722:	6f 81       	ldd	r22, Y+7	; 0x07
    2724:	78 85       	ldd	r23, Y+8	; 0x08
    2726:	89 85       	ldd	r24, Y+9	; 0x09
    2728:	9a 85       	ldd	r25, Y+10	; 0x0a
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	3f ef       	ldi	r19, 0xFF	; 255
    272e:	4f e7       	ldi	r20, 0x7F	; 127
    2730:	57 e4       	ldi	r21, 0x47	; 71
    2732:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2736:	18 16       	cp	r1, r24
    2738:	4c f5       	brge	.+82     	; 0x278c <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273a:	6b 85       	ldd	r22, Y+11	; 0x0b
    273c:	7c 85       	ldd	r23, Y+12	; 0x0c
    273e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2740:	9e 85       	ldd	r25, Y+14	; 0x0e
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e2       	ldi	r20, 0x20	; 32
    2748:	51 e4       	ldi	r21, 0x41	; 65
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	bc 01       	movw	r22, r24
    2754:	cd 01       	movw	r24, r26
    2756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
    2762:	0f c0       	rjmp	.+30     	; 0x2782 <LCD_voidSendCommand+0x19c>
    2764:	80 e9       	ldi	r24, 0x90	; 144
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	9c 83       	std	Y+4, r25	; 0x04
    276a:	8b 83       	std	Y+3, r24	; 0x03
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <LCD_voidSendCommand+0x18a>
    2774:	9c 83       	std	Y+4, r25	; 0x04
    2776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	9e 83       	std	Y+6, r25	; 0x06
    2780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	69 f7       	brne	.-38     	; 0x2764 <LCD_voidSendCommand+0x17e>
    278a:	14 c0       	rjmp	.+40     	; 0x27b4 <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278c:	6f 81       	ldd	r22, Y+7	; 0x07
    278e:	78 85       	ldd	r23, Y+8	; 0x08
    2790:	89 85       	ldd	r24, Y+9	; 0x09
    2792:	9a 85       	ldd	r25, Y+10	; 0x0a
    2794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	9a 83       	std	Y+2, r25	; 0x02
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <LCD_voidSendCommand+0x1c6>
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    27b4:	2f 96       	adiw	r28, 0x0f	; 15
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	2f 97       	sbiw	r28, 0x0f	; 15
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	63 e0       	ldi	r22, 0x03	; 3
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	62 e0       	ldi	r22, 0x02	; 2
    27ea:	41 e0       	ldi	r20, 0x01	; 1
    27ec:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    27f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f2:	82 95       	swap	r24
    27f4:	8f 70       	andi	r24, 0x0F	; 15
    27f6:	98 2f       	mov	r25, r24
    27f8:	91 70       	andi	r25, 0x01	; 1
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	49 2f       	mov	r20, r25
    2800:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    2804:	8f 85       	ldd	r24, Y+15	; 0x0f
    2806:	82 95       	swap	r24
    2808:	86 95       	lsr	r24
    280a:	87 70       	andi	r24, 0x07	; 7
    280c:	98 2f       	mov	r25, r24
    280e:	91 70       	andi	r25, 0x01	; 1
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	61 e0       	ldi	r22, 0x01	; 1
    2814:	49 2f       	mov	r20, r25
    2816:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    281a:	8f 85       	ldd	r24, Y+15	; 0x0f
    281c:	82 95       	swap	r24
    281e:	86 95       	lsr	r24
    2820:	86 95       	lsr	r24
    2822:	83 70       	andi	r24, 0x03	; 3
    2824:	98 2f       	mov	r25, r24
    2826:	91 70       	andi	r25, 0x01	; 1
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	62 e0       	ldi	r22, 0x02	; 2
    282c:	49 2f       	mov	r20, r25
    282e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    2832:	8f 85       	ldd	r24, Y+15	; 0x0f
    2834:	98 2f       	mov	r25, r24
    2836:	99 1f       	adc	r25, r25
    2838:	99 27       	eor	r25, r25
    283a:	99 1f       	adc	r25, r25
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	64 e0       	ldi	r22, 0x04	; 4
    2840:	49 2f       	mov	r20, r25
    2842:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	62 e0       	ldi	r22, 0x02	; 2
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	a0 ea       	ldi	r26, 0xA0	; 160
    2856:	b0 e4       	ldi	r27, 0x40	; 64
    2858:	8b 87       	std	Y+11, r24	; 0x0b
    285a:	9c 87       	std	Y+12, r25	; 0x0c
    285c:	ad 87       	std	Y+13, r26	; 0x0d
    285e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2860:	6b 85       	ldd	r22, Y+11	; 0x0b
    2862:	7c 85       	ldd	r23, Y+12	; 0x0c
    2864:	8d 85       	ldd	r24, Y+13	; 0x0d
    2866:	9e 85       	ldd	r25, Y+14	; 0x0e
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	4a e7       	ldi	r20, 0x7A	; 122
    286e:	55 e4       	ldi	r21, 0x45	; 69
    2870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	8f 83       	std	Y+7, r24	; 0x07
    287a:	98 87       	std	Y+8, r25	; 0x08
    287c:	a9 87       	std	Y+9, r26	; 0x09
    287e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2880:	6f 81       	ldd	r22, Y+7	; 0x07
    2882:	78 85       	ldd	r23, Y+8	; 0x08
    2884:	89 85       	ldd	r24, Y+9	; 0x09
    2886:	9a 85       	ldd	r25, Y+10	; 0x0a
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e8       	ldi	r20, 0x80	; 128
    288e:	5f e3       	ldi	r21, 0x3F	; 63
    2890:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2894:	88 23       	and	r24, r24
    2896:	2c f4       	brge	.+10     	; 0x28a2 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	3f c0       	rjmp	.+126    	; 0x2920 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    28a2:	6f 81       	ldd	r22, Y+7	; 0x07
    28a4:	78 85       	ldd	r23, Y+8	; 0x08
    28a6:	89 85       	ldd	r24, Y+9	; 0x09
    28a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	3f ef       	ldi	r19, 0xFF	; 255
    28ae:	4f e7       	ldi	r20, 0x7F	; 127
    28b0:	57 e4       	ldi	r21, 0x47	; 71
    28b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b6:	18 16       	cp	r1, r24
    28b8:	4c f5       	brge	.+82     	; 0x290c <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    28bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28be:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e2       	ldi	r20, 0x20	; 32
    28c8:	51 e4       	ldi	r21, 0x41	; 65
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9e 83       	std	Y+6, r25	; 0x06
    28e0:	8d 83       	std	Y+5, r24	; 0x05
    28e2:	0f c0       	rjmp	.+30     	; 0x2902 <LCD_voidSendInitCommand+0x13c>
    28e4:	80 e9       	ldi	r24, 0x90	; 144
    28e6:	91 e0       	ldi	r25, 0x01	; 1
    28e8:	9c 83       	std	Y+4, r25	; 0x04
    28ea:	8b 83       	std	Y+3, r24	; 0x03
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	9c 81       	ldd	r25, Y+4	; 0x04
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <LCD_voidSendInitCommand+0x12a>
    28f4:	9c 83       	std	Y+4, r25	; 0x04
    28f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2902:	8d 81       	ldd	r24, Y+5	; 0x05
    2904:	9e 81       	ldd	r25, Y+6	; 0x06
    2906:	00 97       	sbiw	r24, 0x00	; 0
    2908:	69 f7       	brne	.-38     	; 0x28e4 <LCD_voidSendInitCommand+0x11e>
    290a:	14 c0       	rjmp	.+40     	; 0x2934 <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290c:	6f 81       	ldd	r22, Y+7	; 0x07
    290e:	78 85       	ldd	r23, Y+8	; 0x08
    2910:	89 85       	ldd	r24, Y+9	; 0x09
    2912:	9a 85       	ldd	r25, Y+10	; 0x0a
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9e 83       	std	Y+6, r25	; 0x06
    291e:	8d 83       	std	Y+5, r24	; 0x05
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	9a 83       	std	Y+2, r25	; 0x02
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	9a 81       	ldd	r25, Y+2	; 0x02
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <LCD_voidSendInitCommand+0x166>
    2930:	9a 83       	std	Y+2, r25	; 0x02
    2932:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2934:	2f 96       	adiw	r28, 0x0f	; 15
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	2f 97       	sbiw	r28, 0x0f	; 15
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_HIGH); //RS = 0
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	63 e0       	ldi	r22, 0x03	; 3
    2960:	41 e0       	ldi	r20, 0x01	; 1
    2962:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	62 e0       	ldi	r22, 0x02	; 2
    296a:	41 e0       	ldi	r20, 0x01	; 1
    296c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(data, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(data, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(data, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(data, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 4));
    2970:	8f 85       	ldd	r24, Y+15	; 0x0f
    2972:	82 95       	swap	r24
    2974:	8f 70       	andi	r24, 0x0F	; 15
    2976:	98 2f       	mov	r25, r24
    2978:	91 70       	andi	r25, 0x01	; 1
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	49 2f       	mov	r20, r25
    2980:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 5));
    2984:	8f 85       	ldd	r24, Y+15	; 0x0f
    2986:	82 95       	swap	r24
    2988:	86 95       	lsr	r24
    298a:	87 70       	andi	r24, 0x07	; 7
    298c:	98 2f       	mov	r25, r24
    298e:	91 70       	andi	r25, 0x01	; 1
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	61 e0       	ldi	r22, 0x01	; 1
    2994:	49 2f       	mov	r20, r25
    2996:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 6));
    299a:	8f 85       	ldd	r24, Y+15	; 0x0f
    299c:	82 95       	swap	r24
    299e:	86 95       	lsr	r24
    29a0:	86 95       	lsr	r24
    29a2:	83 70       	andi	r24, 0x03	; 3
    29a4:	98 2f       	mov	r25, r24
    29a6:	91 70       	andi	r25, 0x01	; 1
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	62 e0       	ldi	r22, 0x02	; 2
    29ac:	49 2f       	mov	r20, r25
    29ae:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 7));
    29b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b4:	98 2f       	mov	r25, r24
    29b6:	99 1f       	adc	r25, r25
    29b8:	99 27       	eor	r25, r25
    29ba:	99 1f       	adc	r25, r25
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	64 e0       	ldi	r22, 0x04	; 4
    29c0:	49 2f       	mov	r20, r25
    29c2:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	62 e0       	ldi	r22, 0x02	; 2
    29ca:	40 e0       	ldi	r20, 0x00	; 0
    29cc:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	62 e0       	ldi	r22, 0x02	; 2
    29d4:	41 e0       	ldi	r20, 0x01	; 1
    29d6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 0));
    29da:	8f 85       	ldd	r24, Y+15	; 0x0f
    29dc:	98 2f       	mov	r25, r24
    29de:	91 70       	andi	r25, 0x01	; 1
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	49 2f       	mov	r20, r25
    29e6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 1));
    29ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ec:	86 95       	lsr	r24
    29ee:	98 2f       	mov	r25, r24
    29f0:	91 70       	andi	r25, 0x01	; 1
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	61 e0       	ldi	r22, 0x01	; 1
    29f6:	49 2f       	mov	r20, r25
    29f8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 2));
    29fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    29fe:	86 95       	lsr	r24
    2a00:	86 95       	lsr	r24
    2a02:	98 2f       	mov	r25, r24
    2a04:	91 70       	andi	r25, 0x01	; 1
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	62 e0       	ldi	r22, 0x02	; 2
    2a0a:	49 2f       	mov	r20, r25
    2a0c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 3));
    2a10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a12:	86 95       	lsr	r24
    2a14:	86 95       	lsr	r24
    2a16:	86 95       	lsr	r24
    2a18:	98 2f       	mov	r25, r24
    2a1a:	91 70       	andi	r25, 0x01	; 1
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	64 e0       	ldi	r22, 0x04	; 4
    2a20:	49 2f       	mov	r20, r25
    2a22:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	62 e0       	ldi	r22, 0x02	; 2
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8SetPinValue>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a0 ea       	ldi	r26, 0xA0	; 160
    2a36:	b0 e4       	ldi	r27, 0x40	; 64
    2a38:	8b 87       	std	Y+11, r24	; 0x0b
    2a3a:	9c 87       	std	Y+12, r25	; 0x0c
    2a3c:	ad 87       	std	Y+13, r26	; 0x0d
    2a3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	4a e7       	ldi	r20, 0x7A	; 122
    2a4e:	55 e4       	ldi	r21, 0x45	; 69
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	8f 83       	std	Y+7, r24	; 0x07
    2a5a:	98 87       	std	Y+8, r25	; 0x08
    2a5c:	a9 87       	std	Y+9, r26	; 0x09
    2a5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a60:	6f 81       	ldd	r22, Y+7	; 0x07
    2a62:	78 85       	ldd	r23, Y+8	; 0x08
    2a64:	89 85       	ldd	r24, Y+9	; 0x09
    2a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e8       	ldi	r20, 0x80	; 128
    2a6e:	5f e3       	ldi	r21, 0x3F	; 63
    2a70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a74:	88 23       	and	r24, r24
    2a76:	2c f4       	brge	.+10     	; 0x2a82 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	3f c0       	rjmp	.+126    	; 0x2b00 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	3f ef       	ldi	r19, 0xFF	; 255
    2a8e:	4f e7       	ldi	r20, 0x7F	; 127
    2a90:	57 e4       	ldi	r21, 0x47	; 71
    2a92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a96:	18 16       	cp	r1, r24
    2a98:	4c f5       	brge	.+82     	; 0x2aec <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e2       	ldi	r20, 0x20	; 32
    2aa8:	51 e4       	ldi	r21, 0x41	; 65
    2aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
    2ac2:	0f c0       	rjmp	.+30     	; 0x2ae2 <LCD_voidWriteChar+0x19c>
    2ac4:	80 e9       	ldi	r24, 0x90	; 144
    2ac6:	91 e0       	ldi	r25, 0x01	; 1
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	f1 f7       	brne	.-4      	; 0x2ad0 <LCD_voidWriteChar+0x18a>
    2ad4:	9c 83       	std	Y+4, r25	; 0x04
    2ad6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	9e 81       	ldd	r25, Y+6	; 0x06
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	69 f7       	brne	.-38     	; 0x2ac4 <LCD_voidWriteChar+0x17e>
    2aea:	14 c0       	rjmp	.+40     	; 0x2b14 <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aec:	6f 81       	ldd	r22, Y+7	; 0x07
    2aee:	78 85       	ldd	r23, Y+8	; 0x08
    2af0:	89 85       	ldd	r24, Y+9	; 0x09
    2af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9e 83       	std	Y+6, r25	; 0x06
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <LCD_voidWriteChar+0x1c6>
    2b10:	9a 83       	std	Y+2, r25	; 0x02
    2b12:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    2b14:	2f 96       	adiw	r28, 0x0f	; 15
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <LCD_voidWriteString+0x6>
    2b2c:	0f 92       	push	r0
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	9b 83       	std	Y+3, r25	; 0x03
    2b34:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    2b36:	19 82       	std	Y+1, r1	; 0x01
    2b38:	0e c0       	rjmp	.+28     	; 0x2b56 <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	9b 81       	ldd	r25, Y+3	; 0x03
    2b44:	fc 01       	movw	r30, r24
    2b46:	e2 0f       	add	r30, r18
    2b48:	f3 1f       	adc	r31, r19
    2b4a:	80 81       	ld	r24, Z
    2b4c:	0e 94 a3 14 	call	0x2946	; 0x2946 <LCD_voidWriteChar>
		index++;
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	8f 5f       	subi	r24, 0xFF	; 255
    2b54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
    2b66:	80 81       	ld	r24, Z
    2b68:	88 23       	and	r24, r24
    2b6a:	39 f7       	brne	.-50     	; 0x2b3a <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	2e 97       	sbiw	r28, 0x0e	; 14
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	69 87       	std	Y+9, r22	; 0x09
    2b92:	7a 87       	std	Y+10, r23	; 0x0a
    2b94:	8b 87       	std	Y+11, r24	; 0x0b
    2b96:	9c 87       	std	Y+12, r25	; 0x0c
    2b98:	5e 87       	std	Y+14, r21	; 0x0e
    2b9a:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    2b9c:	1d 82       	std	Y+5, r1	; 0x05
    2b9e:	1e 82       	std	Y+6, r1	; 0x06
    2ba0:	1f 82       	std	Y+7, r1	; 0x07
    2ba2:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    2ba4:	83 e1       	ldi	r24, 0x13	; 19
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a0 e0       	ldi	r26, 0x00	; 0
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	ab 83       	std	Y+3, r26	; 0x03
    2bb2:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    2bb4:	29 81       	ldd	r18, Y+1	; 0x01
    2bb6:	3a 81       	ldd	r19, Y+2	; 0x02
    2bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	e2 0f       	add	r30, r18
    2bc0:	f3 1f       	adc	r31, r19
    2bc2:	10 82       	st	Z, r1
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	ab 81       	ldd	r26, Y+3	; 0x03
    2bca:	bc 81       	ldd	r27, Y+4	; 0x04
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	a1 09       	sbc	r26, r1
    2bd0:	b1 09       	sbc	r27, r1
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	9a 83       	std	Y+2, r25	; 0x02
    2bd6:	ab 83       	std	Y+3, r26	; 0x03
    2bd8:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    2bda:	89 85       	ldd	r24, Y+9	; 0x09
    2bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bde:	ab 85       	ldd	r26, Y+11	; 0x0b
    2be0:	bc 85       	ldd	r27, Y+12	; 0x0c
    2be2:	bb 23       	and	r27, r27
    2be4:	0c f0       	brlt	.+2      	; 0x2be8 <IntToString+0x70>
    2be6:	4d c0       	rjmp	.+154    	; 0x2c82 <IntToString+0x10a>
		flag = 1;
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	a0 e0       	ldi	r26, 0x00	; 0
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
    2bf2:	9e 83       	std	Y+6, r25	; 0x06
    2bf4:	af 83       	std	Y+7, r26	; 0x07
    2bf6:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    2bf8:	89 85       	ldd	r24, Y+9	; 0x09
    2bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfc:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bfe:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c00:	b0 95       	com	r27
    2c02:	a0 95       	com	r26
    2c04:	90 95       	com	r25
    2c06:	81 95       	neg	r24
    2c08:	9f 4f       	sbci	r25, 0xFF	; 255
    2c0a:	af 4f       	sbci	r26, 0xFF	; 255
    2c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0e:	89 87       	std	Y+9, r24	; 0x09
    2c10:	9a 87       	std	Y+10, r25	; 0x0a
    2c12:	ab 87       	std	Y+11, r26	; 0x0b
    2c14:	bc 87       	std	Y+12, r27	; 0x0c
    2c16:	35 c0       	rjmp	.+106    	; 0x2c82 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    2c18:	29 81       	ldd	r18, Y+1	; 0x01
    2c1a:	3a 81       	ldd	r19, Y+2	; 0x02
    2c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c20:	8c 01       	movw	r16, r24
    2c22:	02 0f       	add	r16, r18
    2c24:	13 1f       	adc	r17, r19
    2c26:	89 85       	ldd	r24, Y+9	; 0x09
    2c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2a:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c2c:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c2e:	2a e0       	ldi	r18, 0x0A	; 10
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	50 e0       	ldi	r21, 0x00	; 0
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__divmodsi4>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	80 5d       	subi	r24, 0xD0	; 208
    2c44:	f8 01       	movw	r30, r16
    2c46:	80 83       	st	Z, r24
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c4e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	a1 09       	sbc	r26, r1
    2c54:	b1 09       	sbc	r27, r1
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	9a 83       	std	Y+2, r25	; 0x02
    2c5a:	ab 83       	std	Y+3, r26	; 0x03
    2c5c:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    2c5e:	89 85       	ldd	r24, Y+9	; 0x09
    2c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c62:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c64:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c66:	2a e0       	ldi	r18, 0x0A	; 10
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	50 e0       	ldi	r21, 0x00	; 0
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__divmodsi4>
    2c76:	da 01       	movw	r26, r20
    2c78:	c9 01       	movw	r24, r18
    2c7a:	89 87       	std	Y+9, r24	; 0x09
    2c7c:	9a 87       	std	Y+10, r25	; 0x0a
    2c7e:	ab 87       	std	Y+11, r26	; 0x0b
    2c80:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    2c82:	89 85       	ldd	r24, Y+9	; 0x09
    2c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c86:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c88:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	a1 05       	cpc	r26, r1
    2c8e:	b1 05       	cpc	r27, r1
    2c90:	19 f6       	brne	.-122    	; 0x2c18 <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	af 81       	ldd	r26, Y+7	; 0x07
    2c98:	b8 85       	ldd	r27, Y+8	; 0x08
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	a1 05       	cpc	r26, r1
    2c9e:	b1 05       	cpc	r27, r1
    2ca0:	a1 f0       	breq	.+40     	; 0x2cca <IntToString+0x152>
		str[i--] = '-';
    2ca2:	29 81       	ldd	r18, Y+1	; 0x01
    2ca4:	3a 81       	ldd	r19, Y+2	; 0x02
    2ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2caa:	fc 01       	movw	r30, r24
    2cac:	e2 0f       	add	r30, r18
    2cae:	f3 1f       	adc	r31, r19
    2cb0:	8d e2       	ldi	r24, 0x2D	; 45
    2cb2:	80 83       	st	Z, r24
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb8:	ab 81       	ldd	r26, Y+3	; 0x03
    2cba:	bc 81       	ldd	r27, Y+4	; 0x04
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	a1 09       	sbc	r26, r1
    2cc0:	b1 09       	sbc	r27, r1
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	9a 83       	std	Y+2, r25	; 0x02
    2cc6:	ab 83       	std	Y+3, r26	; 0x03
    2cc8:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cce:	ab 81       	ldd	r26, Y+3	; 0x03
    2cd0:	bc 81       	ldd	r27, Y+4	; 0x04
    2cd2:	01 96       	adiw	r24, 0x01	; 1
    2cd4:	a1 1d       	adc	r26, r1
    2cd6:	b1 1d       	adc	r27, r1
    2cd8:	89 83       	std	Y+1, r24	; 0x01
    2cda:	9a 83       	std	Y+2, r25	; 0x02
    2cdc:	ab 83       	std	Y+3, r26	; 0x03
    2cde:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    2ce0:	29 81       	ldd	r18, Y+1	; 0x01
    2ce2:	3a 81       	ldd	r19, Y+2	; 0x02
    2ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce8:	82 0f       	add	r24, r18
    2cea:	93 1f       	adc	r25, r19

}
    2cec:	2e 96       	adiw	r28, 0x0e	; 14
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	08 95       	ret

00002d02 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	6a 97       	sbiw	r28, 0x1a	; 26
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	de bf       	out	0x3e, r29	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	cd bf       	out	0x3d, r28	; 61
    2d16:	6f 8b       	std	Y+23, r22	; 0x17
    2d18:	78 8f       	std	Y+24, r23	; 0x18
    2d1a:	89 8f       	std	Y+25, r24	; 0x19
    2d1c:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    2d1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d20:	98 8d       	ldd	r25, Y+24	; 0x18
    2d22:	a9 8d       	ldd	r26, Y+25	; 0x19
    2d24:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	a1 05       	cpc	r26, r1
    2d2a:	b1 05       	cpc	r27, r1
    2d2c:	99 f0       	breq	.+38     	; 0x2d54 <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    2d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d30:	98 8d       	ldd	r25, Y+24	; 0x18
    2d32:	a9 8d       	ldd	r26, Y+25	; 0x19
    2d34:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2d36:	9e 01       	movw	r18, r28
    2d38:	2d 5f       	subi	r18, 0xFD	; 253
    2d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	a9 01       	movw	r20, r18
    2d42:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <IntToString>
    2d46:	9a 83       	std	Y+2, r25	; 0x02
    2d48:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    2d52:	03 c0       	rjmp	.+6      	; 0x2d5a <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    2d54:	80 e3       	ldi	r24, 0x30	; 48
    2d56:	0e 94 a3 14 	call	0x2946	; 0x2946 <LCD_voidWriteChar>
	}
}
    2d5a:	6a 96       	adiw	r28, 0x1a	; 26
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	a6 97       	sbiw	r28, 0x26	; 38
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	6b a3       	std	Y+35, r22	; 0x23
    2d82:	7c a3       	std	Y+36, r23	; 0x24
    2d84:	8d a3       	std	Y+37, r24	; 0x25
    2d86:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    2d88:	6b a1       	ldd	r22, Y+35	; 0x23
    2d8a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d8c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d8e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	48 ec       	ldi	r20, 0xC8	; 200
    2d96:	52 e4       	ldi	r21, 0x42	; 66
    2d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8b 87       	std	Y+11, r24	; 0x0b
    2dae:	9c 87       	std	Y+12, r25	; 0x0c
    2db0:	ad 87       	std	Y+13, r26	; 0x0d
    2db2:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    2db4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2db6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2db8:	ad 85       	ldd	r26, Y+13	; 0x0d
    2dba:	be 85       	ldd	r27, Y+14	; 0x0e
    2dbc:	9e 01       	movw	r18, r28
    2dbe:	21 5f       	subi	r18, 0xF1	; 241
    2dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	a9 01       	movw	r20, r18
    2dc8:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <IntToString>
    2dcc:	9a 87       	std	Y+10, r25	; 0x0a
    2dce:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    2dd0:	1d 82       	std	Y+5, r1	; 0x05
    2dd2:	1e 82       	std	Y+6, r1	; 0x06
    2dd4:	1f 82       	std	Y+7, r1	; 0x07
    2dd6:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    2dd8:	19 82       	std	Y+1, r1	; 0x01
    2dda:	1a 82       	std	Y+2, r1	; 0x02
    2ddc:	1b 82       	std	Y+3, r1	; 0x03
    2dde:	1c 82       	std	Y+4, r1	; 0x04
    2de0:	0b c0       	rjmp	.+22     	; 0x2df8 <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    2de2:	8d 81       	ldd	r24, Y+5	; 0x05
    2de4:	9e 81       	ldd	r25, Y+6	; 0x06
    2de6:	af 81       	ldd	r26, Y+7	; 0x07
    2de8:	b8 85       	ldd	r27, Y+8	; 0x08
    2dea:	01 96       	adiw	r24, 0x01	; 1
    2dec:	a1 1d       	adc	r26, r1
    2dee:	b1 1d       	adc	r27, r1
    2df0:	8d 83       	std	Y+5, r24	; 0x05
    2df2:	9e 83       	std	Y+6, r25	; 0x06
    2df4:	af 83       	std	Y+7, r26	; 0x07
    2df6:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    2df8:	2d 81       	ldd	r18, Y+5	; 0x05
    2dfa:	3e 81       	ldd	r19, Y+6	; 0x06
    2dfc:	89 85       	ldd	r24, Y+9	; 0x09
    2dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e00:	fc 01       	movw	r30, r24
    2e02:	e2 0f       	add	r30, r18
    2e04:	f3 1f       	adc	r31, r19
    2e06:	80 81       	ld	r24, Z
    2e08:	88 23       	and	r24, r24
    2e0a:	59 f7       	brne	.-42     	; 0x2de2 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    2e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e10:	af 81       	ldd	r26, Y+7	; 0x07
    2e12:	b8 85       	ldd	r27, Y+8	; 0x08
    2e14:	02 97       	sbiw	r24, 0x02	; 2
    2e16:	a1 09       	sbc	r26, r1
    2e18:	b1 09       	sbc	r27, r1
    2e1a:	8d 83       	std	Y+5, r24	; 0x05
    2e1c:	9e 83       	std	Y+6, r25	; 0x06
    2e1e:	af 83       	std	Y+7, r26	; 0x07
    2e20:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    2e22:	8d 81       	ldd	r24, Y+5	; 0x05
    2e24:	9e 81       	ldd	r25, Y+6	; 0x06
    2e26:	af 81       	ldd	r26, Y+7	; 0x07
    2e28:	b8 85       	ldd	r27, Y+8	; 0x08
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	a1 05       	cpc	r26, r1
    2e2e:	b1 05       	cpc	r27, r1
    2e30:	49 f5       	brne	.+82     	; 0x2e84 <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    2e32:	80 e3       	ldi	r24, 0x30	; 48
    2e34:	0e 94 a3 14 	call	0x2946	; 0x2946 <LCD_voidWriteChar>
    2e38:	25 c0       	rjmp	.+74     	; 0x2e84 <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    2e3a:	29 81       	ldd	r18, Y+1	; 0x01
    2e3c:	3a 81       	ldd	r19, Y+2	; 0x02
    2e3e:	4b 81       	ldd	r20, Y+3	; 0x03
    2e40:	5c 81       	ldd	r21, Y+4	; 0x04
    2e42:	8d 81       	ldd	r24, Y+5	; 0x05
    2e44:	9e 81       	ldd	r25, Y+6	; 0x06
    2e46:	af 81       	ldd	r26, Y+7	; 0x07
    2e48:	b8 85       	ldd	r27, Y+8	; 0x08
    2e4a:	28 17       	cp	r18, r24
    2e4c:	39 07       	cpc	r19, r25
    2e4e:	4a 07       	cpc	r20, r26
    2e50:	5b 07       	cpc	r21, r27
    2e52:	19 f4       	brne	.+6      	; 0x2e5a <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    2e54:	8e e2       	ldi	r24, 0x2E	; 46
    2e56:	0e 94 a3 14 	call	0x2946	; 0x2946 <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    2e5a:	29 81       	ldd	r18, Y+1	; 0x01
    2e5c:	3a 81       	ldd	r19, Y+2	; 0x02
    2e5e:	89 85       	ldd	r24, Y+9	; 0x09
    2e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e62:	fc 01       	movw	r30, r24
    2e64:	e2 0f       	add	r30, r18
    2e66:	f3 1f       	adc	r31, r19
    2e68:	80 81       	ld	r24, Z
    2e6a:	0e 94 a3 14 	call	0x2946	; 0x2946 <LCD_voidWriteChar>
		counter2++;
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	9a 81       	ldd	r25, Y+2	; 0x02
    2e72:	ab 81       	ldd	r26, Y+3	; 0x03
    2e74:	bc 81       	ldd	r27, Y+4	; 0x04
    2e76:	01 96       	adiw	r24, 0x01	; 1
    2e78:	a1 1d       	adc	r26, r1
    2e7a:	b1 1d       	adc	r27, r1
    2e7c:	89 83       	std	Y+1, r24	; 0x01
    2e7e:	9a 83       	std	Y+2, r25	; 0x02
    2e80:	ab 83       	std	Y+3, r26	; 0x03
    2e82:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    2e84:	29 81       	ldd	r18, Y+1	; 0x01
    2e86:	3a 81       	ldd	r19, Y+2	; 0x02
    2e88:	89 85       	ldd	r24, Y+9	; 0x09
    2e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	e2 0f       	add	r30, r18
    2e90:	f3 1f       	adc	r31, r19
    2e92:	80 81       	ld	r24, Z
    2e94:	88 23       	and	r24, r24
    2e96:	89 f6       	brne	.-94     	; 0x2e3a <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    2e98:	a6 96       	adiw	r28, 0x26	; 38
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	08 95       	ret

00002eaa <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <LCD_voidGoToPosition+0x6>
    2eb0:	0f 92       	push	r0
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	8a 83       	std	Y+2, r24	; 0x02
    2eb8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    2eba:	80 e8       	ldi	r24, 0x80	; 128
    2ebc:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	88 23       	and	r24, r24
    2ec2:	21 f4       	brne	.+8      	; 0x2ecc <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	80 58       	subi	r24, 0x80	; 128
    2ec8:	89 83       	std	Y+1, r24	; 0x01
    2eca:	14 c0       	rjmp	.+40     	; 0x2ef4 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    2ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	21 f4       	brne	.+8      	; 0x2eda <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	80 54       	subi	r24, 0x40	; 64
    2ed6:	89 83       	std	Y+1, r24	; 0x01
    2ed8:	0d c0       	rjmp	.+26     	; 0x2ef4 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	82 30       	cpi	r24, 0x02	; 2
    2ede:	21 f4       	brne	.+8      	; 0x2ee8 <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	8c 56       	subi	r24, 0x6C	; 108
    2ee4:	89 83       	std	Y+1, r24	; 0x01
    2ee6:	06 c0       	rjmp	.+12     	; 0x2ef4 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	83 30       	cpi	r24, 0x03	; 3
    2eec:	19 f4       	brne	.+6      	; 0x2ef4 <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	8c 52       	subi	r24, 0x2C	; 44
    2ef2:	89 83       	std	Y+1, r24	; 0x01
	}

	Set_Bit(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	80 68       	ori	r24, 0x80	; 128
    2ef8:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_voidSendCommand>
}
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <LCD_voidClear>:

void LCD_voidClear(u8 X_Position, u8 Y_Position)
{
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	00 d0       	rcall	.+0      	; 0x2f12 <LCD_voidClear+0x6>
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position,Y_Position);
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	6a 81       	ldd	r22, Y+2	; 0x02
    2f1e:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    2f22:	80 e2       	ldi	r24, 0x20	; 32
    2f24:	0e 94 a3 14 	call	0x2946	; 0x2946 <LCD_voidWriteChar>
}
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <LCD_voidClearLine>:
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <LCD_voidClearLine+0x6>
    2f38:	0f 92       	push	r0
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	8a 83       	std	Y+2, r24	; 0x02
    2f40:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 num = 0; num <= Y_Position; num++)
    2f42:	19 82       	std	Y+1, r1	; 0x01
    2f44:	0a c0       	rjmp	.+20     	; 0x2f5a <LCD_voidClearLine+0x28>
	{
		LCD_voidGoToPosition(X_Position,num);
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	69 81       	ldd	r22, Y+1	; 0x01
    2f4a:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
		LCD_voidWriteChar(' ');
    2f4e:	80 e2       	ldi	r24, 0x20	; 32
    2f50:	0e 94 a3 14 	call	0x2946	; 0x2946 <LCD_voidWriteChar>
	LCD_voidGoToPosition(X_Position,Y_Position);
	LCD_voidWriteChar(' ');
}
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
	for(u8 num = 0; num <= Y_Position; num++)
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	8f 5f       	subi	r24, 0xFF	; 255
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	99 81       	ldd	r25, Y+1	; 0x01
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	89 17       	cp	r24, r25
    2f60:	90 f7       	brcc	.-28     	; 0x2f46 <LCD_voidClearLine+0x14>
	{
		LCD_voidGoToPosition(X_Position,num);
		LCD_voidWriteChar(' ');
	}
}
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	cf 91       	pop	r28
    2f6a:	df 91       	pop	r29
    2f6c:	08 95       	ret

00002f6e <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	27 97       	sbiw	r28, 0x07	; 7
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	9c 83       	std	Y+4, r25	; 0x04
    2f84:	8b 83       	std	Y+3, r24	; 0x03
    2f86:	6d 83       	std	Y+5, r22	; 0x05
    2f88:	4e 83       	std	Y+6, r20	; 0x06
    2f8a:	2f 83       	std	Y+7, r18	; 0x07

	LCD_voidGoToPosition(row,column);
    2f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f90:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	0e 94 a3 14 	call	0x2946	; 0x2946 <LCD_voidWriteChar>
	u8 address = 0;
    2f9a:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    2f9c:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    2f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa0:	88 30       	cpi	r24, 0x08	; 8
    2fa2:	30 f5       	brcc	.+76     	; 0x2ff0 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    2fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa6:	88 2f       	mov	r24, r24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	88 0f       	add	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	88 0f       	add	r24, r24
    2fb4:	99 1f       	adc	r25, r25
    2fb6:	8a 83       	std	Y+2, r24	; 0x02
		Set_Bit(address,6);
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	80 64       	ori	r24, 0x40	; 64
    2fbc:	8a 83       	std	Y+2, r24	; 0x02
		Clear_Bit(address,7);
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	8f 77       	andi	r24, 0x7F	; 127
    2fc2:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    2fca:	19 82       	std	Y+1, r1	; 0x01
    2fcc:	0e c0       	rjmp	.+28     	; 0x2fea <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	28 2f       	mov	r18, r24
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd8:	fc 01       	movw	r30, r24
    2fda:	e2 0f       	add	r30, r18
    2fdc:	f3 1f       	adc	r31, r19
    2fde:	80 81       	ld	r24, Z
    2fe0:	0e 94 a3 14 	call	0x2946	; 0x2946 <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		Set_Bit(address,6);
		Clear_Bit(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	8f 5f       	subi	r24, 0xFF	; 255
    2fe8:	89 83       	std	Y+1, r24	; 0x01
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	88 30       	cpi	r24, 0x08	; 8
    2fee:	78 f3       	brcs	.-34     	; 0x2fce <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_voidSendCommand>
}
    2ff6:	27 96       	adiw	r28, 0x07	; 7
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <MoveLeft>:
u8 line[8] = {0b10000,0b10000,0b10000,0b10000,0b10000,0b10000,0b10000};

#define Delay_Time   1000

void MoveLeft()
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	6d 97       	sbiw	r28, 0x1d	; 29
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
	u8 start = 10;
    301c:	8a e0       	ldi	r24, 0x0A	; 10
    301e:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_voidGoToPosition(1,0);
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
		LCD_voidWriteString((u8*)"5od yalaa");
    3028:	80 e6       	ldi	r24, 0x60	; 96
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	aa e7       	ldi	r26, 0x7A	; 122
    3036:	b4 e4       	ldi	r27, 0x44	; 68
    3038:	89 8f       	std	Y+25, r24	; 0x19
    303a:	9a 8f       	std	Y+26, r25	; 0x1a
    303c:	ab 8f       	std	Y+27, r26	; 0x1b
    303e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3040:	69 8d       	ldd	r22, Y+25	; 0x19
    3042:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3044:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3046:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	4a e7       	ldi	r20, 0x7A	; 122
    304e:	55 e4       	ldi	r21, 0x45	; 69
    3050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	8d 8b       	std	Y+21, r24	; 0x15
    305a:	9e 8b       	std	Y+22, r25	; 0x16
    305c:	af 8b       	std	Y+23, r26	; 0x17
    305e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3060:	6d 89       	ldd	r22, Y+21	; 0x15
    3062:	7e 89       	ldd	r23, Y+22	; 0x16
    3064:	8f 89       	ldd	r24, Y+23	; 0x17
    3066:	98 8d       	ldd	r25, Y+24	; 0x18
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e8       	ldi	r20, 0x80	; 128
    306e:	5f e3       	ldi	r21, 0x3F	; 63
    3070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3074:	88 23       	and	r24, r24
    3076:	2c f4       	brge	.+10     	; 0x3082 <MoveLeft+0x7a>
		__ticks = 1;
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	9c 8b       	std	Y+20, r25	; 0x14
    307e:	8b 8b       	std	Y+19, r24	; 0x13
    3080:	3f c0       	rjmp	.+126    	; 0x3100 <MoveLeft+0xf8>
	else if (__tmp > 65535)
    3082:	6d 89       	ldd	r22, Y+21	; 0x15
    3084:	7e 89       	ldd	r23, Y+22	; 0x16
    3086:	8f 89       	ldd	r24, Y+23	; 0x17
    3088:	98 8d       	ldd	r25, Y+24	; 0x18
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	3f ef       	ldi	r19, 0xFF	; 255
    308e:	4f e7       	ldi	r20, 0x7F	; 127
    3090:	57 e4       	ldi	r21, 0x47	; 71
    3092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3096:	18 16       	cp	r1, r24
    3098:	4c f5       	brge	.+82     	; 0x30ec <MoveLeft+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309a:	69 8d       	ldd	r22, Y+25	; 0x19
    309c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    309e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	40 e2       	ldi	r20, 0x20	; 32
    30a8:	51 e4       	ldi	r21, 0x41	; 65
    30aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	bc 01       	movw	r22, r24
    30b4:	cd 01       	movw	r24, r26
    30b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	9c 8b       	std	Y+20, r25	; 0x14
    30c0:	8b 8b       	std	Y+19, r24	; 0x13
    30c2:	0f c0       	rjmp	.+30     	; 0x30e2 <MoveLeft+0xda>
    30c4:	80 e9       	ldi	r24, 0x90	; 144
    30c6:	91 e0       	ldi	r25, 0x01	; 1
    30c8:	9a 8b       	std	Y+18, r25	; 0x12
    30ca:	89 8b       	std	Y+17, r24	; 0x11
    30cc:	89 89       	ldd	r24, Y+17	; 0x11
    30ce:	9a 89       	ldd	r25, Y+18	; 0x12
    30d0:	01 97       	sbiw	r24, 0x01	; 1
    30d2:	f1 f7       	brne	.-4      	; 0x30d0 <MoveLeft+0xc8>
    30d4:	9a 8b       	std	Y+18, r25	; 0x12
    30d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d8:	8b 89       	ldd	r24, Y+19	; 0x13
    30da:	9c 89       	ldd	r25, Y+20	; 0x14
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	9c 8b       	std	Y+20, r25	; 0x14
    30e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e2:	8b 89       	ldd	r24, Y+19	; 0x13
    30e4:	9c 89       	ldd	r25, Y+20	; 0x14
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	69 f7       	brne	.-38     	; 0x30c4 <MoveLeft+0xbc>
    30ea:	14 c0       	rjmp	.+40     	; 0x3114 <MoveLeft+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ec:	6d 89       	ldd	r22, Y+21	; 0x15
    30ee:	7e 89       	ldd	r23, Y+22	; 0x16
    30f0:	8f 89       	ldd	r24, Y+23	; 0x17
    30f2:	98 8d       	ldd	r25, Y+24	; 0x18
    30f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	9c 8b       	std	Y+20, r25	; 0x14
    30fe:	8b 8b       	std	Y+19, r24	; 0x13
    3100:	8b 89       	ldd	r24, Y+19	; 0x13
    3102:	9c 89       	ldd	r25, Y+20	; 0x14
    3104:	98 8b       	std	Y+16, r25	; 0x10
    3106:	8f 87       	std	Y+15, r24	; 0x0f
    3108:	8f 85       	ldd	r24, Y+15	; 0x0f
    310a:	98 89       	ldd	r25, Y+16	; 0x10
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	f1 f7       	brne	.-4      	; 0x310c <MoveLeft+0x104>
    3110:	98 8b       	std	Y+16, r25	; 0x10
    3112:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(Delay_Time);

	do
	{
		LCD_voidDisplaySpecialChar(P1,0,0,start);
    3114:	88 e7       	ldi	r24, 0x78	; 120
    3116:	92 e0       	ldi	r25, 0x02	; 2
    3118:	60 e0       	ldi	r22, 0x00	; 0
    311a:	40 e0       	ldi	r20, 0x00	; 0
    311c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    311e:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
		LCD_voidDisplaySpecialChar(P1,0,0,start-1);
    3122:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3124:	28 2f       	mov	r18, r24
    3126:	21 50       	subi	r18, 0x01	; 1
    3128:	88 e7       	ldi	r24, 0x78	; 120
    312a:	92 e0       	ldi	r25, 0x02	; 2
    312c:	60 e0       	ldi	r22, 0x00	; 0
    312e:	40 e0       	ldi	r20, 0x00	; 0
    3130:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	af ea       	ldi	r26, 0xAF	; 175
    313a:	b3 e4       	ldi	r27, 0x43	; 67
    313c:	8b 87       	std	Y+11, r24	; 0x0b
    313e:	9c 87       	std	Y+12, r25	; 0x0c
    3140:	ad 87       	std	Y+13, r26	; 0x0d
    3142:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3144:	6b 85       	ldd	r22, Y+11	; 0x0b
    3146:	7c 85       	ldd	r23, Y+12	; 0x0c
    3148:	8d 85       	ldd	r24, Y+13	; 0x0d
    314a:	9e 85       	ldd	r25, Y+14	; 0x0e
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	4a e7       	ldi	r20, 0x7A	; 122
    3152:	55 e4       	ldi	r21, 0x45	; 69
    3154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	8f 83       	std	Y+7, r24	; 0x07
    315e:	98 87       	std	Y+8, r25	; 0x08
    3160:	a9 87       	std	Y+9, r26	; 0x09
    3162:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3164:	6f 81       	ldd	r22, Y+7	; 0x07
    3166:	78 85       	ldd	r23, Y+8	; 0x08
    3168:	89 85       	ldd	r24, Y+9	; 0x09
    316a:	9a 85       	ldd	r25, Y+10	; 0x0a
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	40 e8       	ldi	r20, 0x80	; 128
    3172:	5f e3       	ldi	r21, 0x3F	; 63
    3174:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3178:	88 23       	and	r24, r24
    317a:	2c f4       	brge	.+10     	; 0x3186 <MoveLeft+0x17e>
		__ticks = 1;
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	9e 83       	std	Y+6, r25	; 0x06
    3182:	8d 83       	std	Y+5, r24	; 0x05
    3184:	3f c0       	rjmp	.+126    	; 0x3204 <MoveLeft+0x1fc>
	else if (__tmp > 65535)
    3186:	6f 81       	ldd	r22, Y+7	; 0x07
    3188:	78 85       	ldd	r23, Y+8	; 0x08
    318a:	89 85       	ldd	r24, Y+9	; 0x09
    318c:	9a 85       	ldd	r25, Y+10	; 0x0a
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	3f ef       	ldi	r19, 0xFF	; 255
    3192:	4f e7       	ldi	r20, 0x7F	; 127
    3194:	57 e4       	ldi	r21, 0x47	; 71
    3196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    319a:	18 16       	cp	r1, r24
    319c:	4c f5       	brge	.+82     	; 0x31f0 <MoveLeft+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319e:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e2       	ldi	r20, 0x20	; 32
    31ac:	51 e4       	ldi	r21, 0x41	; 65
    31ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	bc 01       	movw	r22, r24
    31b8:	cd 01       	movw	r24, r26
    31ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	9e 83       	std	Y+6, r25	; 0x06
    31c4:	8d 83       	std	Y+5, r24	; 0x05
    31c6:	0f c0       	rjmp	.+30     	; 0x31e6 <MoveLeft+0x1de>
    31c8:	80 e9       	ldi	r24, 0x90	; 144
    31ca:	91 e0       	ldi	r25, 0x01	; 1
    31cc:	9c 83       	std	Y+4, r25	; 0x04
    31ce:	8b 83       	std	Y+3, r24	; 0x03
    31d0:	8b 81       	ldd	r24, Y+3	; 0x03
    31d2:	9c 81       	ldd	r25, Y+4	; 0x04
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	f1 f7       	brne	.-4      	; 0x31d4 <MoveLeft+0x1cc>
    31d8:	9c 83       	std	Y+4, r25	; 0x04
    31da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31dc:	8d 81       	ldd	r24, Y+5	; 0x05
    31de:	9e 81       	ldd	r25, Y+6	; 0x06
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	9e 83       	std	Y+6, r25	; 0x06
    31e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e6:	8d 81       	ldd	r24, Y+5	; 0x05
    31e8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ea:	00 97       	sbiw	r24, 0x00	; 0
    31ec:	69 f7       	brne	.-38     	; 0x31c8 <MoveLeft+0x1c0>
    31ee:	14 c0       	rjmp	.+40     	; 0x3218 <MoveLeft+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f0:	6f 81       	ldd	r22, Y+7	; 0x07
    31f2:	78 85       	ldd	r23, Y+8	; 0x08
    31f4:	89 85       	ldd	r24, Y+9	; 0x09
    31f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	9e 83       	std	Y+6, r25	; 0x06
    3202:	8d 83       	std	Y+5, r24	; 0x05
    3204:	8d 81       	ldd	r24, Y+5	; 0x05
    3206:	9e 81       	ldd	r25, Y+6	; 0x06
    3208:	9a 83       	std	Y+2, r25	; 0x02
    320a:	89 83       	std	Y+1, r24	; 0x01
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	9a 81       	ldd	r25, Y+2	; 0x02
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	f1 f7       	brne	.-4      	; 0x3210 <MoveLeft+0x208>
    3214:	9a 83       	std	Y+2, r25	; 0x02
    3216:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(350);
		LCD_voidClear(0,start);
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    321c:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_voidClear>
		LCD_voidClear(0,start-1);
    3220:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3222:	98 2f       	mov	r25, r24
    3224:	91 50       	subi	r25, 0x01	; 1
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	69 2f       	mov	r22, r25
    322a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_voidClear>
		start++;
    322e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3230:	8f 5f       	subi	r24, 0xFF	; 255
    3232:	8d 8f       	std	Y+29, r24	; 0x1d
		if(start == 17)
    3234:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3236:	81 31       	cpi	r24, 0x11	; 17
    3238:	41 f4       	brne	.+16     	; 0x324a <MoveLeft+0x242>
		{
			LCD_voidGoToPosition(2,0);
    323a:	82 e0       	ldi	r24, 0x02	; 2
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
			LCD_voidWriteString((u8*)"5od t3laa");
    3242:	8a e6       	ldi	r24, 0x6A	; 106
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
		}

	}while(start < 19);
    324a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    324c:	83 31       	cpi	r24, 0x13	; 19
    324e:	08 f4       	brcc	.+2      	; 0x3252 <MoveLeft+0x24a>
    3250:	61 cf       	rjmp	.-318    	; 0x3114 <MoveLeft+0x10c>
}
    3252:	6d 96       	adiw	r28, 0x1d	; 29
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	08 95       	ret

00003264 <MoveRight>:

void MoveRight()
{
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	2f 97       	sbiw	r28, 0x0f	; 15
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	de bf       	out	0x3e, r29	; 62
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	cd bf       	out	0x3d, r28	; 61
	u8 start = 0;
    3278:	1f 86       	std	Y+15, r1	; 0x0f
	do
	{
		LCD_voidGoToPosition(0,0);
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	60 e0       	ldi	r22, 0x00	; 0
    327e:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
		LCD_voidDisplaySpecialChar(P1,0,0,start);
    3282:	88 e7       	ldi	r24, 0x78	; 120
    3284:	92 e0       	ldi	r25, 0x02	; 2
    3286:	60 e0       	ldi	r22, 0x00	; 0
    3288:	40 e0       	ldi	r20, 0x00	; 0
    328a:	2f 85       	ldd	r18, Y+15	; 0x0f
    328c:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
		LCD_voidDisplaySpecialChar(P1,0,0,(19 - start));
    3290:	93 e1       	ldi	r25, 0x13	; 19
    3292:	8f 85       	ldd	r24, Y+15	; 0x0f
    3294:	29 2f       	mov	r18, r25
    3296:	28 1b       	sub	r18, r24
    3298:	88 e7       	ldi	r24, 0x78	; 120
    329a:	92 e0       	ldi	r25, 0x02	; 2
    329c:	60 e0       	ldi	r22, 0x00	; 0
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	af ea       	ldi	r26, 0xAF	; 175
    32aa:	b3 e4       	ldi	r27, 0x43	; 67
    32ac:	8b 87       	std	Y+11, r24	; 0x0b
    32ae:	9c 87       	std	Y+12, r25	; 0x0c
    32b0:	ad 87       	std	Y+13, r26	; 0x0d
    32b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4a e7       	ldi	r20, 0x7A	; 122
    32c2:	55 e4       	ldi	r21, 0x45	; 69
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	8f 83       	std	Y+7, r24	; 0x07
    32ce:	98 87       	std	Y+8, r25	; 0x08
    32d0:	a9 87       	std	Y+9, r26	; 0x09
    32d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32d4:	6f 81       	ldd	r22, Y+7	; 0x07
    32d6:	78 85       	ldd	r23, Y+8	; 0x08
    32d8:	89 85       	ldd	r24, Y+9	; 0x09
    32da:	9a 85       	ldd	r25, Y+10	; 0x0a
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e8       	ldi	r20, 0x80	; 128
    32e2:	5f e3       	ldi	r21, 0x3F	; 63
    32e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e8:	88 23       	and	r24, r24
    32ea:	2c f4       	brge	.+10     	; 0x32f6 <MoveRight+0x92>
		__ticks = 1;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	9e 83       	std	Y+6, r25	; 0x06
    32f2:	8d 83       	std	Y+5, r24	; 0x05
    32f4:	3f c0       	rjmp	.+126    	; 0x3374 <MoveRight+0x110>
	else if (__tmp > 65535)
    32f6:	6f 81       	ldd	r22, Y+7	; 0x07
    32f8:	78 85       	ldd	r23, Y+8	; 0x08
    32fa:	89 85       	ldd	r24, Y+9	; 0x09
    32fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	4c f5       	brge	.+82     	; 0x3360 <MoveRight+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3310:	7c 85       	ldd	r23, Y+12	; 0x0c
    3312:	8d 85       	ldd	r24, Y+13	; 0x0d
    3314:	9e 85       	ldd	r25, Y+14	; 0x0e
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e2       	ldi	r20, 0x20	; 32
    331c:	51 e4       	ldi	r21, 0x41	; 65
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	bc 01       	movw	r22, r24
    3328:	cd 01       	movw	r24, r26
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9e 83       	std	Y+6, r25	; 0x06
    3334:	8d 83       	std	Y+5, r24	; 0x05
    3336:	0f c0       	rjmp	.+30     	; 0x3356 <MoveRight+0xf2>
    3338:	80 e9       	ldi	r24, 0x90	; 144
    333a:	91 e0       	ldi	r25, 0x01	; 1
    333c:	9c 83       	std	Y+4, r25	; 0x04
    333e:	8b 83       	std	Y+3, r24	; 0x03
    3340:	8b 81       	ldd	r24, Y+3	; 0x03
    3342:	9c 81       	ldd	r25, Y+4	; 0x04
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <MoveRight+0xe0>
    3348:	9c 83       	std	Y+4, r25	; 0x04
    334a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	9e 81       	ldd	r25, Y+6	; 0x06
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	9e 83       	std	Y+6, r25	; 0x06
    3354:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3356:	8d 81       	ldd	r24, Y+5	; 0x05
    3358:	9e 81       	ldd	r25, Y+6	; 0x06
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	69 f7       	brne	.-38     	; 0x3338 <MoveRight+0xd4>
    335e:	14 c0       	rjmp	.+40     	; 0x3388 <MoveRight+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3360:	6f 81       	ldd	r22, Y+7	; 0x07
    3362:	78 85       	ldd	r23, Y+8	; 0x08
    3364:	89 85       	ldd	r24, Y+9	; 0x09
    3366:	9a 85       	ldd	r25, Y+10	; 0x0a
    3368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	9e 83       	std	Y+6, r25	; 0x06
    3372:	8d 83       	std	Y+5, r24	; 0x05
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	9e 81       	ldd	r25, Y+6	; 0x06
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	9a 81       	ldd	r25, Y+2	; 0x02
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <MoveRight+0x11c>
    3384:	9a 83       	std	Y+2, r25	; 0x02
    3386:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(350);
		LCD_voidClear(0,start);
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	6f 85       	ldd	r22, Y+15	; 0x0f
    338c:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_voidClear>
		LCD_voidClear(0,(19 - start));
    3390:	93 e1       	ldi	r25, 0x13	; 19
    3392:	8f 85       	ldd	r24, Y+15	; 0x0f
    3394:	98 1b       	sub	r25, r24
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	69 2f       	mov	r22, r25
    339a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_voidClear>
		start++;
    339e:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a0:	8f 5f       	subi	r24, 0xFF	; 255
    33a2:	8f 87       	std	Y+15, r24	; 0x0f

	}while(start < 9);
    33a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a6:	89 30       	cpi	r24, 0x09	; 9
    33a8:	08 f4       	brcc	.+2      	; 0x33ac <MoveRight+0x148>
    33aa:	67 cf       	rjmp	.-306    	; 0x327a <MoveRight+0x16>

	LCD_voidDisplaySpecialChar(P1,0,0,start);
    33ac:	88 e7       	ldi	r24, 0x78	; 120
    33ae:	92 e0       	ldi	r25, 0x02	; 2
    33b0:	60 e0       	ldi	r22, 0x00	; 0
    33b2:	40 e0       	ldi	r20, 0x00	; 0
    33b4:	2f 85       	ldd	r18, Y+15	; 0x0f
    33b6:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
	LCD_voidDisplaySpecialChar(P1,0,0,(19 - start));
    33ba:	93 e1       	ldi	r25, 0x13	; 19
    33bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    33be:	29 2f       	mov	r18, r25
    33c0:	28 1b       	sub	r18, r24
    33c2:	88 e7       	ldi	r24, 0x78	; 120
    33c4:	92 e0       	ldi	r25, 0x02	; 2
    33c6:	60 e0       	ldi	r22, 0x00	; 0
    33c8:	40 e0       	ldi	r20, 0x00	; 0
    33ca:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
	LCD_voidDisplaySpecialChar(line,2,1,10);
    33ce:	80 e9       	ldi	r24, 0x90	; 144
    33d0:	92 e0       	ldi	r25, 0x02	; 2
    33d2:	62 e0       	ldi	r22, 0x02	; 2
    33d4:	41 e0       	ldi	r20, 0x01	; 1
    33d6:	2a e0       	ldi	r18, 0x0A	; 10
    33d8:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
	LCD_voidDisplaySpecialChar(line,2,2,10);
    33dc:	80 e9       	ldi	r24, 0x90	; 144
    33de:	92 e0       	ldi	r25, 0x02	; 2
    33e0:	62 e0       	ldi	r22, 0x02	; 2
    33e2:	42 e0       	ldi	r20, 0x02	; 2
    33e4:	2a e0       	ldi	r18, 0x0A	; 10
    33e6:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
	LCD_voidDisplaySpecialChar(line,2,3,10);
    33ea:	80 e9       	ldi	r24, 0x90	; 144
    33ec:	92 e0       	ldi	r25, 0x02	; 2
    33ee:	62 e0       	ldi	r22, 0x02	; 2
    33f0:	43 e0       	ldi	r20, 0x03	; 3
    33f2:	2a e0       	ldi	r18, 0x0A	; 10
    33f4:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
}
    33f8:	2f 96       	adiw	r28, 0x0f	; 15
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	cf 91       	pop	r28
    3406:	df 91       	pop	r29
    3408:	08 95       	ret

0000340a <Write>:

void Write()
{
    340a:	0f 93       	push	r16
    340c:	1f 93       	push	r17
    340e:	df 93       	push	r29
    3410:	cf 93       	push	r28
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62
    3416:	c2 5d       	subi	r28, 0xD2	; 210
    3418:	d0 40       	sbci	r29, 0x00	; 0
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
	LCD_voidGoToPosition(1,0);
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"Eh da...");
    342c:	84 e7       	ldi	r24, 0x74	; 116
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    3434:	fe 01       	movw	r30, r28
    3436:	e1 53       	subi	r30, 0x31	; 49
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	aa e7       	ldi	r26, 0x7A	; 122
    3440:	b4 e4       	ldi	r27, 0x44	; 68
    3442:	80 83       	st	Z, r24
    3444:	91 83       	std	Z+1, r25	; 0x01
    3446:	a2 83       	std	Z+2, r26	; 0x02
    3448:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344a:	8e 01       	movw	r16, r28
    344c:	05 53       	subi	r16, 0x35	; 53
    344e:	1f 4f       	sbci	r17, 0xFF	; 255
    3450:	fe 01       	movw	r30, r28
    3452:	e1 53       	subi	r30, 0x31	; 49
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	60 81       	ld	r22, Z
    3458:	71 81       	ldd	r23, Z+1	; 0x01
    345a:	82 81       	ldd	r24, Z+2	; 0x02
    345c:	93 81       	ldd	r25, Z+3	; 0x03
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	4a e7       	ldi	r20, 0x7A	; 122
    3464:	55 e4       	ldi	r21, 0x45	; 69
    3466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	f8 01       	movw	r30, r16
    3470:	80 83       	st	Z, r24
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	a2 83       	std	Z+2, r26	; 0x02
    3476:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3478:	fe 01       	movw	r30, r28
    347a:	e5 53       	subi	r30, 0x35	; 53
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	60 81       	ld	r22, Z
    3480:	71 81       	ldd	r23, Z+1	; 0x01
    3482:	82 81       	ldd	r24, Z+2	; 0x02
    3484:	93 81       	ldd	r25, Z+3	; 0x03
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e8       	ldi	r20, 0x80	; 128
    348c:	5f e3       	ldi	r21, 0x3F	; 63
    348e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3492:	88 23       	and	r24, r24
    3494:	44 f4       	brge	.+16     	; 0x34a6 <Write+0x9c>
		__ticks = 1;
    3496:	fe 01       	movw	r30, r28
    3498:	e7 53       	subi	r30, 0x37	; 55
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	91 83       	std	Z+1, r25	; 0x01
    34a2:	80 83       	st	Z, r24
    34a4:	64 c0       	rjmp	.+200    	; 0x356e <Write+0x164>
	else if (__tmp > 65535)
    34a6:	fe 01       	movw	r30, r28
    34a8:	e5 53       	subi	r30, 0x35	; 53
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	60 81       	ld	r22, Z
    34ae:	71 81       	ldd	r23, Z+1	; 0x01
    34b0:	82 81       	ldd	r24, Z+2	; 0x02
    34b2:	93 81       	ldd	r25, Z+3	; 0x03
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	3f ef       	ldi	r19, 0xFF	; 255
    34b8:	4f e7       	ldi	r20, 0x7F	; 127
    34ba:	57 e4       	ldi	r21, 0x47	; 71
    34bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34c0:	18 16       	cp	r1, r24
    34c2:	0c f0       	brlt	.+2      	; 0x34c6 <Write+0xbc>
    34c4:	43 c0       	rjmp	.+134    	; 0x354c <Write+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c6:	fe 01       	movw	r30, r28
    34c8:	e1 53       	subi	r30, 0x31	; 49
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	60 81       	ld	r22, Z
    34ce:	71 81       	ldd	r23, Z+1	; 0x01
    34d0:	82 81       	ldd	r24, Z+2	; 0x02
    34d2:	93 81       	ldd	r25, Z+3	; 0x03
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	40 e2       	ldi	r20, 0x20	; 32
    34da:	51 e4       	ldi	r21, 0x41	; 65
    34dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	8e 01       	movw	r16, r28
    34e6:	07 53       	subi	r16, 0x37	; 55
    34e8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ea:	bc 01       	movw	r22, r24
    34ec:	cd 01       	movw	r24, r26
    34ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	f8 01       	movw	r30, r16
    34f8:	91 83       	std	Z+1, r25	; 0x01
    34fa:	80 83       	st	Z, r24
    34fc:	1f c0       	rjmp	.+62     	; 0x353c <Write+0x132>
    34fe:	fe 01       	movw	r30, r28
    3500:	e9 53       	subi	r30, 0x39	; 57
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	80 e9       	ldi	r24, 0x90	; 144
    3506:	91 e0       	ldi	r25, 0x01	; 1
    3508:	91 83       	std	Z+1, r25	; 0x01
    350a:	80 83       	st	Z, r24
    350c:	fe 01       	movw	r30, r28
    350e:	e9 53       	subi	r30, 0x39	; 57
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	80 81       	ld	r24, Z
    3514:	91 81       	ldd	r25, Z+1	; 0x01
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <Write+0x10c>
    351a:	fe 01       	movw	r30, r28
    351c:	e9 53       	subi	r30, 0x39	; 57
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3524:	de 01       	movw	r26, r28
    3526:	a7 53       	subi	r26, 0x37	; 55
    3528:	bf 4f       	sbci	r27, 0xFF	; 255
    352a:	fe 01       	movw	r30, r28
    352c:	e7 53       	subi	r30, 0x37	; 55
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	11 96       	adiw	r26, 0x01	; 1
    3538:	9c 93       	st	X, r25
    353a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    353c:	fe 01       	movw	r30, r28
    353e:	e7 53       	subi	r30, 0x37	; 55
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	80 81       	ld	r24, Z
    3544:	91 81       	ldd	r25, Z+1	; 0x01
    3546:	00 97       	sbiw	r24, 0x00	; 0
    3548:	d1 f6       	brne	.-76     	; 0x34fe <Write+0xf4>
    354a:	27 c0       	rjmp	.+78     	; 0x359a <Write+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    354c:	8e 01       	movw	r16, r28
    354e:	07 53       	subi	r16, 0x37	; 55
    3550:	1f 4f       	sbci	r17, 0xFF	; 255
    3552:	fe 01       	movw	r30, r28
    3554:	e5 53       	subi	r30, 0x35	; 53
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	60 81       	ld	r22, Z
    355a:	71 81       	ldd	r23, Z+1	; 0x01
    355c:	82 81       	ldd	r24, Z+2	; 0x02
    355e:	93 81       	ldd	r25, Z+3	; 0x03
    3560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	f8 01       	movw	r30, r16
    356a:	91 83       	std	Z+1, r25	; 0x01
    356c:	80 83       	st	Z, r24
    356e:	de 01       	movw	r26, r28
    3570:	ab 53       	subi	r26, 0x3B	; 59
    3572:	bf 4f       	sbci	r27, 0xFF	; 255
    3574:	fe 01       	movw	r30, r28
    3576:	e7 53       	subi	r30, 0x37	; 55
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	80 81       	ld	r24, Z
    357c:	91 81       	ldd	r25, Z+1	; 0x01
    357e:	8d 93       	st	X+, r24
    3580:	9c 93       	st	X, r25
    3582:	fe 01       	movw	r30, r28
    3584:	eb 53       	subi	r30, 0x3B	; 59
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	80 81       	ld	r24, Z
    358a:	91 81       	ldd	r25, Z+1	; 0x01
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	f1 f7       	brne	.-4      	; 0x358c <Write+0x182>
    3590:	fe 01       	movw	r30, r28
    3592:	eb 53       	subi	r30, 0x3B	; 59
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	91 83       	std	Z+1, r25	; 0x01
    3598:	80 83       	st	Z, r24
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,11);
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	6b e0       	ldi	r22, 0x0B	; 11
    359e:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"Enta mn");
    35a2:	8d e7       	ldi	r24, 0x7D	; 125
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    35aa:	fe 01       	movw	r30, r28
    35ac:	ef 53       	subi	r30, 0x3F	; 63
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	aa e7       	ldi	r26, 0x7A	; 122
    35b6:	b4 e4       	ldi	r27, 0x44	; 68
    35b8:	80 83       	st	Z, r24
    35ba:	91 83       	std	Z+1, r25	; 0x01
    35bc:	a2 83       	std	Z+2, r26	; 0x02
    35be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c0:	8e 01       	movw	r16, r28
    35c2:	03 54       	subi	r16, 0x43	; 67
    35c4:	1f 4f       	sbci	r17, 0xFF	; 255
    35c6:	fe 01       	movw	r30, r28
    35c8:	ef 53       	subi	r30, 0x3F	; 63
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	60 81       	ld	r22, Z
    35ce:	71 81       	ldd	r23, Z+1	; 0x01
    35d0:	82 81       	ldd	r24, Z+2	; 0x02
    35d2:	93 81       	ldd	r25, Z+3	; 0x03
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	4a e7       	ldi	r20, 0x7A	; 122
    35da:	55 e4       	ldi	r21, 0x45	; 69
    35dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	f8 01       	movw	r30, r16
    35e6:	80 83       	st	Z, r24
    35e8:	91 83       	std	Z+1, r25	; 0x01
    35ea:	a2 83       	std	Z+2, r26	; 0x02
    35ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35ee:	fe 01       	movw	r30, r28
    35f0:	e3 54       	subi	r30, 0x43	; 67
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	60 81       	ld	r22, Z
    35f6:	71 81       	ldd	r23, Z+1	; 0x01
    35f8:	82 81       	ldd	r24, Z+2	; 0x02
    35fa:	93 81       	ldd	r25, Z+3	; 0x03
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	40 e8       	ldi	r20, 0x80	; 128
    3602:	5f e3       	ldi	r21, 0x3F	; 63
    3604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3608:	88 23       	and	r24, r24
    360a:	44 f4       	brge	.+16     	; 0x361c <Write+0x212>
		__ticks = 1;
    360c:	fe 01       	movw	r30, r28
    360e:	e5 54       	subi	r30, 0x45	; 69
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	80 83       	st	Z, r24
    361a:	64 c0       	rjmp	.+200    	; 0x36e4 <Write+0x2da>
	else if (__tmp > 65535)
    361c:	fe 01       	movw	r30, r28
    361e:	e3 54       	subi	r30, 0x43	; 67
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	60 81       	ld	r22, Z
    3624:	71 81       	ldd	r23, Z+1	; 0x01
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	3f ef       	ldi	r19, 0xFF	; 255
    362e:	4f e7       	ldi	r20, 0x7F	; 127
    3630:	57 e4       	ldi	r21, 0x47	; 71
    3632:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3636:	18 16       	cp	r1, r24
    3638:	0c f0       	brlt	.+2      	; 0x363c <Write+0x232>
    363a:	43 c0       	rjmp	.+134    	; 0x36c2 <Write+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363c:	fe 01       	movw	r30, r28
    363e:	ef 53       	subi	r30, 0x3F	; 63
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	60 81       	ld	r22, Z
    3644:	71 81       	ldd	r23, Z+1	; 0x01
    3646:	82 81       	ldd	r24, Z+2	; 0x02
    3648:	93 81       	ldd	r25, Z+3	; 0x03
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e2       	ldi	r20, 0x20	; 32
    3650:	51 e4       	ldi	r21, 0x41	; 65
    3652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	8e 01       	movw	r16, r28
    365c:	05 54       	subi	r16, 0x45	; 69
    365e:	1f 4f       	sbci	r17, 0xFF	; 255
    3660:	bc 01       	movw	r22, r24
    3662:	cd 01       	movw	r24, r26
    3664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	f8 01       	movw	r30, r16
    366e:	91 83       	std	Z+1, r25	; 0x01
    3670:	80 83       	st	Z, r24
    3672:	1f c0       	rjmp	.+62     	; 0x36b2 <Write+0x2a8>
    3674:	fe 01       	movw	r30, r28
    3676:	e7 54       	subi	r30, 0x47	; 71
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	80 e9       	ldi	r24, 0x90	; 144
    367c:	91 e0       	ldi	r25, 0x01	; 1
    367e:	91 83       	std	Z+1, r25	; 0x01
    3680:	80 83       	st	Z, r24
    3682:	fe 01       	movw	r30, r28
    3684:	e7 54       	subi	r30, 0x47	; 71
    3686:	ff 4f       	sbci	r31, 0xFF	; 255
    3688:	80 81       	ld	r24, Z
    368a:	91 81       	ldd	r25, Z+1	; 0x01
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	f1 f7       	brne	.-4      	; 0x368c <Write+0x282>
    3690:	fe 01       	movw	r30, r28
    3692:	e7 54       	subi	r30, 0x47	; 71
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	91 83       	std	Z+1, r25	; 0x01
    3698:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    369a:	de 01       	movw	r26, r28
    369c:	a5 54       	subi	r26, 0x45	; 69
    369e:	bf 4f       	sbci	r27, 0xFF	; 255
    36a0:	fe 01       	movw	r30, r28
    36a2:	e5 54       	subi	r30, 0x45	; 69
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 81       	ld	r24, Z
    36a8:	91 81       	ldd	r25, Z+1	; 0x01
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	11 96       	adiw	r26, 0x01	; 1
    36ae:	9c 93       	st	X, r25
    36b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b2:	fe 01       	movw	r30, r28
    36b4:	e5 54       	subi	r30, 0x45	; 69
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	80 81       	ld	r24, Z
    36ba:	91 81       	ldd	r25, Z+1	; 0x01
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	d1 f6       	brne	.-76     	; 0x3674 <Write+0x26a>
    36c0:	27 c0       	rjmp	.+78     	; 0x3710 <Write+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c2:	8e 01       	movw	r16, r28
    36c4:	05 54       	subi	r16, 0x45	; 69
    36c6:	1f 4f       	sbci	r17, 0xFF	; 255
    36c8:	fe 01       	movw	r30, r28
    36ca:	e3 54       	subi	r30, 0x43	; 67
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	60 81       	ld	r22, Z
    36d0:	71 81       	ldd	r23, Z+1	; 0x01
    36d2:	82 81       	ldd	r24, Z+2	; 0x02
    36d4:	93 81       	ldd	r25, Z+3	; 0x03
    36d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	f8 01       	movw	r30, r16
    36e0:	91 83       	std	Z+1, r25	; 0x01
    36e2:	80 83       	st	Z, r24
    36e4:	de 01       	movw	r26, r28
    36e6:	a9 54       	subi	r26, 0x49	; 73
    36e8:	bf 4f       	sbci	r27, 0xFF	; 255
    36ea:	fe 01       	movw	r30, r28
    36ec:	e5 54       	subi	r30, 0x45	; 69
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 81       	ld	r24, Z
    36f2:	91 81       	ldd	r25, Z+1	; 0x01
    36f4:	8d 93       	st	X+, r24
    36f6:	9c 93       	st	X, r25
    36f8:	fe 01       	movw	r30, r28
    36fa:	e9 54       	subi	r30, 0x49	; 73
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	80 81       	ld	r24, Z
    3700:	91 81       	ldd	r25, Z+1	; 0x01
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	f1 f7       	brne	.-4      	; 0x3702 <Write+0x2f8>
    3706:	fe 01       	movw	r30, r28
    3708:	e9 54       	subi	r30, 0x49	; 73
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	91 83       	std	Z+1, r25	; 0x01
    370e:	80 83       	st	Z, r24
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,0);
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	60 e0       	ldi	r22, 0x00	; 0
    3714:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"Ana mn! ");
    3718:	85 e8       	ldi	r24, 0x85	; 133
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    3720:	fe 01       	movw	r30, r28
    3722:	ed 54       	subi	r30, 0x4D	; 77
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	aa e7       	ldi	r26, 0x7A	; 122
    372c:	b4 e4       	ldi	r27, 0x44	; 68
    372e:	80 83       	st	Z, r24
    3730:	91 83       	std	Z+1, r25	; 0x01
    3732:	a2 83       	std	Z+2, r26	; 0x02
    3734:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3736:	8e 01       	movw	r16, r28
    3738:	01 55       	subi	r16, 0x51	; 81
    373a:	1f 4f       	sbci	r17, 0xFF	; 255
    373c:	fe 01       	movw	r30, r28
    373e:	ed 54       	subi	r30, 0x4D	; 77
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	60 81       	ld	r22, Z
    3744:	71 81       	ldd	r23, Z+1	; 0x01
    3746:	82 81       	ldd	r24, Z+2	; 0x02
    3748:	93 81       	ldd	r25, Z+3	; 0x03
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	4a e7       	ldi	r20, 0x7A	; 122
    3750:	55 e4       	ldi	r21, 0x45	; 69
    3752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	f8 01       	movw	r30, r16
    375c:	80 83       	st	Z, r24
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	a2 83       	std	Z+2, r26	; 0x02
    3762:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3764:	fe 01       	movw	r30, r28
    3766:	e1 55       	subi	r30, 0x51	; 81
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	60 81       	ld	r22, Z
    376c:	71 81       	ldd	r23, Z+1	; 0x01
    376e:	82 81       	ldd	r24, Z+2	; 0x02
    3770:	93 81       	ldd	r25, Z+3	; 0x03
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	40 e8       	ldi	r20, 0x80	; 128
    3778:	5f e3       	ldi	r21, 0x3F	; 63
    377a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    377e:	88 23       	and	r24, r24
    3780:	44 f4       	brge	.+16     	; 0x3792 <Write+0x388>
		__ticks = 1;
    3782:	fe 01       	movw	r30, r28
    3784:	e3 55       	subi	r30, 0x53	; 83
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	91 83       	std	Z+1, r25	; 0x01
    378e:	80 83       	st	Z, r24
    3790:	64 c0       	rjmp	.+200    	; 0x385a <Write+0x450>
	else if (__tmp > 65535)
    3792:	fe 01       	movw	r30, r28
    3794:	e1 55       	subi	r30, 0x51	; 81
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	60 81       	ld	r22, Z
    379a:	71 81       	ldd	r23, Z+1	; 0x01
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	3f ef       	ldi	r19, 0xFF	; 255
    37a4:	4f e7       	ldi	r20, 0x7F	; 127
    37a6:	57 e4       	ldi	r21, 0x47	; 71
    37a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ac:	18 16       	cp	r1, r24
    37ae:	0c f0       	brlt	.+2      	; 0x37b2 <Write+0x3a8>
    37b0:	43 c0       	rjmp	.+134    	; 0x3838 <Write+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b2:	fe 01       	movw	r30, r28
    37b4:	ed 54       	subi	r30, 0x4D	; 77
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	60 81       	ld	r22, Z
    37ba:	71 81       	ldd	r23, Z+1	; 0x01
    37bc:	82 81       	ldd	r24, Z+2	; 0x02
    37be:	93 81       	ldd	r25, Z+3	; 0x03
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	40 e2       	ldi	r20, 0x20	; 32
    37c6:	51 e4       	ldi	r21, 0x41	; 65
    37c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	8e 01       	movw	r16, r28
    37d2:	03 55       	subi	r16, 0x53	; 83
    37d4:	1f 4f       	sbci	r17, 0xFF	; 255
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	f8 01       	movw	r30, r16
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	80 83       	st	Z, r24
    37e8:	1f c0       	rjmp	.+62     	; 0x3828 <Write+0x41e>
    37ea:	fe 01       	movw	r30, r28
    37ec:	e5 55       	subi	r30, 0x55	; 85
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	80 e9       	ldi	r24, 0x90	; 144
    37f2:	91 e0       	ldi	r25, 0x01	; 1
    37f4:	91 83       	std	Z+1, r25	; 0x01
    37f6:	80 83       	st	Z, r24
    37f8:	fe 01       	movw	r30, r28
    37fa:	e5 55       	subi	r30, 0x55	; 85
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	80 81       	ld	r24, Z
    3800:	91 81       	ldd	r25, Z+1	; 0x01
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	f1 f7       	brne	.-4      	; 0x3802 <Write+0x3f8>
    3806:	fe 01       	movw	r30, r28
    3808:	e5 55       	subi	r30, 0x55	; 85
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	91 83       	std	Z+1, r25	; 0x01
    380e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3810:	de 01       	movw	r26, r28
    3812:	a3 55       	subi	r26, 0x53	; 83
    3814:	bf 4f       	sbci	r27, 0xFF	; 255
    3816:	fe 01       	movw	r30, r28
    3818:	e3 55       	subi	r30, 0x53	; 83
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	80 81       	ld	r24, Z
    381e:	91 81       	ldd	r25, Z+1	; 0x01
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	11 96       	adiw	r26, 0x01	; 1
    3824:	9c 93       	st	X, r25
    3826:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3828:	fe 01       	movw	r30, r28
    382a:	e3 55       	subi	r30, 0x53	; 83
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	80 81       	ld	r24, Z
    3830:	91 81       	ldd	r25, Z+1	; 0x01
    3832:	00 97       	sbiw	r24, 0x00	; 0
    3834:	d1 f6       	brne	.-76     	; 0x37ea <Write+0x3e0>
    3836:	27 c0       	rjmp	.+78     	; 0x3886 <Write+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3838:	8e 01       	movw	r16, r28
    383a:	03 55       	subi	r16, 0x53	; 83
    383c:	1f 4f       	sbci	r17, 0xFF	; 255
    383e:	fe 01       	movw	r30, r28
    3840:	e1 55       	subi	r30, 0x51	; 81
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	60 81       	ld	r22, Z
    3846:	71 81       	ldd	r23, Z+1	; 0x01
    3848:	82 81       	ldd	r24, Z+2	; 0x02
    384a:	93 81       	ldd	r25, Z+3	; 0x03
    384c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	f8 01       	movw	r30, r16
    3856:	91 83       	std	Z+1, r25	; 0x01
    3858:	80 83       	st	Z, r24
    385a:	de 01       	movw	r26, r28
    385c:	a7 55       	subi	r26, 0x57	; 87
    385e:	bf 4f       	sbci	r27, 0xFF	; 255
    3860:	fe 01       	movw	r30, r28
    3862:	e3 55       	subi	r30, 0x53	; 83
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	80 81       	ld	r24, Z
    3868:	91 81       	ldd	r25, Z+1	; 0x01
    386a:	8d 93       	st	X+, r24
    386c:	9c 93       	st	X, r25
    386e:	fe 01       	movw	r30, r28
    3870:	e7 55       	subi	r30, 0x57	; 87
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <Write+0x46e>
    387c:	fe 01       	movw	r30, r28
    387e:	e7 55       	subi	r30, 0x57	; 87
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	91 83       	std	Z+1, r25	; 0x01
    3884:	80 83       	st	Z, r24
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,0);
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"enta el mn");
    388e:	8e e8       	ldi	r24, 0x8E	; 142
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    3896:	fe 01       	movw	r30, r28
    3898:	eb 55       	subi	r30, 0x5B	; 91
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	aa e7       	ldi	r26, 0x7A	; 122
    38a2:	b4 e4       	ldi	r27, 0x44	; 68
    38a4:	80 83       	st	Z, r24
    38a6:	91 83       	std	Z+1, r25	; 0x01
    38a8:	a2 83       	std	Z+2, r26	; 0x02
    38aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ac:	8e 01       	movw	r16, r28
    38ae:	0f 55       	subi	r16, 0x5F	; 95
    38b0:	1f 4f       	sbci	r17, 0xFF	; 255
    38b2:	fe 01       	movw	r30, r28
    38b4:	eb 55       	subi	r30, 0x5B	; 91
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	60 81       	ld	r22, Z
    38ba:	71 81       	ldd	r23, Z+1	; 0x01
    38bc:	82 81       	ldd	r24, Z+2	; 0x02
    38be:	93 81       	ldd	r25, Z+3	; 0x03
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	4a e7       	ldi	r20, 0x7A	; 122
    38c6:	55 e4       	ldi	r21, 0x45	; 69
    38c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	f8 01       	movw	r30, r16
    38d2:	80 83       	st	Z, r24
    38d4:	91 83       	std	Z+1, r25	; 0x01
    38d6:	a2 83       	std	Z+2, r26	; 0x02
    38d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38da:	fe 01       	movw	r30, r28
    38dc:	ef 55       	subi	r30, 0x5F	; 95
    38de:	ff 4f       	sbci	r31, 0xFF	; 255
    38e0:	60 81       	ld	r22, Z
    38e2:	71 81       	ldd	r23, Z+1	; 0x01
    38e4:	82 81       	ldd	r24, Z+2	; 0x02
    38e6:	93 81       	ldd	r25, Z+3	; 0x03
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	40 e8       	ldi	r20, 0x80	; 128
    38ee:	5f e3       	ldi	r21, 0x3F	; 63
    38f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f4:	88 23       	and	r24, r24
    38f6:	44 f4       	brge	.+16     	; 0x3908 <Write+0x4fe>
		__ticks = 1;
    38f8:	fe 01       	movw	r30, r28
    38fa:	e1 56       	subi	r30, 0x61	; 97
    38fc:	ff 4f       	sbci	r31, 0xFF	; 255
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	91 83       	std	Z+1, r25	; 0x01
    3904:	80 83       	st	Z, r24
    3906:	64 c0       	rjmp	.+200    	; 0x39d0 <Write+0x5c6>
	else if (__tmp > 65535)
    3908:	fe 01       	movw	r30, r28
    390a:	ef 55       	subi	r30, 0x5F	; 95
    390c:	ff 4f       	sbci	r31, 0xFF	; 255
    390e:	60 81       	ld	r22, Z
    3910:	71 81       	ldd	r23, Z+1	; 0x01
    3912:	82 81       	ldd	r24, Z+2	; 0x02
    3914:	93 81       	ldd	r25, Z+3	; 0x03
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	3f ef       	ldi	r19, 0xFF	; 255
    391a:	4f e7       	ldi	r20, 0x7F	; 127
    391c:	57 e4       	ldi	r21, 0x47	; 71
    391e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3922:	18 16       	cp	r1, r24
    3924:	0c f0       	brlt	.+2      	; 0x3928 <Write+0x51e>
    3926:	43 c0       	rjmp	.+134    	; 0x39ae <Write+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3928:	fe 01       	movw	r30, r28
    392a:	eb 55       	subi	r30, 0x5B	; 91
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	60 81       	ld	r22, Z
    3930:	71 81       	ldd	r23, Z+1	; 0x01
    3932:	82 81       	ldd	r24, Z+2	; 0x02
    3934:	93 81       	ldd	r25, Z+3	; 0x03
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	40 e2       	ldi	r20, 0x20	; 32
    393c:	51 e4       	ldi	r21, 0x41	; 65
    393e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3942:	dc 01       	movw	r26, r24
    3944:	cb 01       	movw	r24, r22
    3946:	8e 01       	movw	r16, r28
    3948:	01 56       	subi	r16, 0x61	; 97
    394a:	1f 4f       	sbci	r17, 0xFF	; 255
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	f8 01       	movw	r30, r16
    395a:	91 83       	std	Z+1, r25	; 0x01
    395c:	80 83       	st	Z, r24
    395e:	1f c0       	rjmp	.+62     	; 0x399e <Write+0x594>
    3960:	fe 01       	movw	r30, r28
    3962:	e3 56       	subi	r30, 0x63	; 99
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	80 e9       	ldi	r24, 0x90	; 144
    3968:	91 e0       	ldi	r25, 0x01	; 1
    396a:	91 83       	std	Z+1, r25	; 0x01
    396c:	80 83       	st	Z, r24
    396e:	fe 01       	movw	r30, r28
    3970:	e3 56       	subi	r30, 0x63	; 99
    3972:	ff 4f       	sbci	r31, 0xFF	; 255
    3974:	80 81       	ld	r24, Z
    3976:	91 81       	ldd	r25, Z+1	; 0x01
    3978:	01 97       	sbiw	r24, 0x01	; 1
    397a:	f1 f7       	brne	.-4      	; 0x3978 <Write+0x56e>
    397c:	fe 01       	movw	r30, r28
    397e:	e3 56       	subi	r30, 0x63	; 99
    3980:	ff 4f       	sbci	r31, 0xFF	; 255
    3982:	91 83       	std	Z+1, r25	; 0x01
    3984:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3986:	de 01       	movw	r26, r28
    3988:	a1 56       	subi	r26, 0x61	; 97
    398a:	bf 4f       	sbci	r27, 0xFF	; 255
    398c:	fe 01       	movw	r30, r28
    398e:	e1 56       	subi	r30, 0x61	; 97
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	80 81       	ld	r24, Z
    3994:	91 81       	ldd	r25, Z+1	; 0x01
    3996:	01 97       	sbiw	r24, 0x01	; 1
    3998:	11 96       	adiw	r26, 0x01	; 1
    399a:	9c 93       	st	X, r25
    399c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399e:	fe 01       	movw	r30, r28
    39a0:	e1 56       	subi	r30, 0x61	; 97
    39a2:	ff 4f       	sbci	r31, 0xFF	; 255
    39a4:	80 81       	ld	r24, Z
    39a6:	91 81       	ldd	r25, Z+1	; 0x01
    39a8:	00 97       	sbiw	r24, 0x00	; 0
    39aa:	d1 f6       	brne	.-76     	; 0x3960 <Write+0x556>
    39ac:	27 c0       	rjmp	.+78     	; 0x39fc <Write+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ae:	8e 01       	movw	r16, r28
    39b0:	01 56       	subi	r16, 0x61	; 97
    39b2:	1f 4f       	sbci	r17, 0xFF	; 255
    39b4:	fe 01       	movw	r30, r28
    39b6:	ef 55       	subi	r30, 0x5F	; 95
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	60 81       	ld	r22, Z
    39bc:	71 81       	ldd	r23, Z+1	; 0x01
    39be:	82 81       	ldd	r24, Z+2	; 0x02
    39c0:	93 81       	ldd	r25, Z+3	; 0x03
    39c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	f8 01       	movw	r30, r16
    39cc:	91 83       	std	Z+1, r25	; 0x01
    39ce:	80 83       	st	Z, r24
    39d0:	de 01       	movw	r26, r28
    39d2:	a5 56       	subi	r26, 0x65	; 101
    39d4:	bf 4f       	sbci	r27, 0xFF	; 255
    39d6:	fe 01       	movw	r30, r28
    39d8:	e1 56       	subi	r30, 0x61	; 97
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	80 81       	ld	r24, Z
    39de:	91 81       	ldd	r25, Z+1	; 0x01
    39e0:	8d 93       	st	X+, r24
    39e2:	9c 93       	st	X, r25
    39e4:	fe 01       	movw	r30, r28
    39e6:	e5 56       	subi	r30, 0x65	; 101
    39e8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ea:	80 81       	ld	r24, Z
    39ec:	91 81       	ldd	r25, Z+1	; 0x01
    39ee:	01 97       	sbiw	r24, 0x01	; 1
    39f0:	f1 f7       	brne	.-4      	; 0x39ee <Write+0x5e4>
    39f2:	fe 01       	movw	r30, r28
    39f4:	e5 56       	subi	r30, 0x65	; 101
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	91 83       	std	Z+1, r25	; 0x01
    39fa:	80 83       	st	Z, r24
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,11);
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	6b e0       	ldi	r22, 0x0B	; 11
    3a00:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"ahhh      ");
    3a04:	89 e9       	ldi	r24, 0x99	; 153
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e9 56       	subi	r30, 0x69	; 105
    3a10:	ff 4f       	sbci	r31, 0xFF	; 255
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	aa e7       	ldi	r26, 0x7A	; 122
    3a18:	b4 e4       	ldi	r27, 0x44	; 68
    3a1a:	80 83       	st	Z, r24
    3a1c:	91 83       	std	Z+1, r25	; 0x01
    3a1e:	a2 83       	std	Z+2, r26	; 0x02
    3a20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a22:	8e 01       	movw	r16, r28
    3a24:	0d 56       	subi	r16, 0x6D	; 109
    3a26:	1f 4f       	sbci	r17, 0xFF	; 255
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e9 56       	subi	r30, 0x69	; 105
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	60 81       	ld	r22, Z
    3a30:	71 81       	ldd	r23, Z+1	; 0x01
    3a32:	82 81       	ldd	r24, Z+2	; 0x02
    3a34:	93 81       	ldd	r25, Z+3	; 0x03
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	4a e7       	ldi	r20, 0x7A	; 122
    3a3c:	55 e4       	ldi	r21, 0x45	; 69
    3a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	f8 01       	movw	r30, r16
    3a48:	80 83       	st	Z, r24
    3a4a:	91 83       	std	Z+1, r25	; 0x01
    3a4c:	a2 83       	std	Z+2, r26	; 0x02
    3a4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a50:	fe 01       	movw	r30, r28
    3a52:	ed 56       	subi	r30, 0x6D	; 109
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	60 81       	ld	r22, Z
    3a58:	71 81       	ldd	r23, Z+1	; 0x01
    3a5a:	82 81       	ldd	r24, Z+2	; 0x02
    3a5c:	93 81       	ldd	r25, Z+3	; 0x03
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	40 e8       	ldi	r20, 0x80	; 128
    3a64:	5f e3       	ldi	r21, 0x3F	; 63
    3a66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a6a:	88 23       	and	r24, r24
    3a6c:	44 f4       	brge	.+16     	; 0x3a7e <Write+0x674>
		__ticks = 1;
    3a6e:	fe 01       	movw	r30, r28
    3a70:	ef 56       	subi	r30, 0x6F	; 111
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	80 83       	st	Z, r24
    3a7c:	64 c0       	rjmp	.+200    	; 0x3b46 <Write+0x73c>
	else if (__tmp > 65535)
    3a7e:	fe 01       	movw	r30, r28
    3a80:	ed 56       	subi	r30, 0x6D	; 109
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	3f ef       	ldi	r19, 0xFF	; 255
    3a90:	4f e7       	ldi	r20, 0x7F	; 127
    3a92:	57 e4       	ldi	r21, 0x47	; 71
    3a94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a98:	18 16       	cp	r1, r24
    3a9a:	0c f0       	brlt	.+2      	; 0x3a9e <Write+0x694>
    3a9c:	43 c0       	rjmp	.+134    	; 0x3b24 <Write+0x71a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	e9 56       	subi	r30, 0x69	; 105
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	60 81       	ld	r22, Z
    3aa6:	71 81       	ldd	r23, Z+1	; 0x01
    3aa8:	82 81       	ldd	r24, Z+2	; 0x02
    3aaa:	93 81       	ldd	r25, Z+3	; 0x03
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e2       	ldi	r20, 0x20	; 32
    3ab2:	51 e4       	ldi	r21, 0x41	; 65
    3ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	8e 01       	movw	r16, r28
    3abe:	0f 56       	subi	r16, 0x6F	; 111
    3ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	f8 01       	movw	r30, r16
    3ad0:	91 83       	std	Z+1, r25	; 0x01
    3ad2:	80 83       	st	Z, r24
    3ad4:	1f c0       	rjmp	.+62     	; 0x3b14 <Write+0x70a>
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	e1 57       	subi	r30, 0x71	; 113
    3ada:	ff 4f       	sbci	r31, 0xFF	; 255
    3adc:	80 e9       	ldi	r24, 0x90	; 144
    3ade:	91 e0       	ldi	r25, 0x01	; 1
    3ae0:	91 83       	std	Z+1, r25	; 0x01
    3ae2:	80 83       	st	Z, r24
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e1 57       	subi	r30, 0x71	; 113
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 81       	ld	r24, Z
    3aec:	91 81       	ldd	r25, Z+1	; 0x01
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	f1 f7       	brne	.-4      	; 0x3aee <Write+0x6e4>
    3af2:	fe 01       	movw	r30, r28
    3af4:	e1 57       	subi	r30, 0x71	; 113
    3af6:	ff 4f       	sbci	r31, 0xFF	; 255
    3af8:	91 83       	std	Z+1, r25	; 0x01
    3afa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3afc:	de 01       	movw	r26, r28
    3afe:	af 56       	subi	r26, 0x6F	; 111
    3b00:	bf 4f       	sbci	r27, 0xFF	; 255
    3b02:	fe 01       	movw	r30, r28
    3b04:	ef 56       	subi	r30, 0x6F	; 111
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	80 81       	ld	r24, Z
    3b0a:	91 81       	ldd	r25, Z+1	; 0x01
    3b0c:	01 97       	sbiw	r24, 0x01	; 1
    3b0e:	11 96       	adiw	r26, 0x01	; 1
    3b10:	9c 93       	st	X, r25
    3b12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b14:	fe 01       	movw	r30, r28
    3b16:	ef 56       	subi	r30, 0x6F	; 111
    3b18:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1a:	80 81       	ld	r24, Z
    3b1c:	91 81       	ldd	r25, Z+1	; 0x01
    3b1e:	00 97       	sbiw	r24, 0x00	; 0
    3b20:	d1 f6       	brne	.-76     	; 0x3ad6 <Write+0x6cc>
    3b22:	27 c0       	rjmp	.+78     	; 0x3b72 <Write+0x768>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b24:	8e 01       	movw	r16, r28
    3b26:	0f 56       	subi	r16, 0x6F	; 111
    3b28:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	ed 56       	subi	r30, 0x6D	; 109
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	60 81       	ld	r22, Z
    3b32:	71 81       	ldd	r23, Z+1	; 0x01
    3b34:	82 81       	ldd	r24, Z+2	; 0x02
    3b36:	93 81       	ldd	r25, Z+3	; 0x03
    3b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	f8 01       	movw	r30, r16
    3b42:	91 83       	std	Z+1, r25	; 0x01
    3b44:	80 83       	st	Z, r24
    3b46:	de 01       	movw	r26, r28
    3b48:	a3 57       	subi	r26, 0x73	; 115
    3b4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	ef 56       	subi	r30, 0x6F	; 111
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	80 81       	ld	r24, Z
    3b54:	91 81       	ldd	r25, Z+1	; 0x01
    3b56:	8d 93       	st	X+, r24
    3b58:	9c 93       	st	X, r25
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	e3 57       	subi	r30, 0x73	; 115
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	80 81       	ld	r24, Z
    3b62:	91 81       	ldd	r25, Z+1	; 0x01
    3b64:	01 97       	sbiw	r24, 0x01	; 1
    3b66:	f1 f7       	brne	.-4      	; 0x3b64 <Write+0x75a>
    3b68:	fe 01       	movw	r30, r28
    3b6a:	e3 57       	subi	r30, 0x73	; 115
    3b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6e:	91 83       	std	Z+1, r25	; 0x01
    3b70:	80 83       	st	Z, r24
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,11);
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	6b e0       	ldi	r22, 0x0B	; 11
    3b76:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"enta     ");
    3b7a:	84 ea       	ldi	r24, 0xA4	; 164
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
	LCD_voidGoToPosition(2,11);
    3b82:	82 e0       	ldi	r24, 0x02	; 2
    3b84:	6b e0       	ldi	r22, 0x0B	; 11
    3b86:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"mat3rf4  ");
    3b8a:	8e ea       	ldi	r24, 0xAE	; 174
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    3b92:	fe 01       	movw	r30, r28
    3b94:	e7 57       	subi	r30, 0x77	; 119
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	aa e7       	ldi	r26, 0x7A	; 122
    3b9e:	b4 e4       	ldi	r27, 0x44	; 68
    3ba0:	80 83       	st	Z, r24
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	a2 83       	std	Z+2, r26	; 0x02
    3ba6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba8:	8e 01       	movw	r16, r28
    3baa:	0b 57       	subi	r16, 0x7B	; 123
    3bac:	1f 4f       	sbci	r17, 0xFF	; 255
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e7 57       	subi	r30, 0x77	; 119
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	60 81       	ld	r22, Z
    3bb6:	71 81       	ldd	r23, Z+1	; 0x01
    3bb8:	82 81       	ldd	r24, Z+2	; 0x02
    3bba:	93 81       	ldd	r25, Z+3	; 0x03
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	4a e7       	ldi	r20, 0x7A	; 122
    3bc2:	55 e4       	ldi	r21, 0x45	; 69
    3bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	f8 01       	movw	r30, r16
    3bce:	80 83       	st	Z, r24
    3bd0:	91 83       	std	Z+1, r25	; 0x01
    3bd2:	a2 83       	std	Z+2, r26	; 0x02
    3bd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	eb 57       	subi	r30, 0x7B	; 123
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	60 81       	ld	r22, Z
    3bde:	71 81       	ldd	r23, Z+1	; 0x01
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	93 81       	ldd	r25, Z+3	; 0x03
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e8       	ldi	r20, 0x80	; 128
    3bea:	5f e3       	ldi	r21, 0x3F	; 63
    3bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf0:	88 23       	and	r24, r24
    3bf2:	44 f4       	brge	.+16     	; 0x3c04 <Write+0x7fa>
		__ticks = 1;
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	ed 57       	subi	r30, 0x7D	; 125
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	80 83       	st	Z, r24
    3c02:	64 c0       	rjmp	.+200    	; 0x3ccc <Write+0x8c2>
	else if (__tmp > 65535)
    3c04:	fe 01       	movw	r30, r28
    3c06:	eb 57       	subi	r30, 0x7B	; 123
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	60 81       	ld	r22, Z
    3c0c:	71 81       	ldd	r23, Z+1	; 0x01
    3c0e:	82 81       	ldd	r24, Z+2	; 0x02
    3c10:	93 81       	ldd	r25, Z+3	; 0x03
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	3f ef       	ldi	r19, 0xFF	; 255
    3c16:	4f e7       	ldi	r20, 0x7F	; 127
    3c18:	57 e4       	ldi	r21, 0x47	; 71
    3c1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c1e:	18 16       	cp	r1, r24
    3c20:	0c f0       	brlt	.+2      	; 0x3c24 <Write+0x81a>
    3c22:	43 c0       	rjmp	.+134    	; 0x3caa <Write+0x8a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c24:	fe 01       	movw	r30, r28
    3c26:	e7 57       	subi	r30, 0x77	; 119
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	60 81       	ld	r22, Z
    3c2c:	71 81       	ldd	r23, Z+1	; 0x01
    3c2e:	82 81       	ldd	r24, Z+2	; 0x02
    3c30:	93 81       	ldd	r25, Z+3	; 0x03
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	40 e2       	ldi	r20, 0x20	; 32
    3c38:	51 e4       	ldi	r21, 0x41	; 65
    3c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	8e 01       	movw	r16, r28
    3c44:	0d 57       	subi	r16, 0x7D	; 125
    3c46:	1f 4f       	sbci	r17, 0xFF	; 255
    3c48:	bc 01       	movw	r22, r24
    3c4a:	cd 01       	movw	r24, r26
    3c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	f8 01       	movw	r30, r16
    3c56:	91 83       	std	Z+1, r25	; 0x01
    3c58:	80 83       	st	Z, r24
    3c5a:	1f c0       	rjmp	.+62     	; 0x3c9a <Write+0x890>
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	ef 57       	subi	r30, 0x7F	; 127
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	80 e9       	ldi	r24, 0x90	; 144
    3c64:	91 e0       	ldi	r25, 0x01	; 1
    3c66:	91 83       	std	Z+1, r25	; 0x01
    3c68:	80 83       	st	Z, r24
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	ef 57       	subi	r30, 0x7F	; 127
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	80 81       	ld	r24, Z
    3c72:	91 81       	ldd	r25, Z+1	; 0x01
    3c74:	01 97       	sbiw	r24, 0x01	; 1
    3c76:	f1 f7       	brne	.-4      	; 0x3c74 <Write+0x86a>
    3c78:	fe 01       	movw	r30, r28
    3c7a:	ef 57       	subi	r30, 0x7F	; 127
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	91 83       	std	Z+1, r25	; 0x01
    3c80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c82:	de 01       	movw	r26, r28
    3c84:	ad 57       	subi	r26, 0x7D	; 125
    3c86:	bf 4f       	sbci	r27, 0xFF	; 255
    3c88:	fe 01       	movw	r30, r28
    3c8a:	ed 57       	subi	r30, 0x7D	; 125
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	80 81       	ld	r24, Z
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	11 96       	adiw	r26, 0x01	; 1
    3c96:	9c 93       	st	X, r25
    3c98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	ed 57       	subi	r30, 0x7D	; 125
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	80 81       	ld	r24, Z
    3ca2:	91 81       	ldd	r25, Z+1	; 0x01
    3ca4:	00 97       	sbiw	r24, 0x00	; 0
    3ca6:	d1 f6       	brne	.-76     	; 0x3c5c <Write+0x852>
    3ca8:	27 c0       	rjmp	.+78     	; 0x3cf8 <Write+0x8ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3caa:	8e 01       	movw	r16, r28
    3cac:	0d 57       	subi	r16, 0x7D	; 125
    3cae:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	eb 57       	subi	r30, 0x7B	; 123
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	60 81       	ld	r22, Z
    3cb8:	71 81       	ldd	r23, Z+1	; 0x01
    3cba:	82 81       	ldd	r24, Z+2	; 0x02
    3cbc:	93 81       	ldd	r25, Z+3	; 0x03
    3cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	f8 01       	movw	r30, r16
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	80 83       	st	Z, r24
    3ccc:	de 01       	movw	r26, r28
    3cce:	a1 58       	subi	r26, 0x81	; 129
    3cd0:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	ed 57       	subi	r30, 0x7D	; 125
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	80 81       	ld	r24, Z
    3cda:	91 81       	ldd	r25, Z+1	; 0x01
    3cdc:	8d 93       	st	X+, r24
    3cde:	9c 93       	st	X, r25
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	e1 58       	subi	r30, 0x81	; 129
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	80 81       	ld	r24, Z
    3ce8:	91 81       	ldd	r25, Z+1	; 0x01
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <Write+0x8e0>
    3cee:	fe 01       	movw	r30, r28
    3cf0:	e1 58       	subi	r30, 0x81	; 129
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	91 83       	std	Z+1, r25	; 0x01
    3cf6:	80 83       	st	Z, r24
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,11);
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	6b e0       	ldi	r22, 0x0B	; 11
    3cfc:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"     ");
    3d00:	88 eb       	ldi	r24, 0xB8	; 184
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
	LCD_voidClearLine(2,19);
    3d08:	82 e0       	ldi	r24, 0x02	; 2
    3d0a:	63 e1       	ldi	r22, 0x13	; 19
    3d0c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_voidClearLine>
	LCD_voidDisplaySpecialChar(line,2,2,10);
    3d10:	80 e9       	ldi	r24, 0x90	; 144
    3d12:	92 e0       	ldi	r25, 0x02	; 2
    3d14:	62 e0       	ldi	r22, 0x02	; 2
    3d16:	42 e0       	ldi	r20, 0x02	; 2
    3d18:	2a e0       	ldi	r18, 0x0A	; 10
    3d1a:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
	LCD_voidGoToPosition(1,0);
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	60 e0       	ldi	r22, 0x00	; 0
    3d22:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"la2 mn    ");
    3d26:	8e eb       	ldi	r24, 0xBE	; 190
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    3d2e:	fe 01       	movw	r30, r28
    3d30:	e5 58       	subi	r30, 0x85	; 133
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	aa e7       	ldi	r26, 0x7A	; 122
    3d3a:	b4 e4       	ldi	r27, 0x44	; 68
    3d3c:	80 83       	st	Z, r24
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	a2 83       	std	Z+2, r26	; 0x02
    3d42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d44:	8e 01       	movw	r16, r28
    3d46:	09 58       	subi	r16, 0x89	; 137
    3d48:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	e5 58       	subi	r30, 0x85	; 133
    3d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d50:	60 81       	ld	r22, Z
    3d52:	71 81       	ldd	r23, Z+1	; 0x01
    3d54:	82 81       	ldd	r24, Z+2	; 0x02
    3d56:	93 81       	ldd	r25, Z+3	; 0x03
    3d58:	20 e0       	ldi	r18, 0x00	; 0
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	4a e7       	ldi	r20, 0x7A	; 122
    3d5e:	55 e4       	ldi	r21, 0x45	; 69
    3d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	f8 01       	movw	r30, r16
    3d6a:	80 83       	st	Z, r24
    3d6c:	91 83       	std	Z+1, r25	; 0x01
    3d6e:	a2 83       	std	Z+2, r26	; 0x02
    3d70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d72:	fe 01       	movw	r30, r28
    3d74:	e9 58       	subi	r30, 0x89	; 137
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	60 81       	ld	r22, Z
    3d7a:	71 81       	ldd	r23, Z+1	; 0x01
    3d7c:	82 81       	ldd	r24, Z+2	; 0x02
    3d7e:	93 81       	ldd	r25, Z+3	; 0x03
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	40 e8       	ldi	r20, 0x80	; 128
    3d86:	5f e3       	ldi	r21, 0x3F	; 63
    3d88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d8c:	88 23       	and	r24, r24
    3d8e:	44 f4       	brge	.+16     	; 0x3da0 <Write+0x996>
		__ticks = 1;
    3d90:	fe 01       	movw	r30, r28
    3d92:	eb 58       	subi	r30, 0x8B	; 139
    3d94:	ff 4f       	sbci	r31, 0xFF	; 255
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	91 83       	std	Z+1, r25	; 0x01
    3d9c:	80 83       	st	Z, r24
    3d9e:	64 c0       	rjmp	.+200    	; 0x3e68 <Write+0xa5e>
	else if (__tmp > 65535)
    3da0:	fe 01       	movw	r30, r28
    3da2:	e9 58       	subi	r30, 0x89	; 137
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	60 81       	ld	r22, Z
    3da8:	71 81       	ldd	r23, Z+1	; 0x01
    3daa:	82 81       	ldd	r24, Z+2	; 0x02
    3dac:	93 81       	ldd	r25, Z+3	; 0x03
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	3f ef       	ldi	r19, 0xFF	; 255
    3db2:	4f e7       	ldi	r20, 0x7F	; 127
    3db4:	57 e4       	ldi	r21, 0x47	; 71
    3db6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dba:	18 16       	cp	r1, r24
    3dbc:	0c f0       	brlt	.+2      	; 0x3dc0 <Write+0x9b6>
    3dbe:	43 c0       	rjmp	.+134    	; 0x3e46 <Write+0xa3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	e5 58       	subi	r30, 0x85	; 133
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	60 81       	ld	r22, Z
    3dc8:	71 81       	ldd	r23, Z+1	; 0x01
    3dca:	82 81       	ldd	r24, Z+2	; 0x02
    3dcc:	93 81       	ldd	r25, Z+3	; 0x03
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	40 e2       	ldi	r20, 0x20	; 32
    3dd4:	51 e4       	ldi	r21, 0x41	; 65
    3dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	8e 01       	movw	r16, r28
    3de0:	0b 58       	subi	r16, 0x8B	; 139
    3de2:	1f 4f       	sbci	r17, 0xFF	; 255
    3de4:	bc 01       	movw	r22, r24
    3de6:	cd 01       	movw	r24, r26
    3de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	f8 01       	movw	r30, r16
    3df2:	91 83       	std	Z+1, r25	; 0x01
    3df4:	80 83       	st	Z, r24
    3df6:	1f c0       	rjmp	.+62     	; 0x3e36 <Write+0xa2c>
    3df8:	fe 01       	movw	r30, r28
    3dfa:	ed 58       	subi	r30, 0x8D	; 141
    3dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfe:	80 e9       	ldi	r24, 0x90	; 144
    3e00:	91 e0       	ldi	r25, 0x01	; 1
    3e02:	91 83       	std	Z+1, r25	; 0x01
    3e04:	80 83       	st	Z, r24
    3e06:	fe 01       	movw	r30, r28
    3e08:	ed 58       	subi	r30, 0x8D	; 141
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	80 81       	ld	r24, Z
    3e0e:	91 81       	ldd	r25, Z+1	; 0x01
    3e10:	01 97       	sbiw	r24, 0x01	; 1
    3e12:	f1 f7       	brne	.-4      	; 0x3e10 <Write+0xa06>
    3e14:	fe 01       	movw	r30, r28
    3e16:	ed 58       	subi	r30, 0x8D	; 141
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	91 83       	std	Z+1, r25	; 0x01
    3e1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e1e:	de 01       	movw	r26, r28
    3e20:	ab 58       	subi	r26, 0x8B	; 139
    3e22:	bf 4f       	sbci	r27, 0xFF	; 255
    3e24:	fe 01       	movw	r30, r28
    3e26:	eb 58       	subi	r30, 0x8B	; 139
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	80 81       	ld	r24, Z
    3e2c:	91 81       	ldd	r25, Z+1	; 0x01
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	11 96       	adiw	r26, 0x01	; 1
    3e32:	9c 93       	st	X, r25
    3e34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e36:	fe 01       	movw	r30, r28
    3e38:	eb 58       	subi	r30, 0x8B	; 139
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	80 81       	ld	r24, Z
    3e3e:	91 81       	ldd	r25, Z+1	; 0x01
    3e40:	00 97       	sbiw	r24, 0x00	; 0
    3e42:	d1 f6       	brne	.-76     	; 0x3df8 <Write+0x9ee>
    3e44:	27 c0       	rjmp	.+78     	; 0x3e94 <Write+0xa8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e46:	8e 01       	movw	r16, r28
    3e48:	0b 58       	subi	r16, 0x8B	; 139
    3e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e9 58       	subi	r30, 0x89	; 137
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	60 81       	ld	r22, Z
    3e54:	71 81       	ldd	r23, Z+1	; 0x01
    3e56:	82 81       	ldd	r24, Z+2	; 0x02
    3e58:	93 81       	ldd	r25, Z+3	; 0x03
    3e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5e:	dc 01       	movw	r26, r24
    3e60:	cb 01       	movw	r24, r22
    3e62:	f8 01       	movw	r30, r16
    3e64:	91 83       	std	Z+1, r25	; 0x01
    3e66:	80 83       	st	Z, r24
    3e68:	de 01       	movw	r26, r28
    3e6a:	af 58       	subi	r26, 0x8F	; 143
    3e6c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e6e:	fe 01       	movw	r30, r28
    3e70:	eb 58       	subi	r30, 0x8B	; 139
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	80 81       	ld	r24, Z
    3e76:	91 81       	ldd	r25, Z+1	; 0x01
    3e78:	8d 93       	st	X+, r24
    3e7a:	9c 93       	st	X, r25
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	ef 58       	subi	r30, 0x8F	; 143
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 81       	ld	r24, Z
    3e84:	91 81       	ldd	r25, Z+1	; 0x01
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	f1 f7       	brne	.-4      	; 0x3e86 <Write+0xa7c>
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	ef 58       	subi	r30, 0x8F	; 143
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	91 83       	std	Z+1, r25	; 0x01
    3e92:	80 83       	st	Z, r24
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,11);
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	6b e0       	ldi	r22, 0x0B	; 11
    3e98:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"na 7zl2om");
    3e9c:	89 ec       	ldi	r24, 0xC9	; 201
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    3ea4:	fe 01       	movw	r30, r28
    3ea6:	e3 59       	subi	r30, 0x93	; 147
    3ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eaa:	80 e0       	ldi	r24, 0x00	; 0
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	aa e7       	ldi	r26, 0x7A	; 122
    3eb0:	b4 e4       	ldi	r27, 0x44	; 68
    3eb2:	80 83       	st	Z, r24
    3eb4:	91 83       	std	Z+1, r25	; 0x01
    3eb6:	a2 83       	std	Z+2, r26	; 0x02
    3eb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eba:	8e 01       	movw	r16, r28
    3ebc:	07 59       	subi	r16, 0x97	; 151
    3ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec0:	fe 01       	movw	r30, r28
    3ec2:	e3 59       	subi	r30, 0x93	; 147
    3ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec6:	60 81       	ld	r22, Z
    3ec8:	71 81       	ldd	r23, Z+1	; 0x01
    3eca:	82 81       	ldd	r24, Z+2	; 0x02
    3ecc:	93 81       	ldd	r25, Z+3	; 0x03
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	4a e7       	ldi	r20, 0x7A	; 122
    3ed4:	55 e4       	ldi	r21, 0x45	; 69
    3ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eda:	dc 01       	movw	r26, r24
    3edc:	cb 01       	movw	r24, r22
    3ede:	f8 01       	movw	r30, r16
    3ee0:	80 83       	st	Z, r24
    3ee2:	91 83       	std	Z+1, r25	; 0x01
    3ee4:	a2 83       	std	Z+2, r26	; 0x02
    3ee6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ee8:	fe 01       	movw	r30, r28
    3eea:	e7 59       	subi	r30, 0x97	; 151
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	60 81       	ld	r22, Z
    3ef0:	71 81       	ldd	r23, Z+1	; 0x01
    3ef2:	82 81       	ldd	r24, Z+2	; 0x02
    3ef4:	93 81       	ldd	r25, Z+3	; 0x03
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	40 e8       	ldi	r20, 0x80	; 128
    3efc:	5f e3       	ldi	r21, 0x3F	; 63
    3efe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f02:	88 23       	and	r24, r24
    3f04:	44 f4       	brge	.+16     	; 0x3f16 <Write+0xb0c>
		__ticks = 1;
    3f06:	fe 01       	movw	r30, r28
    3f08:	e9 59       	subi	r30, 0x99	; 153
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	91 83       	std	Z+1, r25	; 0x01
    3f12:	80 83       	st	Z, r24
    3f14:	64 c0       	rjmp	.+200    	; 0x3fde <Write+0xbd4>
	else if (__tmp > 65535)
    3f16:	fe 01       	movw	r30, r28
    3f18:	e7 59       	subi	r30, 0x97	; 151
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	60 81       	ld	r22, Z
    3f1e:	71 81       	ldd	r23, Z+1	; 0x01
    3f20:	82 81       	ldd	r24, Z+2	; 0x02
    3f22:	93 81       	ldd	r25, Z+3	; 0x03
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	3f ef       	ldi	r19, 0xFF	; 255
    3f28:	4f e7       	ldi	r20, 0x7F	; 127
    3f2a:	57 e4       	ldi	r21, 0x47	; 71
    3f2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f30:	18 16       	cp	r1, r24
    3f32:	0c f0       	brlt	.+2      	; 0x3f36 <Write+0xb2c>
    3f34:	43 c0       	rjmp	.+134    	; 0x3fbc <Write+0xbb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f36:	fe 01       	movw	r30, r28
    3f38:	e3 59       	subi	r30, 0x93	; 147
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	60 81       	ld	r22, Z
    3f3e:	71 81       	ldd	r23, Z+1	; 0x01
    3f40:	82 81       	ldd	r24, Z+2	; 0x02
    3f42:	93 81       	ldd	r25, Z+3	; 0x03
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	40 e2       	ldi	r20, 0x20	; 32
    3f4a:	51 e4       	ldi	r21, 0x41	; 65
    3f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	8e 01       	movw	r16, r28
    3f56:	09 59       	subi	r16, 0x99	; 153
    3f58:	1f 4f       	sbci	r17, 0xFF	; 255
    3f5a:	bc 01       	movw	r22, r24
    3f5c:	cd 01       	movw	r24, r26
    3f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	f8 01       	movw	r30, r16
    3f68:	91 83       	std	Z+1, r25	; 0x01
    3f6a:	80 83       	st	Z, r24
    3f6c:	1f c0       	rjmp	.+62     	; 0x3fac <Write+0xba2>
    3f6e:	fe 01       	movw	r30, r28
    3f70:	eb 59       	subi	r30, 0x9B	; 155
    3f72:	ff 4f       	sbci	r31, 0xFF	; 255
    3f74:	80 e9       	ldi	r24, 0x90	; 144
    3f76:	91 e0       	ldi	r25, 0x01	; 1
    3f78:	91 83       	std	Z+1, r25	; 0x01
    3f7a:	80 83       	st	Z, r24
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	eb 59       	subi	r30, 0x9B	; 155
    3f80:	ff 4f       	sbci	r31, 0xFF	; 255
    3f82:	80 81       	ld	r24, Z
    3f84:	91 81       	ldd	r25, Z+1	; 0x01
    3f86:	01 97       	sbiw	r24, 0x01	; 1
    3f88:	f1 f7       	brne	.-4      	; 0x3f86 <Write+0xb7c>
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	eb 59       	subi	r30, 0x9B	; 155
    3f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f90:	91 83       	std	Z+1, r25	; 0x01
    3f92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f94:	de 01       	movw	r26, r28
    3f96:	a9 59       	subi	r26, 0x99	; 153
    3f98:	bf 4f       	sbci	r27, 0xFF	; 255
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	e9 59       	subi	r30, 0x99	; 153
    3f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa0:	80 81       	ld	r24, Z
    3fa2:	91 81       	ldd	r25, Z+1	; 0x01
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	11 96       	adiw	r26, 0x01	; 1
    3fa8:	9c 93       	st	X, r25
    3faa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fac:	fe 01       	movw	r30, r28
    3fae:	e9 59       	subi	r30, 0x99	; 153
    3fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb2:	80 81       	ld	r24, Z
    3fb4:	91 81       	ldd	r25, Z+1	; 0x01
    3fb6:	00 97       	sbiw	r24, 0x00	; 0
    3fb8:	d1 f6       	brne	.-76     	; 0x3f6e <Write+0xb64>
    3fba:	27 c0       	rjmp	.+78     	; 0x400a <Write+0xc00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fbc:	8e 01       	movw	r16, r28
    3fbe:	09 59       	subi	r16, 0x99	; 153
    3fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	e7 59       	subi	r30, 0x97	; 151
    3fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc8:	60 81       	ld	r22, Z
    3fca:	71 81       	ldd	r23, Z+1	; 0x01
    3fcc:	82 81       	ldd	r24, Z+2	; 0x02
    3fce:	93 81       	ldd	r25, Z+3	; 0x03
    3fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	f8 01       	movw	r30, r16
    3fda:	91 83       	std	Z+1, r25	; 0x01
    3fdc:	80 83       	st	Z, r24
    3fde:	de 01       	movw	r26, r28
    3fe0:	ad 59       	subi	r26, 0x9D	; 157
    3fe2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e9 59       	subi	r30, 0x99	; 153
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	80 81       	ld	r24, Z
    3fec:	91 81       	ldd	r25, Z+1	; 0x01
    3fee:	8d 93       	st	X+, r24
    3ff0:	9c 93       	st	X, r25
    3ff2:	fe 01       	movw	r30, r28
    3ff4:	ed 59       	subi	r30, 0x9D	; 157
    3ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff8:	80 81       	ld	r24, Z
    3ffa:	91 81       	ldd	r25, Z+1	; 0x01
    3ffc:	01 97       	sbiw	r24, 0x01	; 1
    3ffe:	f1 f7       	brne	.-4      	; 0x3ffc <Write+0xbf2>
    4000:	fe 01       	movw	r30, r28
    4002:	ed 59       	subi	r30, 0x9D	; 157
    4004:	ff 4f       	sbci	r31, 0xFF	; 255
    4006:	91 83       	std	Z+1, r25	; 0x01
    4008:	80 83       	st	Z, r24
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,0);
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	60 e0       	ldi	r22, 0x00	; 0
    400e:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"7zl2om mn");
    4012:	83 ed       	ldi	r24, 0xD3	; 211
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    401a:	fe 01       	movw	r30, r28
    401c:	e1 5a       	subi	r30, 0xA1	; 161
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	aa e7       	ldi	r26, 0x7A	; 122
    4026:	b4 e4       	ldi	r27, 0x44	; 68
    4028:	80 83       	st	Z, r24
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	a2 83       	std	Z+2, r26	; 0x02
    402e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4030:	8e 01       	movw	r16, r28
    4032:	05 5a       	subi	r16, 0xA5	; 165
    4034:	1f 4f       	sbci	r17, 0xFF	; 255
    4036:	fe 01       	movw	r30, r28
    4038:	e1 5a       	subi	r30, 0xA1	; 161
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	60 81       	ld	r22, Z
    403e:	71 81       	ldd	r23, Z+1	; 0x01
    4040:	82 81       	ldd	r24, Z+2	; 0x02
    4042:	93 81       	ldd	r25, Z+3	; 0x03
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	4a e7       	ldi	r20, 0x7A	; 122
    404a:	55 e4       	ldi	r21, 0x45	; 69
    404c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4050:	dc 01       	movw	r26, r24
    4052:	cb 01       	movw	r24, r22
    4054:	f8 01       	movw	r30, r16
    4056:	80 83       	st	Z, r24
    4058:	91 83       	std	Z+1, r25	; 0x01
    405a:	a2 83       	std	Z+2, r26	; 0x02
    405c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    405e:	fe 01       	movw	r30, r28
    4060:	e5 5a       	subi	r30, 0xA5	; 165
    4062:	ff 4f       	sbci	r31, 0xFF	; 255
    4064:	60 81       	ld	r22, Z
    4066:	71 81       	ldd	r23, Z+1	; 0x01
    4068:	82 81       	ldd	r24, Z+2	; 0x02
    406a:	93 81       	ldd	r25, Z+3	; 0x03
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e8       	ldi	r20, 0x80	; 128
    4072:	5f e3       	ldi	r21, 0x3F	; 63
    4074:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4078:	88 23       	and	r24, r24
    407a:	44 f4       	brge	.+16     	; 0x408c <Write+0xc82>
		__ticks = 1;
    407c:	fe 01       	movw	r30, r28
    407e:	e7 5a       	subi	r30, 0xA7	; 167
    4080:	ff 4f       	sbci	r31, 0xFF	; 255
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	91 83       	std	Z+1, r25	; 0x01
    4088:	80 83       	st	Z, r24
    408a:	64 c0       	rjmp	.+200    	; 0x4154 <Write+0xd4a>
	else if (__tmp > 65535)
    408c:	fe 01       	movw	r30, r28
    408e:	e5 5a       	subi	r30, 0xA5	; 165
    4090:	ff 4f       	sbci	r31, 0xFF	; 255
    4092:	60 81       	ld	r22, Z
    4094:	71 81       	ldd	r23, Z+1	; 0x01
    4096:	82 81       	ldd	r24, Z+2	; 0x02
    4098:	93 81       	ldd	r25, Z+3	; 0x03
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	3f ef       	ldi	r19, 0xFF	; 255
    409e:	4f e7       	ldi	r20, 0x7F	; 127
    40a0:	57 e4       	ldi	r21, 0x47	; 71
    40a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40a6:	18 16       	cp	r1, r24
    40a8:	0c f0       	brlt	.+2      	; 0x40ac <Write+0xca2>
    40aa:	43 c0       	rjmp	.+134    	; 0x4132 <Write+0xd28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ac:	fe 01       	movw	r30, r28
    40ae:	e1 5a       	subi	r30, 0xA1	; 161
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	60 81       	ld	r22, Z
    40b4:	71 81       	ldd	r23, Z+1	; 0x01
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	93 81       	ldd	r25, Z+3	; 0x03
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	40 e2       	ldi	r20, 0x20	; 32
    40c0:	51 e4       	ldi	r21, 0x41	; 65
    40c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c6:	dc 01       	movw	r26, r24
    40c8:	cb 01       	movw	r24, r22
    40ca:	8e 01       	movw	r16, r28
    40cc:	07 5a       	subi	r16, 0xA7	; 167
    40ce:	1f 4f       	sbci	r17, 0xFF	; 255
    40d0:	bc 01       	movw	r22, r24
    40d2:	cd 01       	movw	r24, r26
    40d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d8:	dc 01       	movw	r26, r24
    40da:	cb 01       	movw	r24, r22
    40dc:	f8 01       	movw	r30, r16
    40de:	91 83       	std	Z+1, r25	; 0x01
    40e0:	80 83       	st	Z, r24
    40e2:	1f c0       	rjmp	.+62     	; 0x4122 <Write+0xd18>
    40e4:	fe 01       	movw	r30, r28
    40e6:	e9 5a       	subi	r30, 0xA9	; 169
    40e8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ea:	80 e9       	ldi	r24, 0x90	; 144
    40ec:	91 e0       	ldi	r25, 0x01	; 1
    40ee:	91 83       	std	Z+1, r25	; 0x01
    40f0:	80 83       	st	Z, r24
    40f2:	fe 01       	movw	r30, r28
    40f4:	e9 5a       	subi	r30, 0xA9	; 169
    40f6:	ff 4f       	sbci	r31, 0xFF	; 255
    40f8:	80 81       	ld	r24, Z
    40fa:	91 81       	ldd	r25, Z+1	; 0x01
    40fc:	01 97       	sbiw	r24, 0x01	; 1
    40fe:	f1 f7       	brne	.-4      	; 0x40fc <Write+0xcf2>
    4100:	fe 01       	movw	r30, r28
    4102:	e9 5a       	subi	r30, 0xA9	; 169
    4104:	ff 4f       	sbci	r31, 0xFF	; 255
    4106:	91 83       	std	Z+1, r25	; 0x01
    4108:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    410a:	de 01       	movw	r26, r28
    410c:	a7 5a       	subi	r26, 0xA7	; 167
    410e:	bf 4f       	sbci	r27, 0xFF	; 255
    4110:	fe 01       	movw	r30, r28
    4112:	e7 5a       	subi	r30, 0xA7	; 167
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	80 81       	ld	r24, Z
    4118:	91 81       	ldd	r25, Z+1	; 0x01
    411a:	01 97       	sbiw	r24, 0x01	; 1
    411c:	11 96       	adiw	r26, 0x01	; 1
    411e:	9c 93       	st	X, r25
    4120:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4122:	fe 01       	movw	r30, r28
    4124:	e7 5a       	subi	r30, 0xA7	; 167
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	80 81       	ld	r24, Z
    412a:	91 81       	ldd	r25, Z+1	; 0x01
    412c:	00 97       	sbiw	r24, 0x00	; 0
    412e:	d1 f6       	brne	.-76     	; 0x40e4 <Write+0xcda>
    4130:	27 c0       	rjmp	.+78     	; 0x4180 <Write+0xd76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4132:	8e 01       	movw	r16, r28
    4134:	07 5a       	subi	r16, 0xA7	; 167
    4136:	1f 4f       	sbci	r17, 0xFF	; 255
    4138:	fe 01       	movw	r30, r28
    413a:	e5 5a       	subi	r30, 0xA5	; 165
    413c:	ff 4f       	sbci	r31, 0xFF	; 255
    413e:	60 81       	ld	r22, Z
    4140:	71 81       	ldd	r23, Z+1	; 0x01
    4142:	82 81       	ldd	r24, Z+2	; 0x02
    4144:	93 81       	ldd	r25, Z+3	; 0x03
    4146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    414a:	dc 01       	movw	r26, r24
    414c:	cb 01       	movw	r24, r22
    414e:	f8 01       	movw	r30, r16
    4150:	91 83       	std	Z+1, r25	; 0x01
    4152:	80 83       	st	Z, r24
    4154:	de 01       	movw	r26, r28
    4156:	ab 5a       	subi	r26, 0xAB	; 171
    4158:	bf 4f       	sbci	r27, 0xFF	; 255
    415a:	fe 01       	movw	r30, r28
    415c:	e7 5a       	subi	r30, 0xA7	; 167
    415e:	ff 4f       	sbci	r31, 0xFF	; 255
    4160:	80 81       	ld	r24, Z
    4162:	91 81       	ldd	r25, Z+1	; 0x01
    4164:	8d 93       	st	X+, r24
    4166:	9c 93       	st	X, r25
    4168:	fe 01       	movw	r30, r28
    416a:	eb 5a       	subi	r30, 0xAB	; 171
    416c:	ff 4f       	sbci	r31, 0xFF	; 255
    416e:	80 81       	ld	r24, Z
    4170:	91 81       	ldd	r25, Z+1	; 0x01
    4172:	01 97       	sbiw	r24, 0x01	; 1
    4174:	f1 f7       	brne	.-4      	; 0x4172 <Write+0xd68>
    4176:	fe 01       	movw	r30, r28
    4178:	eb 5a       	subi	r30, 0xAB	; 171
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	91 83       	std	Z+1, r25	; 0x01
    417e:	80 83       	st	Z, r24
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,11);
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	6b e0       	ldi	r22, 0x0B	; 11
    4184:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"7zl2ommm");
    4188:	8d ed       	ldi	r24, 0xDD	; 221
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    4190:	fe 01       	movw	r30, r28
    4192:	ef 5a       	subi	r30, 0xAF	; 175
    4194:	ff 4f       	sbci	r31, 0xFF	; 255
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	aa e7       	ldi	r26, 0x7A	; 122
    419c:	b4 e4       	ldi	r27, 0x44	; 68
    419e:	80 83       	st	Z, r24
    41a0:	91 83       	std	Z+1, r25	; 0x01
    41a2:	a2 83       	std	Z+2, r26	; 0x02
    41a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a6:	8e 01       	movw	r16, r28
    41a8:	03 5b       	subi	r16, 0xB3	; 179
    41aa:	1f 4f       	sbci	r17, 0xFF	; 255
    41ac:	fe 01       	movw	r30, r28
    41ae:	ef 5a       	subi	r30, 0xAF	; 175
    41b0:	ff 4f       	sbci	r31, 0xFF	; 255
    41b2:	60 81       	ld	r22, Z
    41b4:	71 81       	ldd	r23, Z+1	; 0x01
    41b6:	82 81       	ldd	r24, Z+2	; 0x02
    41b8:	93 81       	ldd	r25, Z+3	; 0x03
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	4a e7       	ldi	r20, 0x7A	; 122
    41c0:	55 e4       	ldi	r21, 0x45	; 69
    41c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	f8 01       	movw	r30, r16
    41cc:	80 83       	st	Z, r24
    41ce:	91 83       	std	Z+1, r25	; 0x01
    41d0:	a2 83       	std	Z+2, r26	; 0x02
    41d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41d4:	fe 01       	movw	r30, r28
    41d6:	e3 5b       	subi	r30, 0xB3	; 179
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	60 81       	ld	r22, Z
    41dc:	71 81       	ldd	r23, Z+1	; 0x01
    41de:	82 81       	ldd	r24, Z+2	; 0x02
    41e0:	93 81       	ldd	r25, Z+3	; 0x03
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	40 e8       	ldi	r20, 0x80	; 128
    41e8:	5f e3       	ldi	r21, 0x3F	; 63
    41ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41ee:	88 23       	and	r24, r24
    41f0:	44 f4       	brge	.+16     	; 0x4202 <Write+0xdf8>
		__ticks = 1;
    41f2:	fe 01       	movw	r30, r28
    41f4:	e5 5b       	subi	r30, 0xB5	; 181
    41f6:	ff 4f       	sbci	r31, 0xFF	; 255
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	91 83       	std	Z+1, r25	; 0x01
    41fe:	80 83       	st	Z, r24
    4200:	64 c0       	rjmp	.+200    	; 0x42ca <Write+0xec0>
	else if (__tmp > 65535)
    4202:	fe 01       	movw	r30, r28
    4204:	e3 5b       	subi	r30, 0xB3	; 179
    4206:	ff 4f       	sbci	r31, 0xFF	; 255
    4208:	60 81       	ld	r22, Z
    420a:	71 81       	ldd	r23, Z+1	; 0x01
    420c:	82 81       	ldd	r24, Z+2	; 0x02
    420e:	93 81       	ldd	r25, Z+3	; 0x03
    4210:	20 e0       	ldi	r18, 0x00	; 0
    4212:	3f ef       	ldi	r19, 0xFF	; 255
    4214:	4f e7       	ldi	r20, 0x7F	; 127
    4216:	57 e4       	ldi	r21, 0x47	; 71
    4218:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    421c:	18 16       	cp	r1, r24
    421e:	0c f0       	brlt	.+2      	; 0x4222 <Write+0xe18>
    4220:	43 c0       	rjmp	.+134    	; 0x42a8 <Write+0xe9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4222:	fe 01       	movw	r30, r28
    4224:	ef 5a       	subi	r30, 0xAF	; 175
    4226:	ff 4f       	sbci	r31, 0xFF	; 255
    4228:	60 81       	ld	r22, Z
    422a:	71 81       	ldd	r23, Z+1	; 0x01
    422c:	82 81       	ldd	r24, Z+2	; 0x02
    422e:	93 81       	ldd	r25, Z+3	; 0x03
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	40 e2       	ldi	r20, 0x20	; 32
    4236:	51 e4       	ldi	r21, 0x41	; 65
    4238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423c:	dc 01       	movw	r26, r24
    423e:	cb 01       	movw	r24, r22
    4240:	8e 01       	movw	r16, r28
    4242:	05 5b       	subi	r16, 0xB5	; 181
    4244:	1f 4f       	sbci	r17, 0xFF	; 255
    4246:	bc 01       	movw	r22, r24
    4248:	cd 01       	movw	r24, r26
    424a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424e:	dc 01       	movw	r26, r24
    4250:	cb 01       	movw	r24, r22
    4252:	f8 01       	movw	r30, r16
    4254:	91 83       	std	Z+1, r25	; 0x01
    4256:	80 83       	st	Z, r24
    4258:	1f c0       	rjmp	.+62     	; 0x4298 <Write+0xe8e>
    425a:	fe 01       	movw	r30, r28
    425c:	e7 5b       	subi	r30, 0xB7	; 183
    425e:	ff 4f       	sbci	r31, 0xFF	; 255
    4260:	80 e9       	ldi	r24, 0x90	; 144
    4262:	91 e0       	ldi	r25, 0x01	; 1
    4264:	91 83       	std	Z+1, r25	; 0x01
    4266:	80 83       	st	Z, r24
    4268:	fe 01       	movw	r30, r28
    426a:	e7 5b       	subi	r30, 0xB7	; 183
    426c:	ff 4f       	sbci	r31, 0xFF	; 255
    426e:	80 81       	ld	r24, Z
    4270:	91 81       	ldd	r25, Z+1	; 0x01
    4272:	01 97       	sbiw	r24, 0x01	; 1
    4274:	f1 f7       	brne	.-4      	; 0x4272 <Write+0xe68>
    4276:	fe 01       	movw	r30, r28
    4278:	e7 5b       	subi	r30, 0xB7	; 183
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	91 83       	std	Z+1, r25	; 0x01
    427e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4280:	de 01       	movw	r26, r28
    4282:	a5 5b       	subi	r26, 0xB5	; 181
    4284:	bf 4f       	sbci	r27, 0xFF	; 255
    4286:	fe 01       	movw	r30, r28
    4288:	e5 5b       	subi	r30, 0xB5	; 181
    428a:	ff 4f       	sbci	r31, 0xFF	; 255
    428c:	80 81       	ld	r24, Z
    428e:	91 81       	ldd	r25, Z+1	; 0x01
    4290:	01 97       	sbiw	r24, 0x01	; 1
    4292:	11 96       	adiw	r26, 0x01	; 1
    4294:	9c 93       	st	X, r25
    4296:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4298:	fe 01       	movw	r30, r28
    429a:	e5 5b       	subi	r30, 0xB5	; 181
    429c:	ff 4f       	sbci	r31, 0xFF	; 255
    429e:	80 81       	ld	r24, Z
    42a0:	91 81       	ldd	r25, Z+1	; 0x01
    42a2:	00 97       	sbiw	r24, 0x00	; 0
    42a4:	d1 f6       	brne	.-76     	; 0x425a <Write+0xe50>
    42a6:	27 c0       	rjmp	.+78     	; 0x42f6 <Write+0xeec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a8:	8e 01       	movw	r16, r28
    42aa:	05 5b       	subi	r16, 0xB5	; 181
    42ac:	1f 4f       	sbci	r17, 0xFF	; 255
    42ae:	fe 01       	movw	r30, r28
    42b0:	e3 5b       	subi	r30, 0xB3	; 179
    42b2:	ff 4f       	sbci	r31, 0xFF	; 255
    42b4:	60 81       	ld	r22, Z
    42b6:	71 81       	ldd	r23, Z+1	; 0x01
    42b8:	82 81       	ldd	r24, Z+2	; 0x02
    42ba:	93 81       	ldd	r25, Z+3	; 0x03
    42bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	f8 01       	movw	r30, r16
    42c6:	91 83       	std	Z+1, r25	; 0x01
    42c8:	80 83       	st	Z, r24
    42ca:	de 01       	movw	r26, r28
    42cc:	a9 5b       	subi	r26, 0xB9	; 185
    42ce:	bf 4f       	sbci	r27, 0xFF	; 255
    42d0:	fe 01       	movw	r30, r28
    42d2:	e5 5b       	subi	r30, 0xB5	; 181
    42d4:	ff 4f       	sbci	r31, 0xFF	; 255
    42d6:	80 81       	ld	r24, Z
    42d8:	91 81       	ldd	r25, Z+1	; 0x01
    42da:	8d 93       	st	X+, r24
    42dc:	9c 93       	st	X, r25
    42de:	fe 01       	movw	r30, r28
    42e0:	e9 5b       	subi	r30, 0xB9	; 185
    42e2:	ff 4f       	sbci	r31, 0xFF	; 255
    42e4:	80 81       	ld	r24, Z
    42e6:	91 81       	ldd	r25, Z+1	; 0x01
    42e8:	01 97       	sbiw	r24, 0x01	; 1
    42ea:	f1 f7       	brne	.-4      	; 0x42e8 <Write+0xede>
    42ec:	fe 01       	movw	r30, r28
    42ee:	e9 5b       	subi	r30, 0xB9	; 185
    42f0:	ff 4f       	sbci	r31, 0xFF	; 255
    42f2:	91 83       	std	Z+1, r25	; 0x01
    42f4:	80 83       	st	Z, r24
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,0);
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	60 e0       	ldi	r22, 0x00	; 0
    42fa:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"aywa meen");
    42fe:	86 ee       	ldi	r24, 0xE6	; 230
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    4306:	fe 01       	movw	r30, r28
    4308:	ed 5b       	subi	r30, 0xBD	; 189
    430a:	ff 4f       	sbci	r31, 0xFF	; 255
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	aa e7       	ldi	r26, 0x7A	; 122
    4312:	b4 e4       	ldi	r27, 0x44	; 68
    4314:	80 83       	st	Z, r24
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	a2 83       	std	Z+2, r26	; 0x02
    431a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431c:	8e 01       	movw	r16, r28
    431e:	01 5c       	subi	r16, 0xC1	; 193
    4320:	1f 4f       	sbci	r17, 0xFF	; 255
    4322:	fe 01       	movw	r30, r28
    4324:	ed 5b       	subi	r30, 0xBD	; 189
    4326:	ff 4f       	sbci	r31, 0xFF	; 255
    4328:	60 81       	ld	r22, Z
    432a:	71 81       	ldd	r23, Z+1	; 0x01
    432c:	82 81       	ldd	r24, Z+2	; 0x02
    432e:	93 81       	ldd	r25, Z+3	; 0x03
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	4a e7       	ldi	r20, 0x7A	; 122
    4336:	55 e4       	ldi	r21, 0x45	; 69
    4338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	f8 01       	movw	r30, r16
    4342:	80 83       	st	Z, r24
    4344:	91 83       	std	Z+1, r25	; 0x01
    4346:	a2 83       	std	Z+2, r26	; 0x02
    4348:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    434a:	fe 01       	movw	r30, r28
    434c:	ff 96       	adiw	r30, 0x3f	; 63
    434e:	60 81       	ld	r22, Z
    4350:	71 81       	ldd	r23, Z+1	; 0x01
    4352:	82 81       	ldd	r24, Z+2	; 0x02
    4354:	93 81       	ldd	r25, Z+3	; 0x03
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	40 e8       	ldi	r20, 0x80	; 128
    435c:	5f e3       	ldi	r21, 0x3F	; 63
    435e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4362:	88 23       	and	r24, r24
    4364:	2c f4       	brge	.+10     	; 0x4370 <Write+0xf66>
		__ticks = 1;
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	9e af       	std	Y+62, r25	; 0x3e
    436c:	8d af       	std	Y+61, r24	; 0x3d
    436e:	46 c0       	rjmp	.+140    	; 0x43fc <Write+0xff2>
	else if (__tmp > 65535)
    4370:	fe 01       	movw	r30, r28
    4372:	ff 96       	adiw	r30, 0x3f	; 63
    4374:	60 81       	ld	r22, Z
    4376:	71 81       	ldd	r23, Z+1	; 0x01
    4378:	82 81       	ldd	r24, Z+2	; 0x02
    437a:	93 81       	ldd	r25, Z+3	; 0x03
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	3f ef       	ldi	r19, 0xFF	; 255
    4380:	4f e7       	ldi	r20, 0x7F	; 127
    4382:	57 e4       	ldi	r21, 0x47	; 71
    4384:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4388:	18 16       	cp	r1, r24
    438a:	64 f5       	brge	.+88     	; 0x43e4 <Write+0xfda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    438c:	fe 01       	movw	r30, r28
    438e:	ed 5b       	subi	r30, 0xBD	; 189
    4390:	ff 4f       	sbci	r31, 0xFF	; 255
    4392:	60 81       	ld	r22, Z
    4394:	71 81       	ldd	r23, Z+1	; 0x01
    4396:	82 81       	ldd	r24, Z+2	; 0x02
    4398:	93 81       	ldd	r25, Z+3	; 0x03
    439a:	20 e0       	ldi	r18, 0x00	; 0
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	40 e2       	ldi	r20, 0x20	; 32
    43a0:	51 e4       	ldi	r21, 0x41	; 65
    43a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	bc 01       	movw	r22, r24
    43ac:	cd 01       	movw	r24, r26
    43ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	9e af       	std	Y+62, r25	; 0x3e
    43b8:	8d af       	std	Y+61, r24	; 0x3d
    43ba:	0f c0       	rjmp	.+30     	; 0x43da <Write+0xfd0>
    43bc:	80 e9       	ldi	r24, 0x90	; 144
    43be:	91 e0       	ldi	r25, 0x01	; 1
    43c0:	9c af       	std	Y+60, r25	; 0x3c
    43c2:	8b af       	std	Y+59, r24	; 0x3b
    43c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    43c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	f1 f7       	brne	.-4      	; 0x43c8 <Write+0xfbe>
    43cc:	9c af       	std	Y+60, r25	; 0x3c
    43ce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    43d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	9e af       	std	Y+62, r25	; 0x3e
    43d8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43da:	8d ad       	ldd	r24, Y+61	; 0x3d
    43dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    43de:	00 97       	sbiw	r24, 0x00	; 0
    43e0:	69 f7       	brne	.-38     	; 0x43bc <Write+0xfb2>
    43e2:	16 c0       	rjmp	.+44     	; 0x4410 <Write+0x1006>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e4:	fe 01       	movw	r30, r28
    43e6:	ff 96       	adiw	r30, 0x3f	; 63
    43e8:	60 81       	ld	r22, Z
    43ea:	71 81       	ldd	r23, Z+1	; 0x01
    43ec:	82 81       	ldd	r24, Z+2	; 0x02
    43ee:	93 81       	ldd	r25, Z+3	; 0x03
    43f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	9e af       	std	Y+62, r25	; 0x3e
    43fa:	8d af       	std	Y+61, r24	; 0x3d
    43fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    43fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    4400:	9a af       	std	Y+58, r25	; 0x3a
    4402:	89 af       	std	Y+57, r24	; 0x39
    4404:	89 ad       	ldd	r24, Y+57	; 0x39
    4406:	9a ad       	ldd	r25, Y+58	; 0x3a
    4408:	01 97       	sbiw	r24, 0x01	; 1
    440a:	f1 f7       	brne	.-4      	; 0x4408 <Write+0xffe>
    440c:	9a af       	std	Y+58, r25	; 0x3a
    440e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,11);
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	6b e0       	ldi	r22, 0x0B	; 11
    4414:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"ana el...");
    4418:	80 ef       	ldi	r24, 0xF0	; 240
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	aa e7       	ldi	r26, 0x7A	; 122
    4426:	b4 e4       	ldi	r27, 0x44	; 68
    4428:	8d ab       	std	Y+53, r24	; 0x35
    442a:	9e ab       	std	Y+54, r25	; 0x36
    442c:	af ab       	std	Y+55, r26	; 0x37
    442e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4430:	6d a9       	ldd	r22, Y+53	; 0x35
    4432:	7e a9       	ldd	r23, Y+54	; 0x36
    4434:	8f a9       	ldd	r24, Y+55	; 0x37
    4436:	98 ad       	ldd	r25, Y+56	; 0x38
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	4a e7       	ldi	r20, 0x7A	; 122
    443e:	55 e4       	ldi	r21, 0x45	; 69
    4440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	89 ab       	std	Y+49, r24	; 0x31
    444a:	9a ab       	std	Y+50, r25	; 0x32
    444c:	ab ab       	std	Y+51, r26	; 0x33
    444e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4450:	69 a9       	ldd	r22, Y+49	; 0x31
    4452:	7a a9       	ldd	r23, Y+50	; 0x32
    4454:	8b a9       	ldd	r24, Y+51	; 0x33
    4456:	9c a9       	ldd	r25, Y+52	; 0x34
    4458:	20 e0       	ldi	r18, 0x00	; 0
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	40 e8       	ldi	r20, 0x80	; 128
    445e:	5f e3       	ldi	r21, 0x3F	; 63
    4460:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4464:	88 23       	and	r24, r24
    4466:	2c f4       	brge	.+10     	; 0x4472 <Write+0x1068>
		__ticks = 1;
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	98 ab       	std	Y+48, r25	; 0x30
    446e:	8f a7       	std	Y+47, r24	; 0x2f
    4470:	3f c0       	rjmp	.+126    	; 0x44f0 <Write+0x10e6>
	else if (__tmp > 65535)
    4472:	69 a9       	ldd	r22, Y+49	; 0x31
    4474:	7a a9       	ldd	r23, Y+50	; 0x32
    4476:	8b a9       	ldd	r24, Y+51	; 0x33
    4478:	9c a9       	ldd	r25, Y+52	; 0x34
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	3f ef       	ldi	r19, 0xFF	; 255
    447e:	4f e7       	ldi	r20, 0x7F	; 127
    4480:	57 e4       	ldi	r21, 0x47	; 71
    4482:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4486:	18 16       	cp	r1, r24
    4488:	4c f5       	brge	.+82     	; 0x44dc <Write+0x10d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    448a:	6d a9       	ldd	r22, Y+53	; 0x35
    448c:	7e a9       	ldd	r23, Y+54	; 0x36
    448e:	8f a9       	ldd	r24, Y+55	; 0x37
    4490:	98 ad       	ldd	r25, Y+56	; 0x38
    4492:	20 e0       	ldi	r18, 0x00	; 0
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	40 e2       	ldi	r20, 0x20	; 32
    4498:	51 e4       	ldi	r21, 0x41	; 65
    449a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    449e:	dc 01       	movw	r26, r24
    44a0:	cb 01       	movw	r24, r22
    44a2:	bc 01       	movw	r22, r24
    44a4:	cd 01       	movw	r24, r26
    44a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	98 ab       	std	Y+48, r25	; 0x30
    44b0:	8f a7       	std	Y+47, r24	; 0x2f
    44b2:	0f c0       	rjmp	.+30     	; 0x44d2 <Write+0x10c8>
    44b4:	80 e9       	ldi	r24, 0x90	; 144
    44b6:	91 e0       	ldi	r25, 0x01	; 1
    44b8:	9e a7       	std	Y+46, r25	; 0x2e
    44ba:	8d a7       	std	Y+45, r24	; 0x2d
    44bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    44be:	9e a5       	ldd	r25, Y+46	; 0x2e
    44c0:	01 97       	sbiw	r24, 0x01	; 1
    44c2:	f1 f7       	brne	.-4      	; 0x44c0 <Write+0x10b6>
    44c4:	9e a7       	std	Y+46, r25	; 0x2e
    44c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    44ca:	98 a9       	ldd	r25, Y+48	; 0x30
    44cc:	01 97       	sbiw	r24, 0x01	; 1
    44ce:	98 ab       	std	Y+48, r25	; 0x30
    44d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    44d4:	98 a9       	ldd	r25, Y+48	; 0x30
    44d6:	00 97       	sbiw	r24, 0x00	; 0
    44d8:	69 f7       	brne	.-38     	; 0x44b4 <Write+0x10aa>
    44da:	14 c0       	rjmp	.+40     	; 0x4504 <Write+0x10fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44dc:	69 a9       	ldd	r22, Y+49	; 0x31
    44de:	7a a9       	ldd	r23, Y+50	; 0x32
    44e0:	8b a9       	ldd	r24, Y+51	; 0x33
    44e2:	9c a9       	ldd	r25, Y+52	; 0x34
    44e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e8:	dc 01       	movw	r26, r24
    44ea:	cb 01       	movw	r24, r22
    44ec:	98 ab       	std	Y+48, r25	; 0x30
    44ee:	8f a7       	std	Y+47, r24	; 0x2f
    44f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    44f2:	98 a9       	ldd	r25, Y+48	; 0x30
    44f4:	9c a7       	std	Y+44, r25	; 0x2c
    44f6:	8b a7       	std	Y+43, r24	; 0x2b
    44f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    44fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    44fc:	01 97       	sbiw	r24, 0x01	; 1
    44fe:	f1 f7       	brne	.-4      	; 0x44fc <Write+0x10f2>
    4500:	9c a7       	std	Y+44, r25	; 0x2c
    4502:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,0);
    4504:	81 e0       	ldi	r24, 0x01	; 1
    4506:	60 e0       	ldi	r22, 0x00	; 0
    4508:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"el eh!   ");
    450c:	8a ef       	ldi	r24, 0xFA	; 250
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    4514:	80 e0       	ldi	r24, 0x00	; 0
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	aa e7       	ldi	r26, 0x7A	; 122
    451a:	b4 e4       	ldi	r27, 0x44	; 68
    451c:	8f a3       	std	Y+39, r24	; 0x27
    451e:	98 a7       	std	Y+40, r25	; 0x28
    4520:	a9 a7       	std	Y+41, r26	; 0x29
    4522:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4524:	6f a1       	ldd	r22, Y+39	; 0x27
    4526:	78 a5       	ldd	r23, Y+40	; 0x28
    4528:	89 a5       	ldd	r24, Y+41	; 0x29
    452a:	9a a5       	ldd	r25, Y+42	; 0x2a
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	4a e7       	ldi	r20, 0x7A	; 122
    4532:	55 e4       	ldi	r21, 0x45	; 69
    4534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	8b a3       	std	Y+35, r24	; 0x23
    453e:	9c a3       	std	Y+36, r25	; 0x24
    4540:	ad a3       	std	Y+37, r26	; 0x25
    4542:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4544:	6b a1       	ldd	r22, Y+35	; 0x23
    4546:	7c a1       	ldd	r23, Y+36	; 0x24
    4548:	8d a1       	ldd	r24, Y+37	; 0x25
    454a:	9e a1       	ldd	r25, Y+38	; 0x26
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e8       	ldi	r20, 0x80	; 128
    4552:	5f e3       	ldi	r21, 0x3F	; 63
    4554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4558:	88 23       	and	r24, r24
    455a:	2c f4       	brge	.+10     	; 0x4566 <Write+0x115c>
		__ticks = 1;
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	9a a3       	std	Y+34, r25	; 0x22
    4562:	89 a3       	std	Y+33, r24	; 0x21
    4564:	3f c0       	rjmp	.+126    	; 0x45e4 <Write+0x11da>
	else if (__tmp > 65535)
    4566:	6b a1       	ldd	r22, Y+35	; 0x23
    4568:	7c a1       	ldd	r23, Y+36	; 0x24
    456a:	8d a1       	ldd	r24, Y+37	; 0x25
    456c:	9e a1       	ldd	r25, Y+38	; 0x26
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	3f ef       	ldi	r19, 0xFF	; 255
    4572:	4f e7       	ldi	r20, 0x7F	; 127
    4574:	57 e4       	ldi	r21, 0x47	; 71
    4576:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    457a:	18 16       	cp	r1, r24
    457c:	4c f5       	brge	.+82     	; 0x45d0 <Write+0x11c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    457e:	6f a1       	ldd	r22, Y+39	; 0x27
    4580:	78 a5       	ldd	r23, Y+40	; 0x28
    4582:	89 a5       	ldd	r24, Y+41	; 0x29
    4584:	9a a5       	ldd	r25, Y+42	; 0x2a
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	30 e0       	ldi	r19, 0x00	; 0
    458a:	40 e2       	ldi	r20, 0x20	; 32
    458c:	51 e4       	ldi	r21, 0x41	; 65
    458e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	bc 01       	movw	r22, r24
    4598:	cd 01       	movw	r24, r26
    459a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    459e:	dc 01       	movw	r26, r24
    45a0:	cb 01       	movw	r24, r22
    45a2:	9a a3       	std	Y+34, r25	; 0x22
    45a4:	89 a3       	std	Y+33, r24	; 0x21
    45a6:	0f c0       	rjmp	.+30     	; 0x45c6 <Write+0x11bc>
    45a8:	80 e9       	ldi	r24, 0x90	; 144
    45aa:	91 e0       	ldi	r25, 0x01	; 1
    45ac:	98 a3       	std	Y+32, r25	; 0x20
    45ae:	8f 8f       	std	Y+31, r24	; 0x1f
    45b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45b2:	98 a1       	ldd	r25, Y+32	; 0x20
    45b4:	01 97       	sbiw	r24, 0x01	; 1
    45b6:	f1 f7       	brne	.-4      	; 0x45b4 <Write+0x11aa>
    45b8:	98 a3       	std	Y+32, r25	; 0x20
    45ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45bc:	89 a1       	ldd	r24, Y+33	; 0x21
    45be:	9a a1       	ldd	r25, Y+34	; 0x22
    45c0:	01 97       	sbiw	r24, 0x01	; 1
    45c2:	9a a3       	std	Y+34, r25	; 0x22
    45c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c6:	89 a1       	ldd	r24, Y+33	; 0x21
    45c8:	9a a1       	ldd	r25, Y+34	; 0x22
    45ca:	00 97       	sbiw	r24, 0x00	; 0
    45cc:	69 f7       	brne	.-38     	; 0x45a8 <Write+0x119e>
    45ce:	14 c0       	rjmp	.+40     	; 0x45f8 <Write+0x11ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d0:	6b a1       	ldd	r22, Y+35	; 0x23
    45d2:	7c a1       	ldd	r23, Y+36	; 0x24
    45d4:	8d a1       	ldd	r24, Y+37	; 0x25
    45d6:	9e a1       	ldd	r25, Y+38	; 0x26
    45d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	9a a3       	std	Y+34, r25	; 0x22
    45e2:	89 a3       	std	Y+33, r24	; 0x21
    45e4:	89 a1       	ldd	r24, Y+33	; 0x21
    45e6:	9a a1       	ldd	r25, Y+34	; 0x22
    45e8:	9e 8f       	std	Y+30, r25	; 0x1e
    45ea:	8d 8f       	std	Y+29, r24	; 0x1d
    45ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	f1 f7       	brne	.-4      	; 0x45f0 <Write+0x11e6>
    45f4:	9e 8f       	std	Y+30, r25	; 0x1e
    45f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,11);
    45f8:	81 e0       	ldi	r24, 0x01	; 1
    45fa:	6b e0       	ldi	r22, 0x0B	; 11
    45fc:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"el update");
    4600:	84 e0       	ldi	r24, 0x04	; 4
    4602:	91 e0       	ldi	r25, 0x01	; 1
    4604:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
	LCD_voidGoToPosition(2,11);
    4608:	82 e0       	ldi	r24, 0x02	; 2
    460a:	6b e0       	ldi	r22, 0x0B	; 11
    460c:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"bt3k fe  ");
    4610:	8e e0       	ldi	r24, 0x0E	; 14
    4612:	91 e0       	ldi	r25, 0x01	; 1
    4614:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
	LCD_voidGoToPosition(3,11);
    4618:	83 e0       	ldi	r24, 0x03	; 3
    461a:	6b e0       	ldi	r22, 0x0B	; 11
    461c:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"NTI      ");
    4620:	88 e1       	ldi	r24, 0x18	; 24
    4622:	91 e0       	ldi	r25, 0x01	; 1
    4624:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	aa e7       	ldi	r26, 0x7A	; 122
    462e:	b4 e4       	ldi	r27, 0x44	; 68
    4630:	89 8f       	std	Y+25, r24	; 0x19
    4632:	9a 8f       	std	Y+26, r25	; 0x1a
    4634:	ab 8f       	std	Y+27, r26	; 0x1b
    4636:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4638:	69 8d       	ldd	r22, Y+25	; 0x19
    463a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    463c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    463e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	4a e7       	ldi	r20, 0x7A	; 122
    4646:	55 e4       	ldi	r21, 0x45	; 69
    4648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    464c:	dc 01       	movw	r26, r24
    464e:	cb 01       	movw	r24, r22
    4650:	8d 8b       	std	Y+21, r24	; 0x15
    4652:	9e 8b       	std	Y+22, r25	; 0x16
    4654:	af 8b       	std	Y+23, r26	; 0x17
    4656:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4658:	6d 89       	ldd	r22, Y+21	; 0x15
    465a:	7e 89       	ldd	r23, Y+22	; 0x16
    465c:	8f 89       	ldd	r24, Y+23	; 0x17
    465e:	98 8d       	ldd	r25, Y+24	; 0x18
    4660:	20 e0       	ldi	r18, 0x00	; 0
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	40 e8       	ldi	r20, 0x80	; 128
    4666:	5f e3       	ldi	r21, 0x3F	; 63
    4668:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    466c:	88 23       	and	r24, r24
    466e:	2c f4       	brge	.+10     	; 0x467a <Write+0x1270>
		__ticks = 1;
    4670:	81 e0       	ldi	r24, 0x01	; 1
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	9c 8b       	std	Y+20, r25	; 0x14
    4676:	8b 8b       	std	Y+19, r24	; 0x13
    4678:	3f c0       	rjmp	.+126    	; 0x46f8 <Write+0x12ee>
	else if (__tmp > 65535)
    467a:	6d 89       	ldd	r22, Y+21	; 0x15
    467c:	7e 89       	ldd	r23, Y+22	; 0x16
    467e:	8f 89       	ldd	r24, Y+23	; 0x17
    4680:	98 8d       	ldd	r25, Y+24	; 0x18
    4682:	20 e0       	ldi	r18, 0x00	; 0
    4684:	3f ef       	ldi	r19, 0xFF	; 255
    4686:	4f e7       	ldi	r20, 0x7F	; 127
    4688:	57 e4       	ldi	r21, 0x47	; 71
    468a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    468e:	18 16       	cp	r1, r24
    4690:	4c f5       	brge	.+82     	; 0x46e4 <Write+0x12da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4692:	69 8d       	ldd	r22, Y+25	; 0x19
    4694:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4696:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4698:	9c 8d       	ldd	r25, Y+28	; 0x1c
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	40 e2       	ldi	r20, 0x20	; 32
    46a0:	51 e4       	ldi	r21, 0x41	; 65
    46a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a6:	dc 01       	movw	r26, r24
    46a8:	cb 01       	movw	r24, r22
    46aa:	bc 01       	movw	r22, r24
    46ac:	cd 01       	movw	r24, r26
    46ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b2:	dc 01       	movw	r26, r24
    46b4:	cb 01       	movw	r24, r22
    46b6:	9c 8b       	std	Y+20, r25	; 0x14
    46b8:	8b 8b       	std	Y+19, r24	; 0x13
    46ba:	0f c0       	rjmp	.+30     	; 0x46da <Write+0x12d0>
    46bc:	80 e9       	ldi	r24, 0x90	; 144
    46be:	91 e0       	ldi	r25, 0x01	; 1
    46c0:	9a 8b       	std	Y+18, r25	; 0x12
    46c2:	89 8b       	std	Y+17, r24	; 0x11
    46c4:	89 89       	ldd	r24, Y+17	; 0x11
    46c6:	9a 89       	ldd	r25, Y+18	; 0x12
    46c8:	01 97       	sbiw	r24, 0x01	; 1
    46ca:	f1 f7       	brne	.-4      	; 0x46c8 <Write+0x12be>
    46cc:	9a 8b       	std	Y+18, r25	; 0x12
    46ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46d0:	8b 89       	ldd	r24, Y+19	; 0x13
    46d2:	9c 89       	ldd	r25, Y+20	; 0x14
    46d4:	01 97       	sbiw	r24, 0x01	; 1
    46d6:	9c 8b       	std	Y+20, r25	; 0x14
    46d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46da:	8b 89       	ldd	r24, Y+19	; 0x13
    46dc:	9c 89       	ldd	r25, Y+20	; 0x14
    46de:	00 97       	sbiw	r24, 0x00	; 0
    46e0:	69 f7       	brne	.-38     	; 0x46bc <Write+0x12b2>
    46e2:	14 c0       	rjmp	.+40     	; 0x470c <Write+0x1302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46e4:	6d 89       	ldd	r22, Y+21	; 0x15
    46e6:	7e 89       	ldd	r23, Y+22	; 0x16
    46e8:	8f 89       	ldd	r24, Y+23	; 0x17
    46ea:	98 8d       	ldd	r25, Y+24	; 0x18
    46ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f0:	dc 01       	movw	r26, r24
    46f2:	cb 01       	movw	r24, r22
    46f4:	9c 8b       	std	Y+20, r25	; 0x14
    46f6:	8b 8b       	std	Y+19, r24	; 0x13
    46f8:	8b 89       	ldd	r24, Y+19	; 0x13
    46fa:	9c 89       	ldd	r25, Y+20	; 0x14
    46fc:	98 8b       	std	Y+16, r25	; 0x10
    46fe:	8f 87       	std	Y+15, r24	; 0x0f
    4700:	8f 85       	ldd	r24, Y+15	; 0x0f
    4702:	98 89       	ldd	r25, Y+16	; 0x10
    4704:	01 97       	sbiw	r24, 0x01	; 1
    4706:	f1 f7       	brne	.-4      	; 0x4704 <Write+0x12fa>
    4708:	98 8b       	std	Y+16, r25	; 0x10
    470a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(Delay_Time);
	LCD_voidGoToPosition(1,11);
    470c:	81 e0       	ldi	r24, 0x01	; 1
    470e:	6b e0       	ldi	r22, 0x0B	; 11
    4710:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"         ");
    4714:	82 e2       	ldi	r24, 0x22	; 34
    4716:	91 e0       	ldi	r25, 0x01	; 1
    4718:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
	LCD_voidClearLine(2,19);
    471c:	82 e0       	ldi	r24, 0x02	; 2
    471e:	63 e1       	ldi	r22, 0x13	; 19
    4720:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_voidClearLine>
	LCD_voidClearLine(3,19);
    4724:	83 e0       	ldi	r24, 0x03	; 3
    4726:	63 e1       	ldi	r22, 0x13	; 19
    4728:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_voidClearLine>
	LCD_voidDisplaySpecialChar(line,2,2,10);
    472c:	80 e9       	ldi	r24, 0x90	; 144
    472e:	92 e0       	ldi	r25, 0x02	; 2
    4730:	62 e0       	ldi	r22, 0x02	; 2
    4732:	42 e0       	ldi	r20, 0x02	; 2
    4734:	2a e0       	ldi	r18, 0x0A	; 10
    4736:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
	LCD_voidDisplaySpecialChar(line,2,3,10);
    473a:	80 e9       	ldi	r24, 0x90	; 144
    473c:	92 e0       	ldi	r25, 0x02	; 2
    473e:	62 e0       	ldi	r22, 0x02	; 2
    4740:	43 e0       	ldi	r20, 0x03	; 3
    4742:	2a e0       	ldi	r18, 0x0A	; 10
    4744:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
	LCD_voidGoToPosition(1,0);
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	60 e0       	ldi	r22, 0x00	; 0
    474c:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"Howa da!!");
    4750:	8c e2       	ldi	r24, 0x2C	; 44
    4752:	91 e0       	ldi	r25, 0x01	; 1
    4754:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
	LCD_voidGoToPosition(2,0);
    4758:	82 e0       	ldi	r24, 0x02	; 2
    475a:	60 e0       	ldi	r22, 0x00	; 0
    475c:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"entaa...");
    4760:	86 e3       	ldi	r24, 0x36	; 54
    4762:	91 e0       	ldi	r25, 0x01	; 1
    4764:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    4768:	80 e0       	ldi	r24, 0x00	; 0
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	aa e7       	ldi	r26, 0x7A	; 122
    476e:	b4 e4       	ldi	r27, 0x44	; 68
    4770:	8b 87       	std	Y+11, r24	; 0x0b
    4772:	9c 87       	std	Y+12, r25	; 0x0c
    4774:	ad 87       	std	Y+13, r26	; 0x0d
    4776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4778:	6b 85       	ldd	r22, Y+11	; 0x0b
    477a:	7c 85       	ldd	r23, Y+12	; 0x0c
    477c:	8d 85       	ldd	r24, Y+13	; 0x0d
    477e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	4a e7       	ldi	r20, 0x7A	; 122
    4786:	55 e4       	ldi	r21, 0x45	; 69
    4788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478c:	dc 01       	movw	r26, r24
    478e:	cb 01       	movw	r24, r22
    4790:	8f 83       	std	Y+7, r24	; 0x07
    4792:	98 87       	std	Y+8, r25	; 0x08
    4794:	a9 87       	std	Y+9, r26	; 0x09
    4796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4798:	6f 81       	ldd	r22, Y+7	; 0x07
    479a:	78 85       	ldd	r23, Y+8	; 0x08
    479c:	89 85       	ldd	r24, Y+9	; 0x09
    479e:	9a 85       	ldd	r25, Y+10	; 0x0a
    47a0:	20 e0       	ldi	r18, 0x00	; 0
    47a2:	30 e0       	ldi	r19, 0x00	; 0
    47a4:	40 e8       	ldi	r20, 0x80	; 128
    47a6:	5f e3       	ldi	r21, 0x3F	; 63
    47a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ac:	88 23       	and	r24, r24
    47ae:	2c f4       	brge	.+10     	; 0x47ba <Write+0x13b0>
		__ticks = 1;
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	9e 83       	std	Y+6, r25	; 0x06
    47b6:	8d 83       	std	Y+5, r24	; 0x05
    47b8:	3f c0       	rjmp	.+126    	; 0x4838 <Write+0x142e>
	else if (__tmp > 65535)
    47ba:	6f 81       	ldd	r22, Y+7	; 0x07
    47bc:	78 85       	ldd	r23, Y+8	; 0x08
    47be:	89 85       	ldd	r24, Y+9	; 0x09
    47c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	3f ef       	ldi	r19, 0xFF	; 255
    47c6:	4f e7       	ldi	r20, 0x7F	; 127
    47c8:	57 e4       	ldi	r21, 0x47	; 71
    47ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47ce:	18 16       	cp	r1, r24
    47d0:	4c f5       	brge	.+82     	; 0x4824 <Write+0x141a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    47d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    47d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    47d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	40 e2       	ldi	r20, 0x20	; 32
    47e0:	51 e4       	ldi	r21, 0x41	; 65
    47e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e6:	dc 01       	movw	r26, r24
    47e8:	cb 01       	movw	r24, r22
    47ea:	bc 01       	movw	r22, r24
    47ec:	cd 01       	movw	r24, r26
    47ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f2:	dc 01       	movw	r26, r24
    47f4:	cb 01       	movw	r24, r22
    47f6:	9e 83       	std	Y+6, r25	; 0x06
    47f8:	8d 83       	std	Y+5, r24	; 0x05
    47fa:	0f c0       	rjmp	.+30     	; 0x481a <Write+0x1410>
    47fc:	80 e9       	ldi	r24, 0x90	; 144
    47fe:	91 e0       	ldi	r25, 0x01	; 1
    4800:	9c 83       	std	Y+4, r25	; 0x04
    4802:	8b 83       	std	Y+3, r24	; 0x03
    4804:	8b 81       	ldd	r24, Y+3	; 0x03
    4806:	9c 81       	ldd	r25, Y+4	; 0x04
    4808:	01 97       	sbiw	r24, 0x01	; 1
    480a:	f1 f7       	brne	.-4      	; 0x4808 <Write+0x13fe>
    480c:	9c 83       	std	Y+4, r25	; 0x04
    480e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4810:	8d 81       	ldd	r24, Y+5	; 0x05
    4812:	9e 81       	ldd	r25, Y+6	; 0x06
    4814:	01 97       	sbiw	r24, 0x01	; 1
    4816:	9e 83       	std	Y+6, r25	; 0x06
    4818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    481a:	8d 81       	ldd	r24, Y+5	; 0x05
    481c:	9e 81       	ldd	r25, Y+6	; 0x06
    481e:	00 97       	sbiw	r24, 0x00	; 0
    4820:	69 f7       	brne	.-38     	; 0x47fc <Write+0x13f2>
    4822:	14 c0       	rjmp	.+40     	; 0x484c <Write+0x1442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4824:	6f 81       	ldd	r22, Y+7	; 0x07
    4826:	78 85       	ldd	r23, Y+8	; 0x08
    4828:	89 85       	ldd	r24, Y+9	; 0x09
    482a:	9a 85       	ldd	r25, Y+10	; 0x0a
    482c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4830:	dc 01       	movw	r26, r24
    4832:	cb 01       	movw	r24, r22
    4834:	9e 83       	std	Y+6, r25	; 0x06
    4836:	8d 83       	std	Y+5, r24	; 0x05
    4838:	8d 81       	ldd	r24, Y+5	; 0x05
    483a:	9e 81       	ldd	r25, Y+6	; 0x06
    483c:	9a 83       	std	Y+2, r25	; 0x02
    483e:	89 83       	std	Y+1, r24	; 0x01
    4840:	89 81       	ldd	r24, Y+1	; 0x01
    4842:	9a 81       	ldd	r25, Y+2	; 0x02
    4844:	01 97       	sbiw	r24, 0x01	; 1
    4846:	f1 f7       	brne	.-4      	; 0x4844 <Write+0x143a>
    4848:	9a 83       	std	Y+2, r25	; 0x02
    484a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(Delay_Time);
	LCD_voidClearLine(2,19);
    484c:	82 e0       	ldi	r24, 0x02	; 2
    484e:	63 e1       	ldi	r22, 0x13	; 19
    4850:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_voidClearLine>
	LCD_voidClearLine(3,19);
    4854:	83 e0       	ldi	r24, 0x03	; 3
    4856:	63 e1       	ldi	r22, 0x13	; 19
    4858:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_voidClearLine>
	LCD_voidDisplaySpecialChar(line,2,2,10);
    485c:	80 e9       	ldi	r24, 0x90	; 144
    485e:	92 e0       	ldi	r25, 0x02	; 2
    4860:	62 e0       	ldi	r22, 0x02	; 2
    4862:	42 e0       	ldi	r20, 0x02	; 2
    4864:	2a e0       	ldi	r18, 0x0A	; 10
    4866:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
	LCD_voidDisplaySpecialChar(line,2,3,10);
    486a:	80 e9       	ldi	r24, 0x90	; 144
    486c:	92 e0       	ldi	r25, 0x02	; 2
    486e:	62 e0       	ldi	r22, 0x02	; 2
    4870:	43 e0       	ldi	r20, 0x03	; 3
    4872:	2a e0       	ldi	r18, 0x0A	; 10
    4874:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>

}
    4878:	ce 52       	subi	r28, 0x2E	; 46
    487a:	df 4f       	sbci	r29, 0xFF	; 255
    487c:	0f b6       	in	r0, 0x3f	; 63
    487e:	f8 94       	cli
    4880:	de bf       	out	0x3e, r29	; 62
    4882:	0f be       	out	0x3f, r0	; 63
    4884:	cd bf       	out	0x3d, r28	; 61
    4886:	cf 91       	pop	r28
    4888:	df 91       	pop	r29
    488a:	1f 91       	pop	r17
    488c:	0f 91       	pop	r16
    488e:	08 95       	ret

00004890 <main>:
int main(void)
{
    4890:	df 93       	push	r29
    4892:	cf 93       	push	r28
    4894:	cd b7       	in	r28, 0x3d	; 61
    4896:	de b7       	in	r29, 0x3e	; 62
    4898:	2f 97       	sbiw	r28, 0x0f	; 15
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	f8 94       	cli
    489e:	de bf       	out	0x3e, r29	; 62
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    48a4:	0e 94 17 07 	call	0xe2e	; 0xe2e <PORT_voidInit>
	LCD_voidInit();
    48a8:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <LCD_voidInit>

	LCD_voidGoToPosition(0,0);
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	60 e0       	ldi	r22, 0x00	; 0
    48b0:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"Mara 7mok4a kan ma4y");
    48b4:	8f e3       	ldi	r24, 0x3F	; 63
    48b6:	91 e0       	ldi	r25, 0x01	; 1
    48b8:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>

	for(u8 x=7; x < 13; x++)
    48bc:	87 e0       	ldi	r24, 0x07	; 7
    48be:	8f 87       	std	Y+15, r24	; 0x0f
    48c0:	80 c0       	rjmp	.+256    	; 0x49c2 <main+0x132>
	{
		LCD_voidDisplaySpecialChar(P1,0,1,x);
    48c2:	88 e7       	ldi	r24, 0x78	; 120
    48c4:	92 e0       	ldi	r25, 0x02	; 2
    48c6:	60 e0       	ldi	r22, 0x00	; 0
    48c8:	41 e0       	ldi	r20, 0x01	; 1
    48ca:	2f 85       	ldd	r18, Y+15	; 0x0f
    48cc:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <LCD_voidDisplaySpecialChar>
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	a6 e1       	ldi	r26, 0x16	; 22
    48d6:	b3 e4       	ldi	r27, 0x43	; 67
    48d8:	8b 87       	std	Y+11, r24	; 0x0b
    48da:	9c 87       	std	Y+12, r25	; 0x0c
    48dc:	ad 87       	std	Y+13, r26	; 0x0d
    48de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    48e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    48e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    48e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    48e8:	20 e0       	ldi	r18, 0x00	; 0
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	4a e7       	ldi	r20, 0x7A	; 122
    48ee:	55 e4       	ldi	r21, 0x45	; 69
    48f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48f4:	dc 01       	movw	r26, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	8f 83       	std	Y+7, r24	; 0x07
    48fa:	98 87       	std	Y+8, r25	; 0x08
    48fc:	a9 87       	std	Y+9, r26	; 0x09
    48fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4900:	6f 81       	ldd	r22, Y+7	; 0x07
    4902:	78 85       	ldd	r23, Y+8	; 0x08
    4904:	89 85       	ldd	r24, Y+9	; 0x09
    4906:	9a 85       	ldd	r25, Y+10	; 0x0a
    4908:	20 e0       	ldi	r18, 0x00	; 0
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	40 e8       	ldi	r20, 0x80	; 128
    490e:	5f e3       	ldi	r21, 0x3F	; 63
    4910:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4914:	88 23       	and	r24, r24
    4916:	2c f4       	brge	.+10     	; 0x4922 <main+0x92>
		__ticks = 1;
    4918:	81 e0       	ldi	r24, 0x01	; 1
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	9e 83       	std	Y+6, r25	; 0x06
    491e:	8d 83       	std	Y+5, r24	; 0x05
    4920:	3f c0       	rjmp	.+126    	; 0x49a0 <main+0x110>
	else if (__tmp > 65535)
    4922:	6f 81       	ldd	r22, Y+7	; 0x07
    4924:	78 85       	ldd	r23, Y+8	; 0x08
    4926:	89 85       	ldd	r24, Y+9	; 0x09
    4928:	9a 85       	ldd	r25, Y+10	; 0x0a
    492a:	20 e0       	ldi	r18, 0x00	; 0
    492c:	3f ef       	ldi	r19, 0xFF	; 255
    492e:	4f e7       	ldi	r20, 0x7F	; 127
    4930:	57 e4       	ldi	r21, 0x47	; 71
    4932:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4936:	18 16       	cp	r1, r24
    4938:	4c f5       	brge	.+82     	; 0x498c <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    493a:	6b 85       	ldd	r22, Y+11	; 0x0b
    493c:	7c 85       	ldd	r23, Y+12	; 0x0c
    493e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4940:	9e 85       	ldd	r25, Y+14	; 0x0e
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	40 e2       	ldi	r20, 0x20	; 32
    4948:	51 e4       	ldi	r21, 0x41	; 65
    494a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	bc 01       	movw	r22, r24
    4954:	cd 01       	movw	r24, r26
    4956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    495a:	dc 01       	movw	r26, r24
    495c:	cb 01       	movw	r24, r22
    495e:	9e 83       	std	Y+6, r25	; 0x06
    4960:	8d 83       	std	Y+5, r24	; 0x05
    4962:	0f c0       	rjmp	.+30     	; 0x4982 <main+0xf2>
    4964:	80 e9       	ldi	r24, 0x90	; 144
    4966:	91 e0       	ldi	r25, 0x01	; 1
    4968:	9c 83       	std	Y+4, r25	; 0x04
    496a:	8b 83       	std	Y+3, r24	; 0x03
    496c:	8b 81       	ldd	r24, Y+3	; 0x03
    496e:	9c 81       	ldd	r25, Y+4	; 0x04
    4970:	01 97       	sbiw	r24, 0x01	; 1
    4972:	f1 f7       	brne	.-4      	; 0x4970 <main+0xe0>
    4974:	9c 83       	std	Y+4, r25	; 0x04
    4976:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4978:	8d 81       	ldd	r24, Y+5	; 0x05
    497a:	9e 81       	ldd	r25, Y+6	; 0x06
    497c:	01 97       	sbiw	r24, 0x01	; 1
    497e:	9e 83       	std	Y+6, r25	; 0x06
    4980:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4982:	8d 81       	ldd	r24, Y+5	; 0x05
    4984:	9e 81       	ldd	r25, Y+6	; 0x06
    4986:	00 97       	sbiw	r24, 0x00	; 0
    4988:	69 f7       	brne	.-38     	; 0x4964 <main+0xd4>
    498a:	14 c0       	rjmp	.+40     	; 0x49b4 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    498c:	6f 81       	ldd	r22, Y+7	; 0x07
    498e:	78 85       	ldd	r23, Y+8	; 0x08
    4990:	89 85       	ldd	r24, Y+9	; 0x09
    4992:	9a 85       	ldd	r25, Y+10	; 0x0a
    4994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	9e 83       	std	Y+6, r25	; 0x06
    499e:	8d 83       	std	Y+5, r24	; 0x05
    49a0:	8d 81       	ldd	r24, Y+5	; 0x05
    49a2:	9e 81       	ldd	r25, Y+6	; 0x06
    49a4:	9a 83       	std	Y+2, r25	; 0x02
    49a6:	89 83       	std	Y+1, r24	; 0x01
    49a8:	89 81       	ldd	r24, Y+1	; 0x01
    49aa:	9a 81       	ldd	r25, Y+2	; 0x02
    49ac:	01 97       	sbiw	r24, 0x01	; 1
    49ae:	f1 f7       	brne	.-4      	; 0x49ac <main+0x11c>
    49b0:	9a 83       	std	Y+2, r25	; 0x02
    49b2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(150);
		LCD_voidClear(1,x);
    49b4:	81 e0       	ldi	r24, 0x01	; 1
    49b6:	6f 85       	ldd	r22, Y+15	; 0x0f
    49b8:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <LCD_voidClear>
	LCD_voidInit();

	LCD_voidGoToPosition(0,0);
	LCD_voidWriteString((u8*)"Mara 7mok4a kan ma4y");

	for(u8 x=7; x < 13; x++)
    49bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    49be:	8f 5f       	subi	r24, 0xFF	; 255
    49c0:	8f 87       	std	Y+15, r24	; 0x0f
    49c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    49c4:	8d 30       	cpi	r24, 0x0D	; 13
    49c6:	08 f4       	brcc	.+2      	; 0x49ca <main+0x13a>
    49c8:	7c cf       	rjmp	.-264    	; 0x48c2 <main+0x32>
		LCD_voidDisplaySpecialChar(P1,0,1,x);
		_delay_ms(150);
		LCD_voidClear(1,x);
	}

	LCD_voidClearLine(0,19);
    49ca:	80 e0       	ldi	r24, 0x00	; 0
    49cc:	63 e1       	ldi	r22, 0x13	; 19
    49ce:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_voidClearLine>
	LCD_voidClearLine(1,19);
    49d2:	81 e0       	ldi	r24, 0x01	; 1
    49d4:	63 e1       	ldi	r22, 0x13	; 19
    49d6:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_voidClearLine>
	MoveRight();
    49da:	0e 94 32 19 	call	0x3264	; 0x3264 <MoveRight>
	Write();
    49de:	0e 94 05 1a 	call	0x340a	; 0x340a <Write>
	MoveLeft();
    49e2:	0e 94 04 18 	call	0x3008	; 0x3008 <MoveLeft>
	LCD_voidSendCommand(LCD_ClearDisplay);
    49e6:	81 e0       	ldi	r24, 0x01	; 1
    49e8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_voidSendCommand>
	LCD_voidGoToPosition(1,2);
    49ec:	81 e0       	ldi	r24, 0x01	; 1
    49ee:	62 e0       	ldi	r22, 0x02	; 2
    49f0:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"Short Sad Story.");
    49f4:	84 e5       	ldi	r24, 0x54	; 84
    49f6:	91 e0       	ldi	r25, 0x01	; 1
    49f8:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
	LCD_voidGoToPosition(2,6);
    49fc:	82 e0       	ldi	r24, 0x02	; 2
    49fe:	66 e0       	ldi	r22, 0x06	; 6
    4a00:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"LOL :D");
    4a04:	85 e6       	ldi	r24, 0x65	; 101
    4a06:	91 e0       	ldi	r25, 0x01	; 1
    4a08:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_voidWriteString>
    4a0c:	ff cf       	rjmp	.-2      	; 0x4a0c <main+0x17c>

00004a0e <__mulsi3>:
    4a0e:	62 9f       	mul	r22, r18
    4a10:	d0 01       	movw	r26, r0
    4a12:	73 9f       	mul	r23, r19
    4a14:	f0 01       	movw	r30, r0
    4a16:	82 9f       	mul	r24, r18
    4a18:	e0 0d       	add	r30, r0
    4a1a:	f1 1d       	adc	r31, r1
    4a1c:	64 9f       	mul	r22, r20
    4a1e:	e0 0d       	add	r30, r0
    4a20:	f1 1d       	adc	r31, r1
    4a22:	92 9f       	mul	r25, r18
    4a24:	f0 0d       	add	r31, r0
    4a26:	83 9f       	mul	r24, r19
    4a28:	f0 0d       	add	r31, r0
    4a2a:	74 9f       	mul	r23, r20
    4a2c:	f0 0d       	add	r31, r0
    4a2e:	65 9f       	mul	r22, r21
    4a30:	f0 0d       	add	r31, r0
    4a32:	99 27       	eor	r25, r25
    4a34:	72 9f       	mul	r23, r18
    4a36:	b0 0d       	add	r27, r0
    4a38:	e1 1d       	adc	r30, r1
    4a3a:	f9 1f       	adc	r31, r25
    4a3c:	63 9f       	mul	r22, r19
    4a3e:	b0 0d       	add	r27, r0
    4a40:	e1 1d       	adc	r30, r1
    4a42:	f9 1f       	adc	r31, r25
    4a44:	bd 01       	movw	r22, r26
    4a46:	cf 01       	movw	r24, r30
    4a48:	11 24       	eor	r1, r1
    4a4a:	08 95       	ret

00004a4c <__divmodsi4>:
    4a4c:	97 fb       	bst	r25, 7
    4a4e:	09 2e       	mov	r0, r25
    4a50:	05 26       	eor	r0, r21
    4a52:	0e d0       	rcall	.+28     	; 0x4a70 <__divmodsi4_neg1>
    4a54:	57 fd       	sbrc	r21, 7
    4a56:	04 d0       	rcall	.+8      	; 0x4a60 <__divmodsi4_neg2>
    4a58:	14 d0       	rcall	.+40     	; 0x4a82 <__udivmodsi4>
    4a5a:	0a d0       	rcall	.+20     	; 0x4a70 <__divmodsi4_neg1>
    4a5c:	00 1c       	adc	r0, r0
    4a5e:	38 f4       	brcc	.+14     	; 0x4a6e <__divmodsi4_exit>

00004a60 <__divmodsi4_neg2>:
    4a60:	50 95       	com	r21
    4a62:	40 95       	com	r20
    4a64:	30 95       	com	r19
    4a66:	21 95       	neg	r18
    4a68:	3f 4f       	sbci	r19, 0xFF	; 255
    4a6a:	4f 4f       	sbci	r20, 0xFF	; 255
    4a6c:	5f 4f       	sbci	r21, 0xFF	; 255

00004a6e <__divmodsi4_exit>:
    4a6e:	08 95       	ret

00004a70 <__divmodsi4_neg1>:
    4a70:	f6 f7       	brtc	.-4      	; 0x4a6e <__divmodsi4_exit>
    4a72:	90 95       	com	r25
    4a74:	80 95       	com	r24
    4a76:	70 95       	com	r23
    4a78:	61 95       	neg	r22
    4a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a80:	08 95       	ret

00004a82 <__udivmodsi4>:
    4a82:	a1 e2       	ldi	r26, 0x21	; 33
    4a84:	1a 2e       	mov	r1, r26
    4a86:	aa 1b       	sub	r26, r26
    4a88:	bb 1b       	sub	r27, r27
    4a8a:	fd 01       	movw	r30, r26
    4a8c:	0d c0       	rjmp	.+26     	; 0x4aa8 <__udivmodsi4_ep>

00004a8e <__udivmodsi4_loop>:
    4a8e:	aa 1f       	adc	r26, r26
    4a90:	bb 1f       	adc	r27, r27
    4a92:	ee 1f       	adc	r30, r30
    4a94:	ff 1f       	adc	r31, r31
    4a96:	a2 17       	cp	r26, r18
    4a98:	b3 07       	cpc	r27, r19
    4a9a:	e4 07       	cpc	r30, r20
    4a9c:	f5 07       	cpc	r31, r21
    4a9e:	20 f0       	brcs	.+8      	; 0x4aa8 <__udivmodsi4_ep>
    4aa0:	a2 1b       	sub	r26, r18
    4aa2:	b3 0b       	sbc	r27, r19
    4aa4:	e4 0b       	sbc	r30, r20
    4aa6:	f5 0b       	sbc	r31, r21

00004aa8 <__udivmodsi4_ep>:
    4aa8:	66 1f       	adc	r22, r22
    4aaa:	77 1f       	adc	r23, r23
    4aac:	88 1f       	adc	r24, r24
    4aae:	99 1f       	adc	r25, r25
    4ab0:	1a 94       	dec	r1
    4ab2:	69 f7       	brne	.-38     	; 0x4a8e <__udivmodsi4_loop>
    4ab4:	60 95       	com	r22
    4ab6:	70 95       	com	r23
    4ab8:	80 95       	com	r24
    4aba:	90 95       	com	r25
    4abc:	9b 01       	movw	r18, r22
    4abe:	ac 01       	movw	r20, r24
    4ac0:	bd 01       	movw	r22, r26
    4ac2:	cf 01       	movw	r24, r30
    4ac4:	08 95       	ret

00004ac6 <__prologue_saves__>:
    4ac6:	2f 92       	push	r2
    4ac8:	3f 92       	push	r3
    4aca:	4f 92       	push	r4
    4acc:	5f 92       	push	r5
    4ace:	6f 92       	push	r6
    4ad0:	7f 92       	push	r7
    4ad2:	8f 92       	push	r8
    4ad4:	9f 92       	push	r9
    4ad6:	af 92       	push	r10
    4ad8:	bf 92       	push	r11
    4ada:	cf 92       	push	r12
    4adc:	df 92       	push	r13
    4ade:	ef 92       	push	r14
    4ae0:	ff 92       	push	r15
    4ae2:	0f 93       	push	r16
    4ae4:	1f 93       	push	r17
    4ae6:	cf 93       	push	r28
    4ae8:	df 93       	push	r29
    4aea:	cd b7       	in	r28, 0x3d	; 61
    4aec:	de b7       	in	r29, 0x3e	; 62
    4aee:	ca 1b       	sub	r28, r26
    4af0:	db 0b       	sbc	r29, r27
    4af2:	0f b6       	in	r0, 0x3f	; 63
    4af4:	f8 94       	cli
    4af6:	de bf       	out	0x3e, r29	; 62
    4af8:	0f be       	out	0x3f, r0	; 63
    4afa:	cd bf       	out	0x3d, r28	; 61
    4afc:	09 94       	ijmp

00004afe <__epilogue_restores__>:
    4afe:	2a 88       	ldd	r2, Y+18	; 0x12
    4b00:	39 88       	ldd	r3, Y+17	; 0x11
    4b02:	48 88       	ldd	r4, Y+16	; 0x10
    4b04:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b06:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b08:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b10:	b9 84       	ldd	r11, Y+9	; 0x09
    4b12:	c8 84       	ldd	r12, Y+8	; 0x08
    4b14:	df 80       	ldd	r13, Y+7	; 0x07
    4b16:	ee 80       	ldd	r14, Y+6	; 0x06
    4b18:	fd 80       	ldd	r15, Y+5	; 0x05
    4b1a:	0c 81       	ldd	r16, Y+4	; 0x04
    4b1c:	1b 81       	ldd	r17, Y+3	; 0x03
    4b1e:	aa 81       	ldd	r26, Y+2	; 0x02
    4b20:	b9 81       	ldd	r27, Y+1	; 0x01
    4b22:	ce 0f       	add	r28, r30
    4b24:	d1 1d       	adc	r29, r1
    4b26:	0f b6       	in	r0, 0x3f	; 63
    4b28:	f8 94       	cli
    4b2a:	de bf       	out	0x3e, r29	; 62
    4b2c:	0f be       	out	0x3f, r0	; 63
    4b2e:	cd bf       	out	0x3d, r28	; 61
    4b30:	ed 01       	movw	r28, r26
    4b32:	08 95       	ret

00004b34 <_exit>:
    4b34:	f8 94       	cli

00004b36 <__stop_program>:
    4b36:	ff cf       	rjmp	.-2      	; 0x4b36 <__stop_program>
